{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Ant Design Vue中Table组件行内右键菜单实现方法.md","hash":"1a6c9161aba233420050074b4ec8de175fc11c50","modified":1636353050977},{"_id":"source/.DS_Store","hash":"71e7b89a55f687f1234e2f1a9152c8a6d42f5a52","modified":1636076203621},{"_id":"source/_posts/CSS水平垂直居中实现方式.md","hash":"65340fad60fd20e86dbec5d4bae7367c42c04592","modified":1636353063158},{"_id":"source/about/index.md","hash":"09131cbdeea395523190c3c5dd4886d01eff5e75","modified":1636101132963},{"_id":"source/_posts/Docker常用命令.md","hash":"68d37786430caf3993ac6e38fdc856255b85db67","modified":1636353135006},{"_id":"source/_posts/CSS笔记.md","hash":"ef4a940784698f5572279a60dcfe70744f4d6dca","modified":1636353056453},{"_id":"source/_posts/JavaScript工具函数.md","hash":"4994338cecf1483440bfe20b2058cc37a074f132","modified":1636353603870},{"_id":"source/_posts/HTML标签语义化.md","hash":"8dfddf4dd57dccfa8032c45febc5c7bdddad5287","modified":1636353292520},{"_id":"source/_posts/JS的Proxy笔记.md","hash":"b36458e7440d2f2b2335113274173961fc919e4f","modified":1636353626444},{"_id":"source/_posts/CSS画图大法.md","hash":"98dcf7ae1fa70ab3196ed3cf2d66294f09d0119b","modified":1636353206526},{"_id":"source/_posts/JavaScript的垃圾回收机制.md","hash":"22170d593d63e4b2e2f1c9ada73f8809e4fc3ed3","modified":1636353323021},{"_id":"source/_posts/JavaScript的eval函数.md","hash":"8713a21d32d14b47795fcbe1716b8d1185a62b21","modified":1636353344855},{"_id":"source/_posts/SEO介绍.md","hash":"efe952a2a2e9bce2d1701082090f03de2774038a","modified":1636353667021},{"_id":"source/_posts/Vue+TypeScript使用记录.md","hash":"939d45f777229a9303c5ca604826f5eb7c067f2c","modified":1636353695655},{"_id":"source/_posts/Webpack面试题.md","hash":"4722d1ce77541aeedf24f1581ed98194de7d9d36","modified":1636353734883},{"_id":"source/_posts/Webstorm 按内容自动检测文件类型.md","hash":"f31c23d614c41fcb77c9031cd4dadfafe3088a6e","modified":1636353748402},{"_id":"source/_posts/JavaScript踩坑之parseInt.md","hash":"737c00fcd3d5de154e9fd6d2701384802f7d49c6","modified":1636353304516},{"_id":"source/_posts/gin中文文档.md","hash":"4c8d4649836db872bf04d3c43f9b2e41d47ecdf8","modified":1636353144169},{"_id":"source/_posts/vue全局水印特效.md","hash":"140aa00292c8d404e490449d44846931eed391c6","modified":1636353718257},{"_id":"source/_posts/Nuxt优化笔记.md","hash":"410834c852963a957f2500a470c7c3c758386e2a","modified":1636353646949},{"_id":"source/_posts/前端BFC.md","hash":"e34cfcbe7d99b8fa80be5d25071b5212f00d56eb","modified":1636346721373},{"_id":"source/_posts/vue添加购物车动效.md","hash":"1846bbaac33e881a2d9829c823be7b41699df4de","modified":1636353722333},{"_id":"source/_posts/常用正则表达式.md","hash":"b6e1823a75c43938ace77c462b7c677a3e5d2677","modified":1636346508675},{"_id":"source/_posts/详解Promise.md","hash":"90b57e802274908a5d87ba9f79b9a89fadf03012","modified":1636353026993},{"_id":"source/_posts/观察者模式.md","hash":"ae9cc4c18dcf05d563b3a4f63ccff4001591df53","modified":1636346663716},{"_id":"source/categories/index.md","hash":"f3c02dd0d70019be21a0e4f448a952ba255856cd","modified":1636097701221},{"_id":"source/_posts/前端面经.md","hash":"b38ef83d69e69de788a8eabc3320a29248711e2b","modified":1636351704968},{"_id":"source/tags/index.md","hash":"ad85185ccb03cb6897a10c6e86cae4ed736e573a","modified":1636097634856},{"_id":"source/link/index.md","hash":"6b7e1cc0fb311738ea06af4b3a3328d2ea1394a7","modified":1636097759898},{"_id":"themes/butterfly/_config.yml","hash":"2995b12a54fb6fcd0b96d230f419b51254de0a1d","modified":1636096889531},{"_id":"themes/butterfly/package.json","hash":"e219db6e5d00f032bc1bf75d5ecb1c445480310e","modified":1636023021805},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1636023021792},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1636023021792},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1636023021804},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1636023021805},{"_id":"themes/butterfly/layout/post.pug","hash":"8d398c8925182699d9f2b9f1b727f06228488312","modified":1636023021804},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"b1ba98565fe2d28e956225cf9e8a21f329ee060e","modified":1636023021792},{"_id":"themes/butterfly/languages/en.yml","hash":"7fe7528ed2778fe39444df2bc7e64f09e1302e97","modified":1636023021791},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1636023021804},{"_id":"themes/butterfly/languages/default.yml","hash":"1177f2177945c3e2447c6c0208e6ffdf0c0b186c","modified":1636023021791},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"38b32ab2aa3e2ebb9ef3c993c8dca42f1e000cd5","modified":1636023021792},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1636023021792},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"ab3bdeb6e0acd3d58091698c1335afb069eea7e5","modified":1636023021792},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"0b36044d4b5e8346c0e0a066139590c5f28746ac","modified":1636345592579},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"5945f6f7f963b3ed1cc50e7e7d2e4929e1c1440c","modified":1636023021793},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1636023021796},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"6f2608c4d93d3d10ae6b2cd7f8918f303f024321","modified":1636023021795},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"428758c2459fd31efaf816c39693edb4f716b861","modified":1636023021796},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"f093ab771257a6a939b194f68607a2038c8d7da3","modified":1636023021797},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1636023021805},{"_id":"themes/butterfly/scripts/events/init.js","hash":"a7f567b3d3110afe2f99c967b8e15351a7f5bd6d","modified":1636023021805},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1636023021805},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21353fa63066c16631b672a899fe023a57046052","modified":1636023021805},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"d575137c8779e50422c2416f4d0832fdea346ee6","modified":1636023021805},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"9821872007cf57efae4b728dc575ef9d004547bb","modified":1636023021806},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1636023021806},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1636023021805},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1636023021806},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"6a103a2472903289bdecd5240eb89cac0b9e13d9","modified":1636023021806},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"21556f9cb412ddc500ad12ecfd419f3ea6c9f663","modified":1636023021806},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"b816ded1451f28c7c54151ffe6c259b110253ae3","modified":1636023021806},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1636023021806},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"f79c99f6c5b626c272dc2bed2b0250d6b91bb28a","modified":1636023021806},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f33858ffb9e88191e644796e11d2f901eb332308","modified":1636023021807},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1636023021807},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1636023021807},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1636023021807},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1636023021807},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"1fb4ff22185f85fdcdef3e281a659d2b731c7a43","modified":1636023021807},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1636023021807},{"_id":"themes/butterfly/source/js/main.js","hash":"d0bbc7405f8023e7da6e1b0ce1227f5b31da3523","modified":1636023021815},{"_id":"themes/butterfly/source/css/var.styl","hash":"7e9123c64dd7f589db46ba9d7416c6537b8243ff","modified":1636026911567},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1636023021814},{"_id":"themes/butterfly/source/js/utils.js","hash":"77cbf471fb452a6b1c1d9a681d636615e0828cce","modified":1636023021816},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1636023021816},{"_id":"themes/butterfly/README.md","hash":"a602f493002d7aca5915cc0d4ec4db646a288e11","modified":1636023021790},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1636023021793},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1636023021793},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"2d7353bf7d176face2a60bceeb16105e395aaf19","modified":1636023021793},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"f579212cc4e61eeae7523ad33fe4183f6d1ae1f5","modified":1636023021793},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1636023021793},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1636023021793},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"65a23b5170204e55b813ce13a79d799b66b7382c","modified":1636023021793},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1636023021794},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1636023021794},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1636023021794},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1636023021794},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"78a3abd90bb3c18cd773d3d5abac3541e7f415e5","modified":1636023021794},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"dc3913c1a6dd207051c3d3414a33851ae8bc0a45","modified":1636023021794},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1636023021794},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1636023021795},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1636023021795},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1636023021795},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1636023021796},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"efa3c467611c2efe816123b7ab1b4ea0454ac867","modified":1636023021796},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1636023021796},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1636023021795},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"bb9283489d04243c996fee96f592c50ff7e575a7","modified":1636023021795},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1636023021796},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"5b404356f311d2ee36478291ca3553210867b738","modified":1636023021796},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":1636023021797},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":1636023021800},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"362e20e9d244b75eb3412597261c74dc6ad5b346","modified":1636023021802},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":1636023021801},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"e59c56b39a9ec08627f207cf25e458030d5b5c30","modified":1636023021803},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1636023021802},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1636023021814},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1636023021803},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1636023021803},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"3d8e3706a056389176f55dd21956aabc78046761","modified":1636023021803},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"069e7c20ca3dfff2dd0db750867377dcff907f9a","modified":1636023021803},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1636023021803},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1636023021803},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"27afd2274bd5f2cbbf1bad9f0afe2b2b72c213ca","modified":1636023021803},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1636023021815},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"0517b4d3c551da67d1f04417a856323f28b66665","modified":1636023021804},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1636023021804},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1636023021804},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1636023021804},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1636023021804},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"f6b31b9fde818ad03f35fd70855444bd5d564142","modified":1636023021804},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"b084039c5dc935cdd36c329c4d6ffd8d70dc046c","modified":1636023021808},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"9b99710c00a9e4268238034cfbc056dfdb458089","modified":1636023021808},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"facf3bec0afce3bc6d077cf1939818efc7fe3bf1","modified":1636023021808},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1636023021809},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"dc9130391484f1aa10edde57cfd2f4df443d2438","modified":1636023021809},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1636023021809},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"db71a7410e02a31bbbb06569743413b08de06df2","modified":1636027322883},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1636023021809},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ef21990de28bd75dcd0f88b8d616e1a7a137502f","modified":1636023021810},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"9cee2b1dcfa4f0578ea917e0719aa59fcb158c76","modified":1636023021810},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"fddcd4ae311be07c69b3c7ff7a617218a488bebb","modified":1636345640569},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1636023021810},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b13bda9d22b3b32b1f48e48521f6e39a154e5596","modified":1636023021810},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"1bcbc80dff19cd53d0b367c3b9a3c751d3a1f10d","modified":1636023021810},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"66c8c94bdc62e00e1dd848582aa2612ae22c1066","modified":1636023021810},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"2947cd6536cd52e951c1ee898f806f0825da732f","modified":1636023021810},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"017fde4c7f6605d4e44839ba0e683f48798bfbc8","modified":1636023021810},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"684cb97bad6895f88d1e943113172b7c0b0eda95","modified":1636347150759},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1636023021811},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1636023021811},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6f4b4ede52305bce9b22c8c897dcbde8af6e2ce4","modified":1636023021811},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"91dfd28d7e5f2113e27c8ae854337d316ca1c48f","modified":1636023021811},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"5151aee16a39d522efb595f70494cdcc71fec154","modified":1636023021811},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"f93f5c4aa121af8f5bb1ee7da6b69dd85f0b16fe","modified":1636023021811},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1636023021812},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"826dae759062d8f84eb2bf5ab8fdb80e0f79d58b","modified":1636023021812},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"db839912634f341d290f98e7cf5e1c42f03a4f7d","modified":1636023021812},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"a310e48f826a4cacc55d8e68f43806e5085554f6","modified":1636023021812},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"e8e1ef4640750a6328d7dcb28d5b1e038a280217","modified":1636023021813},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1636023021813},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"f741e85295ce15c70a6027ec15a542636dd5dcca","modified":1636023021813},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1636023021813},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"f28ceaf53cb6cdd2ed727c3a34301f22bb13ad6b","modified":1636023021813},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1636023021813},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f08d23dd704ba358a4d8a1dacd48be79fb4019c7","modified":1636023021813},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1636023021813},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"656f9007d94cf29a20532705d94fb7f22827e6fe","modified":1636023021812},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"debebe53d1740b5ab62481092871926d91aa38c2","modified":1636023021812},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1636023021797},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1636023021797},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1636023021797},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":1636023021797},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":1636023021798},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"400ce038548d6f9ddb486150c724c87b6923a88b","modified":1636023021798},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1636023021798},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1636023021798},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1636023021798},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1636023021798},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1636023021798},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1636023021799},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"143236e395c18d80ab8dc794821eb337c85f6b32","modified":1636023021799},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"6852d4fa5fff3fe52fdc41875a2c7af57f286b3a","modified":1636023021799},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"9c96e6e67931977268b218b99084b98597c2e42b","modified":1636023021799},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1636023021799},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"da9813f8dc0d388869c15413cf056012cfb69e1a","modified":1636023021799},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"bafb3d5710824caa59a56017afb058fd2b4eac65","modified":1636023021799},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1636023021799},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"c271cacbac14ed665bbf47aa9c6e74e94c69dcef","modified":1636023021799},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"c1c75abe5c899618ed6699c97ac999544840098a","modified":1636023021800},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"59c22ebf3aaee90152e7cdb17ff5841c888fcd82","modified":1636023021800},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"36f3c603d2a2ecddaa6d2675a89d76ad94968f72","modified":1636023021800},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1636023021800},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f9b00ead54573ba6e6eb33481588af144aab648d","modified":1636023021800},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"a47d8f9f593091cc91192c0c49deaa2c0d2317fd","modified":1636023021800},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"516ffc1612d3a2749cba74953f5263f410415141","modified":1636023021800},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"b443d6b16baf3ea250041342cc0361a42a412b7f","modified":1636023021801},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"34088a15655704d12e9b1807b47b3f6a860c9eec","modified":1636023021801},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1636023021801},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"cb38ffe911023092a90a28f2ba8317a92b22cd0c","modified":1636023021801},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"e4c987c0202162b50dec91e1df74665d0fa933c9","modified":1636023021812},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"b507f92ca8f6d37c1b2ff27d2376e3436510a84f","modified":1636023021816},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"ad25affc2ef444352705c4c3e8fc618174ac9b2b","modified":1636023021815},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"59b4c26a827ace5a54855881d199977103ff6f50","modified":1636023021801},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"a2bc2601b7e0ae5caf1fc51a07390562d928620a","modified":1636023021801},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"c92df4f9d0611cf44c1a4491e226f242ec80f5bb","modified":1636023021802},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1636023021802},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"8ce336a4c8cae81b58ee26ff51040ca650ff1519","modified":1636023021802},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1636023021802},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1636023021802},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":1636023021803},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1636023021808},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"8c0726fb8d9a497d2f900b0be2845efaa68e3d87","modified":1636023021808},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1636023021802},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1636023021808},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1636023021809},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"1fa64def79b4bfa3a6f3985d4e7acdff5b981617","modified":1636023021809},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"11536144746f36365e18fe6c37e125b31253f871","modified":1629191875087},{"_id":"public/link/index.html","hash":"045e4bef8091d2de5f57e20a892606f4daf5f192","modified":1636354413373},{"_id":"public/about/index.html","hash":"26c1bf1e59b153d28ed7f755ae7d77ea05d9c11d","modified":1636354413373},{"_id":"public/404.html","hash":"8dad5933d2ad780fe2cacd10b85f027959feeb31","modified":1636354413373},{"_id":"public/categories/index.html","hash":"b4f5026c0c804c428978c4571c81009b1e385bf2","modified":1636354413373},{"_id":"public/tags/index.html","hash":"bce74ca7a7ba31429d7bc2afd8991aad3fdb2028","modified":1636354413373},{"_id":"public/2021/10/09/Nuxt优化笔记/index.html","hash":"449a51c3774ddc69670798ac03ac65296f01197b","modified":1636354413373},{"_id":"public/2021/09/03/Webpack面试题/index.html","hash":"013b31d84dcb71070eb6128658d4053dc0a32f35","modified":1636354413373},{"_id":"public/2021/08/17/gin中文文档/index.html","hash":"e424e6667c335db903a6a7d965cd8ed45e17f839","modified":1636354413373},{"_id":"public/2021/08/12/vue全局水印特效/index.html","hash":"afa685be38b01891270b065082ad8074d6ca5c23","modified":1636354413373},{"_id":"public/2021/08/12/观察者模式/index.html","hash":"578b9b01a01f08ca0ebc5b9ed96b4db28298b051","modified":1636354413373},{"_id":"public/2021/08/04/Ant Design Vue中Table组件行内右键菜单实现方法/index.html","hash":"eff9f01d02c36668dc3dc96dbe1ff0b83bd53d93","modified":1636354413373},{"_id":"public/2021/08/03/Webstorm 按内容自动检测文件类型/index.html","hash":"fa958d14b7d0763bd0b6cb1cdb508a90b5d7c12c","modified":1636354413373},{"_id":"public/2021/06/11/Docker常用命令/index.html","hash":"e2cb5a78b8644a1987b7d3c92672394f1adb5784","modified":1636354413373},{"_id":"public/2021/05/17/JavaScript的eval函数/index.html","hash":"4f90841542f92ecc1f785a5cc1ba88ac252b5f01","modified":1636354413373},{"_id":"public/2021/05/16/JavaScript工具函数/index.html","hash":"8327e7af3756d517117fb034eb161088011f60a6","modified":1636354413373},{"_id":"public/2021/04/22/前端面经/index.html","hash":"e50a0ba6731be4ccf03d2bd79f4b864524b244a6","modified":1636354413373},{"_id":"public/2021/05/06/JavaScript踩坑之parseInt/index.html","hash":"1e5eb61148926da97a43614cfee1aa1ed6ad25f2","modified":1636354413373},{"_id":"public/2021/04/23/JS的Proxy笔记/index.html","hash":"ed9583492f75bfd558510427b893330492be8fd7","modified":1636354413373},{"_id":"public/2021/04/18/CSS画图大法/index.html","hash":"d9c5760e4d6588106529f019e72593d3180712e4","modified":1636354413373},{"_id":"public/2021/04/06/JavaScript的垃圾回收机制/index.html","hash":"524788228bdb9fee96d685b81325120332bda7c9","modified":1636354413373},{"_id":"public/2021/04/13/vue添加购物车动效/index.html","hash":"b923aa926002b182c53ac1a146b2d0534d233152","modified":1636354413373},{"_id":"public/2021/04/02/前端BFC/index.html","hash":"461364f19c224936cbe0f65096093a46bcff3b17","modified":1636354413373},{"_id":"public/2021/01/29/详解Promise/index.html","hash":"1f86a80358605d09706dff61ce2bbf9837106d97","modified":1636354413373},{"_id":"public/2020/12/17/Vue+TypeScript使用记录/index.html","hash":"a00942a5c337a91e3fad2ef684b7ed4a0391d672","modified":1636354413373},{"_id":"public/2020/09/21/SEO介绍/index.html","hash":"554dd5ea976ce5e2e253d88de68ddaaa390137dd","modified":1636354413373},{"_id":"public/2020/09/21/HTML标签语义化/index.html","hash":"c1a11032fe93893a732636718c7f3078132b9ea1","modified":1636354413373},{"_id":"public/2019/12/06/CSS笔记/index.html","hash":"d6603fea5a269d1272fd7f29c8d1da5ef50ae719","modified":1636354413373},{"_id":"public/2019/09/12/常用正则表达式/index.html","hash":"a87246314f3bb59d9b4a12012e04088b45796d5b","modified":1636354413373},{"_id":"public/2019/08/28/CSS水平垂直居中实现方式/index.html","hash":"956009a2b61ccfbf78639d9ab7bed518acd171bc","modified":1636354413373},{"_id":"public/archives/page/3/index.html","hash":"2ffb4c04e3d5d445c6b95b717973d9561cd0488d","modified":1636354413373},{"_id":"public/archives/index.html","hash":"75f9b86bc83eeb83e8d5bcfcda653bbbb698bbff","modified":1636354413373},{"_id":"public/archives/page/2/index.html","hash":"43df4f3c6c3597c6862282f0e923050e8273abe5","modified":1636354413373},{"_id":"public/archives/2019/08/index.html","hash":"3960a51d7f205d092c2d0b7fdb5e08139708bd70","modified":1636354413373},{"_id":"public/archives/2019/09/index.html","hash":"d159b763807d9a2fa2bd5007518e13d1fe0204f2","modified":1636354413373},{"_id":"public/archives/2019/index.html","hash":"34f5d1b70e31a4b398f97330c9789f819c52cc19","modified":1636354413373},{"_id":"public/archives/2019/12/index.html","hash":"76f9cd942368e173fc7b387f082f824e0fa5e3f9","modified":1636354413373},{"_id":"public/archives/2020/12/index.html","hash":"960aa0028a992487400c3edff849b18e5ee9a8e7","modified":1636354413373},{"_id":"public/archives/2020/index.html","hash":"4287f65d0d9a283d0e3636b8598f766519f03fec","modified":1636354413373},{"_id":"public/archives/2020/09/index.html","hash":"e47409e74fde56b64376f96f897125bd647c2e79","modified":1636354413373},{"_id":"public/archives/2021/index.html","hash":"e4afa90a7347c9b943bd278e1d70ea3195085afe","modified":1636354413373},{"_id":"public/archives/2021/page/2/index.html","hash":"ddeb6930ad0a61748faa27d5a298f372011a7953","modified":1636354413373},{"_id":"public/archives/2021/01/index.html","hash":"988d243343640a89a5d9e57d97ed718a953dc36e","modified":1636354413373},{"_id":"public/archives/2021/04/index.html","hash":"a46c22bd56b7c2dbafa2b341e9578d4790734774","modified":1636354413373},{"_id":"public/archives/2021/06/index.html","hash":"46e1a79f2a6ec478bbed1a6f59d955594dd703df","modified":1636354413373},{"_id":"public/archives/2021/05/index.html","hash":"164dd875da862c60ac85919bec9894faccfc5c40","modified":1636354413373},{"_id":"public/archives/2021/10/index.html","hash":"e404cbe59510d0f8c4d8cbca7030520279b13f7d","modified":1636354413373},{"_id":"public/categories/Vue/index.html","hash":"e4a615f7d52af7e8406eb3cfc3d068802534c4f1","modified":1636354413373},{"_id":"public/archives/2021/09/index.html","hash":"ac2683d577b69658be1d7b29c178b5d96baf689b","modified":1636354413373},{"_id":"public/categories/CSS/index.html","hash":"258170410ffcf432b2469c3af224d218dde3324b","modified":1636354413373},{"_id":"public/categories/HTML/index.html","hash":"89a8507d071b1eaf69acfc866a37618b56441b9d","modified":1636354413373},{"_id":"public/archives/2021/08/index.html","hash":"a930f2b94a45ba5a1096c08493320004519f2502","modified":1636354413373},{"_id":"public/categories/Docker/index.html","hash":"7bddb046c68c0ed3c1783352afca2da30977914b","modified":1636354413373},{"_id":"public/categories/Javascript/index.html","hash":"3ae4194ada99e149b5038d07e98278b83a8d6ce4","modified":1636354413373},{"_id":"public/categories/JavaScript/index.html","hash":"6e91d8e5f01e649d86b524c7e1490f0fd1a3d52c","modified":1636354413373},{"_id":"public/categories/前端知识点/index.html","hash":"e44c0d417c630c1e28ff37d43ee7002ec671255a","modified":1636354413373},{"_id":"public/categories/WebStorm/index.html","hash":"6cc7d49a0b1f499ab18d9bbb2dcc8e18eb77b124","modified":1636354413373},{"_id":"public/categories/Nuxt/index.html","hash":"6221407871504ee6fd742a1305b9d8137ebde327","modified":1636354413373},{"_id":"public/categories/设计模式/index.html","hash":"eaa2d4e2aa4becaf93f88abaf5bc0087028aa8e2","modified":1636354413373},{"_id":"public/categories/GO/index.html","hash":"e7607db7a2dc83bfaac39e338ab15df654fc7323","modified":1636354413373},{"_id":"public/categories/正则表达式/index.html","hash":"d2f92a0c463fc7ece1676198aa9289c09e56a987","modified":1636354413373},{"_id":"public/categories/Webpack/index.html","hash":"61b8b13e8f40bcfc80c22e46fc98ff46a020b2cd","modified":1636354413373},{"_id":"public/tags/Vue技巧/index.html","hash":"159b5ae132be672a395583c37a4fe77ed16e71cb","modified":1636354413373},{"_id":"public/index.html","hash":"d943b91de7c4ffc4193256798490094effc5735e","modified":1636354413373},{"_id":"public/tags/面经/index.html","hash":"8928f9111e49a24e8b6fa4a52e65e278b68cbe7d","modified":1636354413373},{"_id":"public/page/2/index.html","hash":"c6a75c0b26a00f95bb917f3d1c24687fb2da41ad","modified":1636354413373},{"_id":"public/page/3/index.html","hash":"ed5df17dd645e4da106cbdb94b3bd7b4b8232a56","modified":1636354413373},{"_id":"public/tags/面经/page/2/index.html","hash":"acfb168fec79471f66a7179904ae423f6a482358","modified":1636354413373},{"_id":"public/tags/Docker/index.html","hash":"352573417a6ca0b6b6ddc304acf86768bf8ceecc","modified":1636354413373},{"_id":"public/tags/JavaScript工具函数/index.html","hash":"3dad85024cdae9b0eec48fd42c8ad35e9b59f0bf","modified":1636354413373},{"_id":"public/tags/TS笔记/index.html","hash":"afe39650a4a41335a923a5834236e00eeda44f5b","modified":1636354413373},{"_id":"public/tags/SEO/index.html","hash":"1343d771cfc3f7285734c1631c0d87b8c537a623","modified":1636354413373},{"_id":"public/tags/WebStorm技巧/index.html","hash":"27ddcce8cc068d616c88f681226d702a4fcef720","modified":1636354413373},{"_id":"public/tags/gin中文文档/index.html","hash":"7546b96a10da3077f9d00742de53dd820d6e0cf2","modified":1636354413373},{"_id":"public/tags/JS的Proxy笔记/index.html","hash":"1d0906b9af91b424ed12e25004f71e01c74af947","modified":1636354413373},{"_id":"public/tags/设计模式/index.html","hash":"80b50311af59bed2b3f6b771738f21d9cfcc1d8c","modified":1636354413373},{"_id":"public/tags/Webpack/index.html","hash":"062121a1c5ff116801fb92820b95277575c65a92","modified":1636354413373},{"_id":"public/tags/正则表达式/index.html","hash":"91a7ecde458830e1f04772e09e3d87f3c7c223a7","modified":1636354413373},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1636354413373},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1636354413373},{"_id":"public/img/favicon.ico","hash":"11536144746f36365e18fe6c37e125b31253f871","modified":1636354413373},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1636354413373},{"_id":"public/js/search/algolia.js","hash":"ad25affc2ef444352705c4c3e8fc618174ac9b2b","modified":1636354413373},{"_id":"public/js/utils.js","hash":"77cbf471fb452a6b1c1d9a681d636615e0828cce","modified":1636354413373},{"_id":"public/js/search/local-search.js","hash":"b507f92ca8f6d37c1b2ff27d2376e3436510a84f","modified":1636354413373},{"_id":"public/css/index.css","hash":"a4900083005dcc360489ab54b0e34147268515d4","modified":1636354413373},{"_id":"public/js/main.js","hash":"d0bbc7405f8023e7da6e1b0ce1227f5b31da3523","modified":1636354413373},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1636354413373}],"Category":[{"name":"Vue","_id":"ckvqb62cn0004rifyay7kenvd"},{"name":"CSS","_id":"ckvqb62cq000brifybyo44z7b"},{"name":"HTML","_id":"ckvqb62cw000orify8fscaus1"},{"name":"Docker","_id":"ckvqb62cy000xrify38rs9ceb"},{"name":"Javascript","_id":"ckvqb62d10014rifyhu020ihu"},{"name":"JavaScript","_id":"ckvqb62d4001irify3pegf8ec"},{"name":"前端知识点","_id":"ckvqb62d7001rrify04fk1s6z"},{"name":"WebStorm","_id":"ckvqb62d8001yrifyhl1s10wq"},{"name":"GO","_id":"ckvqb62da0029rifyhzz4cfli"},{"name":"Nuxt","_id":"ckvqb62da002drifydxfndvtw"},{"name":"设计模式","_id":"ckvqb62db002grify94fk4bsb"},{"name":"Webpack","_id":"ckvqb62do002orify6v021jyr"},{"name":"正则表达式","_id":"ckvqb62do002srify61b75ol8"}],"Data":[],"Page":[{"title":"about","date":"2021-11-05T08:32:12.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-11-05 16:32:12\n---\n","updated":"2021-11-05T08:32:12.963Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckvqb62ce0000rify24wg7rva","content":"","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"link","date":"2021-11-05T07:35:59.000Z","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2021-11-05 15:35:59\n---\n","updated":"2021-11-05T07:35:59.898Z","path":"link/index.html","comments":1,"layout":"page","_id":"ckvqb62cl0002rifyamxs496c","content":"","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"tags","date":"2021-11-05T07:33:54.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-11-05 15:33:54\n---\n","updated":"2021-11-05T07:33:54.856Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckvqb62co0006rifyfyf7b2x1","content":"","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"categories","date":"2021-11-05T07:35:01.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-11-05 15:35:01\n---\n","updated":"2021-11-05T07:35:01.221Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckvqb62cp0008rify67a3fxdg","content":"","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""}],"Post":[{"title":"Ant Design Vue中Table组件行内右键菜单实现方法","date":"2021-08-04T11:00:00.000Z","cover":"https://img.showydream.com/img/nvpJTu-ant-design-vue.jpeg","description":"Ant Design Vue中Table组件行内右键菜单实现方法","keywords":"vue,Ant Design","_content":"\n思路就是把右键菜单放到一个全局隐藏的地方，监听`<a-table>`的行的响应事件，动态控制右键菜单的位置和展示。\n\n```vue\n<template>\n\t<main>\n  \t<a-table \n      :columns=\"columns\"\n      :data-source=\"tableData\"\n      :custom-row=\"customRow\"\n    />\n    <a-menu\n      v-if=\"menuVisible\"\n      :style=\"menuStyle\"\n    >\n      <a-menu-item>查看</a-menu-item>\n      <a-menu-item>删除</a-menu-item>\n    </a-menu>\n  </main>\n</template>\n\n<script>\n  export default {\n    data(){\n      return{\n        columns:[],\n        tableData:[]\n      }\n    },\n    methods:{\n      customRow(record, index) {\n      \treturn {\n        \ton: {\n          \tcontextmenu: e => {\n            \te.preventDefault()\n            \tthis.menuData = record\n            \tthis.menuVisible = true\n            \tthis.menuStyle.top = e.clientY + \"px\"\n            \tthis.menuStyle.left = e.clientX + \"px\"\n            \tdocument.body.addEventListener(\"click\", this.cancelClick)\n          \t}\n        \t}\n      \t}\n    \t},\n    \tcancelClick () {\n      \tthis.menuVisible = false\n      \tdocument.body.removeEventListener(\"click\", this.cancelClick)\n    \t}\n    }\n  }\n</script>\n```\n\n\n\n效果如下\n\n<img src=\"https://img.showydream.com/img/s5IzVh-image-20210804192925157.png\" alt=\"image-20210804192925157\" style=\"zoom:50%;\" />\n\n","source":"_posts/Ant Design Vue中Table组件行内右键菜单实现方法.md","raw":"---\ntitle: Ant Design Vue中Table组件行内右键菜单实现方法\ndate: 2021-08-04 19:00:00\ncover: https://img.showydream.com/img/nvpJTu-ant-design-vue.jpeg\ndescription: Ant Design Vue中Table组件行内右键菜单实现方法\nkeywords: vue,Ant Design\ntags: Vue技巧\ncategories: \n - Vue\n---\n\n思路就是把右键菜单放到一个全局隐藏的地方，监听`<a-table>`的行的响应事件，动态控制右键菜单的位置和展示。\n\n```vue\n<template>\n\t<main>\n  \t<a-table \n      :columns=\"columns\"\n      :data-source=\"tableData\"\n      :custom-row=\"customRow\"\n    />\n    <a-menu\n      v-if=\"menuVisible\"\n      :style=\"menuStyle\"\n    >\n      <a-menu-item>查看</a-menu-item>\n      <a-menu-item>删除</a-menu-item>\n    </a-menu>\n  </main>\n</template>\n\n<script>\n  export default {\n    data(){\n      return{\n        columns:[],\n        tableData:[]\n      }\n    },\n    methods:{\n      customRow(record, index) {\n      \treturn {\n        \ton: {\n          \tcontextmenu: e => {\n            \te.preventDefault()\n            \tthis.menuData = record\n            \tthis.menuVisible = true\n            \tthis.menuStyle.top = e.clientY + \"px\"\n            \tthis.menuStyle.left = e.clientX + \"px\"\n            \tdocument.body.addEventListener(\"click\", this.cancelClick)\n          \t}\n        \t}\n      \t}\n    \t},\n    \tcancelClick () {\n      \tthis.menuVisible = false\n      \tdocument.body.removeEventListener(\"click\", this.cancelClick)\n    \t}\n    }\n  }\n</script>\n```\n\n\n\n效果如下\n\n<img src=\"https://img.showydream.com/img/s5IzVh-image-20210804192925157.png\" alt=\"image-20210804192925157\" style=\"zoom:50%;\" />\n\n","slug":"Ant Design Vue中Table组件行内右键菜单实现方法","published":1,"updated":"2021-11-08T06:30:50.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62ch0001rify7zwnbuev","content":"<p>思路就是把右键菜单放到一个全局隐藏的地方，监听<code>&lt;a-table&gt;</code>的行的响应事件，动态控制右键菜单的位置和展示。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;main&gt;</span><br><span class=\"line\">  \t&lt;a-table </span><br><span class=\"line\">      :columns=&quot;columns&quot;</span><br><span class=\"line\">      :data-source=&quot;tableData&quot;</span><br><span class=\"line\">      :custom-row=&quot;customRow&quot;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">    &lt;a-menu</span><br><span class=\"line\">      v-if=&quot;menuVisible&quot;</span><br><span class=\"line\">      :style=&quot;menuStyle&quot;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">      &lt;a-menu-item&gt;查看&lt;/a-menu-item&gt;</span><br><span class=\"line\">      &lt;a-menu-item&gt;删除&lt;/a-menu-item&gt;</span><br><span class=\"line\">    &lt;/a-menu&gt;</span><br><span class=\"line\">  &lt;/main&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">      return&#123;</span><br><span class=\"line\">        columns:[],</span><br><span class=\"line\">        tableData:[]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">      customRow(record, index) &#123;</span><br><span class=\"line\">      \treturn &#123;</span><br><span class=\"line\">        \ton: &#123;</span><br><span class=\"line\">          \tcontextmenu: e =&gt; &#123;</span><br><span class=\"line\">            \te.preventDefault()</span><br><span class=\"line\">            \tthis.menuData = record</span><br><span class=\"line\">            \tthis.menuVisible = true</span><br><span class=\"line\">            \tthis.menuStyle.top = e.clientY + &quot;px&quot;</span><br><span class=\"line\">            \tthis.menuStyle.left = e.clientX + &quot;px&quot;</span><br><span class=\"line\">            \tdocument.body.addEventListener(&quot;click&quot;, this.cancelClick)</span><br><span class=\"line\">          \t&#125;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">      \t&#125;</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    \tcancelClick () &#123;</span><br><span class=\"line\">      \tthis.menuVisible = false</span><br><span class=\"line\">      \tdocument.body.removeEventListener(&quot;click&quot;, this.cancelClick)</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>效果如下</p>\n<img src=\"https://img.showydream.com/img/s5IzVh-image-20210804192925157.png\" alt=\"image-20210804192925157\" style=\"zoom:50%;\" />\n\n","site":{"data":{}},"excerpt":"","more":"<p>思路就是把右键菜单放到一个全局隐藏的地方，监听<code>&lt;a-table&gt;</code>的行的响应事件，动态控制右键菜单的位置和展示。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;main&gt;</span><br><span class=\"line\">  \t&lt;a-table </span><br><span class=\"line\">      :columns=&quot;columns&quot;</span><br><span class=\"line\">      :data-source=&quot;tableData&quot;</span><br><span class=\"line\">      :custom-row=&quot;customRow&quot;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">    &lt;a-menu</span><br><span class=\"line\">      v-if=&quot;menuVisible&quot;</span><br><span class=\"line\">      :style=&quot;menuStyle&quot;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">      &lt;a-menu-item&gt;查看&lt;/a-menu-item&gt;</span><br><span class=\"line\">      &lt;a-menu-item&gt;删除&lt;/a-menu-item&gt;</span><br><span class=\"line\">    &lt;/a-menu&gt;</span><br><span class=\"line\">  &lt;/main&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">      return&#123;</span><br><span class=\"line\">        columns:[],</span><br><span class=\"line\">        tableData:[]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">      customRow(record, index) &#123;</span><br><span class=\"line\">      \treturn &#123;</span><br><span class=\"line\">        \ton: &#123;</span><br><span class=\"line\">          \tcontextmenu: e =&gt; &#123;</span><br><span class=\"line\">            \te.preventDefault()</span><br><span class=\"line\">            \tthis.menuData = record</span><br><span class=\"line\">            \tthis.menuVisible = true</span><br><span class=\"line\">            \tthis.menuStyle.top = e.clientY + &quot;px&quot;</span><br><span class=\"line\">            \tthis.menuStyle.left = e.clientX + &quot;px&quot;</span><br><span class=\"line\">            \tdocument.body.addEventListener(&quot;click&quot;, this.cancelClick)</span><br><span class=\"line\">          \t&#125;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">      \t&#125;</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    \tcancelClick () &#123;</span><br><span class=\"line\">      \tthis.menuVisible = false</span><br><span class=\"line\">      \tdocument.body.removeEventListener(&quot;click&quot;, this.cancelClick)</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>效果如下</p>\n<img src=\"https://img.showydream.com/img/s5IzVh-image-20210804192925157.png\" alt=\"image-20210804192925157\" style=\"zoom:50%;\" />\n\n"},{"title":"CSS笔记","date":"2019-12-06T04:00:00.000Z","cover":"https://img.showydream.com/img/iZX9MU-picography-food-platters-beach-restaurant-small-768x512.jpg","description":"CSS笔记","keywords":"CSS","_content":"\n\n\n## CSS盒模型\n\n当对一个文档进行布局的时候，浏览器的渲染引擎会根据标准之一的CSS基础框盒模型，将所有的元素表示为一个个矩形的盒子。CSS决定这些盒子的大小、位置以及属性（例如颜色，背景，边框尺寸等）。\n\n每个盒子由四个部分（或称区域）组成，其效用由它们各自的边界（Edge）所定义：\n\n​\tContent 、Padding、Border、Margin\n\n<!--more-->\n\n## CSS术语和概念\n\n### 长度单位:\n\nCSS中的长度单位有时间单位（如s，ms），还有角度单位（如deg，rad等），但是最常见的自然还是长度单位（如px，em等）。需要注意的是，诸如2%后面的百分号%不是长度单位，因为2%就是一个完整的值，就是一个整体，就像0.02是一个值那样，2%也是一个值。\n\n```\n<number> + 长度单位 = <length>\n```\n\n如果细分，长度单位又可以分为相对长度单位和绝对长度单位。\n\n1. 相对长度单位。相对长度又分为相对字体长度单位和相对视区长度单位。\n   - 相对字体长度单位，如em，ex，还有CSS3的rem和ch（字符0的宽度）\n   - 相对视区长度单位，如vh、vw、vmin和vmax。\n2. 绝对长度单位：最常见的就是px，还有pt、cm、mm、pc等了解一下就可以了\n\n### 选择器\n\n选择器是瞄准目标元素的东西。\n\n- 类选择器：指以\".\"开头的选择器。很多元素可以应用同一个类选择器。\n- ID选择器：以“#”开头，权重很高。ID一般指向唯一元素。但是在CSS中，ID央视出现在多个不同的元素上并不会只渲染第一个，而是雨露均沾。但是显然不推荐这么做。\n- 属性选择器：指含有`[]`的选择器，形如[title]:{}、[title=\"css-world\"]等\n- 伪类选择器：一般指前面有个英文冒号\":\"的选择器，如:first-child或:last-child等\n- 伪元素选择器：就是有两个连续冒号的选择器，如::first-line、::first-latter、::before、::after\n\n### 伪类选择器\n\nhover前加空格，本身不会有:hover的效果，而后代元素会有:hover的效果\n\n### 关系选择器\n\n关系选择器是指根据与其他元素的关系选择元素的选择器，常见的符号有空格、>、~，还有+等，这些都是非常常用的选择器。\n\n- 后代选择器：选择所有合乎规则的后代元素。空格连接。\n- 相邻后代选择器：仅仅选择合乎规则的儿子元素，孙子、重孙元素忽略，因此又称“子选择器”。>连接。适用于IE7以上版本。\n- 兄弟选择器：选择当前元素后面的所有合乎规则的兄弟元素。~连接。适用于IE7以上版本。\n- 相邻兄弟选择器：仅仅选择当前元素相邻的那个合乎规则的兄弟元素。+连接。适用于IE7以上版本。\n\n## 流、元素与基本尺寸\n\nHTML常见的标签有`<div/>`、`<p/>`、`<li/>`和`<table/>`以及`<span/>`、`<img/>`、和`<em/>`等。虽然标签种类繁多，但通常我们就把它们分为两类：块级元素（block-level element）和内联元素（inline element）。\n\n### 块级元素\n\n“块级元素”对应的英文是block-level element，常见的块级元素有`<div>`、`<li>`和`<table>`等。需要注意是，“块级元素”和“display为block的元素”不是一个概念。例如，`<li>`元素默认的display值是list-item，`<table>`元素默认的display值是table，但是它们均是“块级元素”，因为它们都符合块级元素的基本特征，也就是一个水平流上只能单独显示一个元素，多个块级元素则换行显示。\n\n每个元素都有两个盒子，外在盒子和容器盒子，外在盒子控制元素是可以一行显示还是只能换行显示，内联盒子控制宽高、内容呈现等。\n\n按照display属性值的不同，值为block的元素的盒子实际由外在的“块级盒子”和内在的“块级容器盒子”组成，值为inline-block的元素则由外在的“内联盒子”和内在的“块级容器盒子”组成。\n\ndisplay属性值是inline-block的元素既能和图文一行显示，又能直接设置width/height了吧！因为有两个盒子，外面的盒子是inline级别，里面的盒子是block级别。实际上，如果遵循这种理解，display:block应该脑补成display:block-block，display:table应该脑补成display:block-table，我们平时的写法实际上是一种简写。\n\n### 内联元素\n\n”内联级元素“在这里简称内联元素。流体布局的本质就是inline和block。从作用上来讲，块级负责结构，内联负责内容。所谓图文，指图片和文字，是最典型的内联元素。\n\n### 哪些元素是内联元素\n\n#### 从定义看\n\n首先要明白这一点：“内联元素”的“内联”特指“外在盒子”，和“display为inline的元素”不是一个概念\n\ninline-block和inline-table都是“内联元素”，因为它们的“外在盒子”都是内联盒子。那么，`<button>`按钮元素是内联元素，因为其display默认值是inline-block；`<img>`图片元素也是内联元素，因为其display默认值是inline等。\n\n#### 从表现看\n\n就行为表现来看，“内联元素”的典型特征就是可以和文字在一行显示。因此，文字是内联元素，图片是内联元素，按钮是内联元素，输入框、下拉框等原生表单控件也是内联元素。\n\n下面有一个疑问：浮动元素貌似也是可以和文字在一个水平上显示的，是不是浮动元素也是内联级别的呢？不是的。实际上，浮动元素和后面的文字并不在一行显示，浮动元素已经在文档流之外了。证据就是，当后面文字足够多的时候，文字并不是在浮动元素的下面，而是继续在后面。这就说明，浮动元素和后面文字不在一行，只是它们恰好站在了一起而已。真相是，浮动元素会生成“块盒子”，这就是后话了。\n\n## CSS定位\n\n笔记来源：[CSS定位详解](https://www.ruanyifeng.com/blog/2019/11/css-position.html)\n\n### 一、postion属性的作用\n\npostion属性用来指定一个元素在网页上的位置，一共有5种定位方式：\n\n- static\n- relative\n- fixed\n- absolute\n- sticky  (2017年浏览器才支持)\n\n### 二、static属性值\n\nstatic是postion的默认值。这时浏览器会按照源码的顺序决定每个元素的位置，这时 top、bottom、left、right这四个属性无效。\n\n### 三、relative，absolute、fixed\n\nrelative、absolute、fixed这三个属性值有一个共同点，都是相对于某个基点的定位，不同之处仅仅在于基点不同。这三种定位都不会影响其他元素的位置，因此元素之间可能会产生重叠。\n\n#### 3.1 relative属性值\n\nrelative表示，相对于默认位置（即static时的位置）进行偏移，即定位基点是元素的默认位置。\n\n它必须搭配top、bottom、left、right这四个属性一起使用，用来指定偏移的方向和距离\n\n```css\ndiv{\n\tpostion: relative;\n\ttop: 20px;\n}\n```\n\n#### 3.2 absolute属性\n\nabsolute表示，相对于上级元素（一般是父元素）进行偏移，即定位基点是父元素。\n\n它有一个重要的限制条件：父元素的postion不能是static（默认）定位，否则定位基点就会变成整个网页的根元素html。另外，absolute定位也必须搭配top、bottom、left、right这四个属性一起使用。\n\n```html\n<div id=\"father\">\n\t<div id=\"son\"></div>\n</div>\n#father{\n\tpostion: relative;\n}\n#son{\n\tpostion: absolute;\n\ttop: 20px;\n}\n```\n\n注意： absolute定位的元素会被“正常的页面流”忽略，即在“正常的页面流”里，该元素所占的空间为0，周边元素不受影响。\n\n#### 3.3 fixed属性\n\nfixed表示，相对于浏览器窗口进行偏移，即定位基点是浏览器窗口。这会导致元素的位置不随页面滚动而变化，好像固定在网页上一样。\n\n 它如果搭配`top`、`bottom`、`left`、`right`这四个属性一起使用，表示元素的初始位置是基于视口计算的，否则初始位置就是元素的默认位置。\n\n```css\ndiv{\n\tpostion: fixed;\n\ttop: 0;\n}\n```\n\n 上面代码中，`div`元素始终在视口顶部，不随网页滚动而变化。\n\n### 四、sticky属性值\n\n`sticky`跟前面四个属性值都不一样，它会产生动态效果，很像`relative`和`fixed`的结合：一些时候是`relative`定位（定位基点是自身默认位置），另一些时候自动变成`fixed`定位（定位基点是视口）。\n\n 因此，它能够形成\"动态固定\"的效果。比如，网页的搜索工具栏，初始加载时在自己的默认位置（`relative`定位）。\n\n 页面向下滚动时，工具栏变成固定位置，始终停留在页面头部（`fixed`定位），等到页面重新向上滚动回到原位，工具栏也会回到默认位置。\n\n`sticky`生效的前提是，必须搭配`top`、`bottom`、`left`、`right`这四个属性一起使用，不能省略，否则等同于`relative`定位，不产生\"动态固定\"的效果。原因是这四个属性用来定义\"偏移距离\"，浏览器把它当作`sticky`的生效门槛。\n\n它的具体规则是，当页面滚动，父元素开始脱离视口时（即部分不可见），只要与`sticky`元素的距离达到生效门槛，`relative`定位自动切换为`fixed`定位；等到父元素完全脱离视口时（即完全不可见），`fixed`定位自动切换回`relative`定位。\n\n请看下面的示例代码。（注意，除了已被淘汰的 IE 以外，其他浏览器目前都支持`sticky`。但是，Safari 浏览器需要加上浏览器前缀`-webkit-`。）\n\n```css\n#toolbar {\n  position: -webkit-sticky; /* safari 浏览器 */\n  position: sticky; /* 其他浏览器 */\n  top: 20px;\n}\n```\n\n上面代码中，页面向下滚动时，`#toolbar`的父元素开始脱离视口，一旦视口的顶部与`#toolbar`的距离小于`20px`（门槛值），`#toolbar`就自动变为`fixed`定位，保持与视口顶部`20px`的距离。页面继续向下滚动，父元素彻底离开视口（即整个父元素完全不可见），`#toolbar`恢复成`relative`定位。特性表现：\n\n1. 父级元素不能有任何`overflow:visible`以外的overflow设置，否则没有粘滞效果。因为改变了滚动容器（即使没有出现滚动条）。因此，如果你的`position:sticky`无效，看看是不是某一个祖先元素设置了`overflow:hidden`，移除之即可。\n2. `2019-05-22新增`\n   父级元素设置和粘性定位元素等高的固定的`height`高度值，或者高度计算值和粘性定位元素高度一样，也没有粘滞效果。我专门写了篇文章深入讲解了粘性效果无效的原因，可以[点击这里查看](https://www.zhangxinxu.com/wordpress/2020/03/position-sticky-rules/)。\n3. 同一个父容器中的sticky元素，如果定位值相等，则会重叠；如果属于不同父元素，且这些父元素正好紧密相连，则会鸠占鹊巢，挤开原来的元素，形成依次占位的效果。至于原因需要理解粘性定位的计算规则，同样[点击这里查看](https://www.zhangxinxu.com/wordpress/2020/03/position-sticky-rules/)。\n4. sticky定位，不仅可以设置`top`，基于滚动容器上边缘定位；还可以设置`bottom`，也就是相对底部粘滞。如果是水平滚动，也可以设置`left`和`right`值。\n\n\n\n","source":"_posts/CSS笔记.md","raw":"---\ntitle: CSS笔记\ndate: 2019-12-06 12:00:00\ncover: https://img.showydream.com/img/iZX9MU-picography-food-platters-beach-restaurant-small-768x512.jpg\ndescription: CSS笔记\nkeywords: CSS\ntags: 面经\ncategories:\n  - CSS\n---\n\n\n\n## CSS盒模型\n\n当对一个文档进行布局的时候，浏览器的渲染引擎会根据标准之一的CSS基础框盒模型，将所有的元素表示为一个个矩形的盒子。CSS决定这些盒子的大小、位置以及属性（例如颜色，背景，边框尺寸等）。\n\n每个盒子由四个部分（或称区域）组成，其效用由它们各自的边界（Edge）所定义：\n\n​\tContent 、Padding、Border、Margin\n\n<!--more-->\n\n## CSS术语和概念\n\n### 长度单位:\n\nCSS中的长度单位有时间单位（如s，ms），还有角度单位（如deg，rad等），但是最常见的自然还是长度单位（如px，em等）。需要注意的是，诸如2%后面的百分号%不是长度单位，因为2%就是一个完整的值，就是一个整体，就像0.02是一个值那样，2%也是一个值。\n\n```\n<number> + 长度单位 = <length>\n```\n\n如果细分，长度单位又可以分为相对长度单位和绝对长度单位。\n\n1. 相对长度单位。相对长度又分为相对字体长度单位和相对视区长度单位。\n   - 相对字体长度单位，如em，ex，还有CSS3的rem和ch（字符0的宽度）\n   - 相对视区长度单位，如vh、vw、vmin和vmax。\n2. 绝对长度单位：最常见的就是px，还有pt、cm、mm、pc等了解一下就可以了\n\n### 选择器\n\n选择器是瞄准目标元素的东西。\n\n- 类选择器：指以\".\"开头的选择器。很多元素可以应用同一个类选择器。\n- ID选择器：以“#”开头，权重很高。ID一般指向唯一元素。但是在CSS中，ID央视出现在多个不同的元素上并不会只渲染第一个，而是雨露均沾。但是显然不推荐这么做。\n- 属性选择器：指含有`[]`的选择器，形如[title]:{}、[title=\"css-world\"]等\n- 伪类选择器：一般指前面有个英文冒号\":\"的选择器，如:first-child或:last-child等\n- 伪元素选择器：就是有两个连续冒号的选择器，如::first-line、::first-latter、::before、::after\n\n### 伪类选择器\n\nhover前加空格，本身不会有:hover的效果，而后代元素会有:hover的效果\n\n### 关系选择器\n\n关系选择器是指根据与其他元素的关系选择元素的选择器，常见的符号有空格、>、~，还有+等，这些都是非常常用的选择器。\n\n- 后代选择器：选择所有合乎规则的后代元素。空格连接。\n- 相邻后代选择器：仅仅选择合乎规则的儿子元素，孙子、重孙元素忽略，因此又称“子选择器”。>连接。适用于IE7以上版本。\n- 兄弟选择器：选择当前元素后面的所有合乎规则的兄弟元素。~连接。适用于IE7以上版本。\n- 相邻兄弟选择器：仅仅选择当前元素相邻的那个合乎规则的兄弟元素。+连接。适用于IE7以上版本。\n\n## 流、元素与基本尺寸\n\nHTML常见的标签有`<div/>`、`<p/>`、`<li/>`和`<table/>`以及`<span/>`、`<img/>`、和`<em/>`等。虽然标签种类繁多，但通常我们就把它们分为两类：块级元素（block-level element）和内联元素（inline element）。\n\n### 块级元素\n\n“块级元素”对应的英文是block-level element，常见的块级元素有`<div>`、`<li>`和`<table>`等。需要注意是，“块级元素”和“display为block的元素”不是一个概念。例如，`<li>`元素默认的display值是list-item，`<table>`元素默认的display值是table，但是它们均是“块级元素”，因为它们都符合块级元素的基本特征，也就是一个水平流上只能单独显示一个元素，多个块级元素则换行显示。\n\n每个元素都有两个盒子，外在盒子和容器盒子，外在盒子控制元素是可以一行显示还是只能换行显示，内联盒子控制宽高、内容呈现等。\n\n按照display属性值的不同，值为block的元素的盒子实际由外在的“块级盒子”和内在的“块级容器盒子”组成，值为inline-block的元素则由外在的“内联盒子”和内在的“块级容器盒子”组成。\n\ndisplay属性值是inline-block的元素既能和图文一行显示，又能直接设置width/height了吧！因为有两个盒子，外面的盒子是inline级别，里面的盒子是block级别。实际上，如果遵循这种理解，display:block应该脑补成display:block-block，display:table应该脑补成display:block-table，我们平时的写法实际上是一种简写。\n\n### 内联元素\n\n”内联级元素“在这里简称内联元素。流体布局的本质就是inline和block。从作用上来讲，块级负责结构，内联负责内容。所谓图文，指图片和文字，是最典型的内联元素。\n\n### 哪些元素是内联元素\n\n#### 从定义看\n\n首先要明白这一点：“内联元素”的“内联”特指“外在盒子”，和“display为inline的元素”不是一个概念\n\ninline-block和inline-table都是“内联元素”，因为它们的“外在盒子”都是内联盒子。那么，`<button>`按钮元素是内联元素，因为其display默认值是inline-block；`<img>`图片元素也是内联元素，因为其display默认值是inline等。\n\n#### 从表现看\n\n就行为表现来看，“内联元素”的典型特征就是可以和文字在一行显示。因此，文字是内联元素，图片是内联元素，按钮是内联元素，输入框、下拉框等原生表单控件也是内联元素。\n\n下面有一个疑问：浮动元素貌似也是可以和文字在一个水平上显示的，是不是浮动元素也是内联级别的呢？不是的。实际上，浮动元素和后面的文字并不在一行显示，浮动元素已经在文档流之外了。证据就是，当后面文字足够多的时候，文字并不是在浮动元素的下面，而是继续在后面。这就说明，浮动元素和后面文字不在一行，只是它们恰好站在了一起而已。真相是，浮动元素会生成“块盒子”，这就是后话了。\n\n## CSS定位\n\n笔记来源：[CSS定位详解](https://www.ruanyifeng.com/blog/2019/11/css-position.html)\n\n### 一、postion属性的作用\n\npostion属性用来指定一个元素在网页上的位置，一共有5种定位方式：\n\n- static\n- relative\n- fixed\n- absolute\n- sticky  (2017年浏览器才支持)\n\n### 二、static属性值\n\nstatic是postion的默认值。这时浏览器会按照源码的顺序决定每个元素的位置，这时 top、bottom、left、right这四个属性无效。\n\n### 三、relative，absolute、fixed\n\nrelative、absolute、fixed这三个属性值有一个共同点，都是相对于某个基点的定位，不同之处仅仅在于基点不同。这三种定位都不会影响其他元素的位置，因此元素之间可能会产生重叠。\n\n#### 3.1 relative属性值\n\nrelative表示，相对于默认位置（即static时的位置）进行偏移，即定位基点是元素的默认位置。\n\n它必须搭配top、bottom、left、right这四个属性一起使用，用来指定偏移的方向和距离\n\n```css\ndiv{\n\tpostion: relative;\n\ttop: 20px;\n}\n```\n\n#### 3.2 absolute属性\n\nabsolute表示，相对于上级元素（一般是父元素）进行偏移，即定位基点是父元素。\n\n它有一个重要的限制条件：父元素的postion不能是static（默认）定位，否则定位基点就会变成整个网页的根元素html。另外，absolute定位也必须搭配top、bottom、left、right这四个属性一起使用。\n\n```html\n<div id=\"father\">\n\t<div id=\"son\"></div>\n</div>\n#father{\n\tpostion: relative;\n}\n#son{\n\tpostion: absolute;\n\ttop: 20px;\n}\n```\n\n注意： absolute定位的元素会被“正常的页面流”忽略，即在“正常的页面流”里，该元素所占的空间为0，周边元素不受影响。\n\n#### 3.3 fixed属性\n\nfixed表示，相对于浏览器窗口进行偏移，即定位基点是浏览器窗口。这会导致元素的位置不随页面滚动而变化，好像固定在网页上一样。\n\n 它如果搭配`top`、`bottom`、`left`、`right`这四个属性一起使用，表示元素的初始位置是基于视口计算的，否则初始位置就是元素的默认位置。\n\n```css\ndiv{\n\tpostion: fixed;\n\ttop: 0;\n}\n```\n\n 上面代码中，`div`元素始终在视口顶部，不随网页滚动而变化。\n\n### 四、sticky属性值\n\n`sticky`跟前面四个属性值都不一样，它会产生动态效果，很像`relative`和`fixed`的结合：一些时候是`relative`定位（定位基点是自身默认位置），另一些时候自动变成`fixed`定位（定位基点是视口）。\n\n 因此，它能够形成\"动态固定\"的效果。比如，网页的搜索工具栏，初始加载时在自己的默认位置（`relative`定位）。\n\n 页面向下滚动时，工具栏变成固定位置，始终停留在页面头部（`fixed`定位），等到页面重新向上滚动回到原位，工具栏也会回到默认位置。\n\n`sticky`生效的前提是，必须搭配`top`、`bottom`、`left`、`right`这四个属性一起使用，不能省略，否则等同于`relative`定位，不产生\"动态固定\"的效果。原因是这四个属性用来定义\"偏移距离\"，浏览器把它当作`sticky`的生效门槛。\n\n它的具体规则是，当页面滚动，父元素开始脱离视口时（即部分不可见），只要与`sticky`元素的距离达到生效门槛，`relative`定位自动切换为`fixed`定位；等到父元素完全脱离视口时（即完全不可见），`fixed`定位自动切换回`relative`定位。\n\n请看下面的示例代码。（注意，除了已被淘汰的 IE 以外，其他浏览器目前都支持`sticky`。但是，Safari 浏览器需要加上浏览器前缀`-webkit-`。）\n\n```css\n#toolbar {\n  position: -webkit-sticky; /* safari 浏览器 */\n  position: sticky; /* 其他浏览器 */\n  top: 20px;\n}\n```\n\n上面代码中，页面向下滚动时，`#toolbar`的父元素开始脱离视口，一旦视口的顶部与`#toolbar`的距离小于`20px`（门槛值），`#toolbar`就自动变为`fixed`定位，保持与视口顶部`20px`的距离。页面继续向下滚动，父元素彻底离开视口（即整个父元素完全不可见），`#toolbar`恢复成`relative`定位。特性表现：\n\n1. 父级元素不能有任何`overflow:visible`以外的overflow设置，否则没有粘滞效果。因为改变了滚动容器（即使没有出现滚动条）。因此，如果你的`position:sticky`无效，看看是不是某一个祖先元素设置了`overflow:hidden`，移除之即可。\n2. `2019-05-22新增`\n   父级元素设置和粘性定位元素等高的固定的`height`高度值，或者高度计算值和粘性定位元素高度一样，也没有粘滞效果。我专门写了篇文章深入讲解了粘性效果无效的原因，可以[点击这里查看](https://www.zhangxinxu.com/wordpress/2020/03/position-sticky-rules/)。\n3. 同一个父容器中的sticky元素，如果定位值相等，则会重叠；如果属于不同父元素，且这些父元素正好紧密相连，则会鸠占鹊巢，挤开原来的元素，形成依次占位的效果。至于原因需要理解粘性定位的计算规则，同样[点击这里查看](https://www.zhangxinxu.com/wordpress/2020/03/position-sticky-rules/)。\n4. sticky定位，不仅可以设置`top`，基于滚动容器上边缘定位；还可以设置`bottom`，也就是相对底部粘滞。如果是水平滚动，也可以设置`left`和`right`值。\n\n\n\n","slug":"CSS笔记","published":1,"updated":"2021-11-08T06:30:56.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62cl0003rifyfzg15g48","content":"<h2 id=\"CSS盒模型\"><a href=\"#CSS盒模型\" class=\"headerlink\" title=\"CSS盒模型\"></a>CSS盒模型</h2><p>当对一个文档进行布局的时候，浏览器的渲染引擎会根据标准之一的CSS基础框盒模型，将所有的元素表示为一个个矩形的盒子。CSS决定这些盒子的大小、位置以及属性（例如颜色，背景，边框尺寸等）。</p>\n<p>每个盒子由四个部分（或称区域）组成，其效用由它们各自的边界（Edge）所定义：</p>\n<p>​    Content 、Padding、Border、Margin</p>\n<span id=\"more\"></span>\n\n<h2 id=\"CSS术语和概念\"><a href=\"#CSS术语和概念\" class=\"headerlink\" title=\"CSS术语和概念\"></a>CSS术语和概念</h2><h3 id=\"长度单位\"><a href=\"#长度单位\" class=\"headerlink\" title=\"长度单位:\"></a>长度单位:</h3><p>CSS中的长度单位有时间单位（如s，ms），还有角度单位（如deg，rad等），但是最常见的自然还是长度单位（如px，em等）。需要注意的是，诸如2%后面的百分号%不是长度单位，因为2%就是一个完整的值，就是一个整体，就像0.02是一个值那样，2%也是一个值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;number&gt; + 长度单位 = &lt;length&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果细分，长度单位又可以分为相对长度单位和绝对长度单位。</p>\n<ol>\n<li>相对长度单位。相对长度又分为相对字体长度单位和相对视区长度单位。<ul>\n<li>相对字体长度单位，如em，ex，还有CSS3的rem和ch（字符0的宽度）</li>\n<li>相对视区长度单位，如vh、vw、vmin和vmax。</li>\n</ul>\n</li>\n<li>绝对长度单位：最常见的就是px，还有pt、cm、mm、pc等了解一下就可以了</li>\n</ol>\n<h3 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h3><p>选择器是瞄准目标元素的东西。</p>\n<ul>\n<li>类选择器：指以”.”开头的选择器。很多元素可以应用同一个类选择器。</li>\n<li>ID选择器：以“#”开头，权重很高。ID一般指向唯一元素。但是在CSS中，ID央视出现在多个不同的元素上并不会只渲染第一个，而是雨露均沾。但是显然不推荐这么做。</li>\n<li>属性选择器：指含有<code>[]</code>的选择器，形如[title]:{}、[title=”css-world”]等</li>\n<li>伪类选择器：一般指前面有个英文冒号”:”的选择器，如:first-child或:last-child等</li>\n<li>伪元素选择器：就是有两个连续冒号的选择器，如::first-line、::first-latter、::before、::after</li>\n</ul>\n<h3 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h3><p>hover前加空格，本身不会有:hover的效果，而后代元素会有:hover的效果</p>\n<h3 id=\"关系选择器\"><a href=\"#关系选择器\" class=\"headerlink\" title=\"关系选择器\"></a>关系选择器</h3><p>关系选择器是指根据与其他元素的关系选择元素的选择器，常见的符号有空格、&gt;、~，还有+等，这些都是非常常用的选择器。</p>\n<ul>\n<li>后代选择器：选择所有合乎规则的后代元素。空格连接。</li>\n<li>相邻后代选择器：仅仅选择合乎规则的儿子元素，孙子、重孙元素忽略，因此又称“子选择器”。&gt;连接。适用于IE7以上版本。</li>\n<li>兄弟选择器：选择当前元素后面的所有合乎规则的兄弟元素。~连接。适用于IE7以上版本。</li>\n<li>相邻兄弟选择器：仅仅选择当前元素相邻的那个合乎规则的兄弟元素。+连接。适用于IE7以上版本。</li>\n</ul>\n<h2 id=\"流、元素与基本尺寸\"><a href=\"#流、元素与基本尺寸\" class=\"headerlink\" title=\"流、元素与基本尺寸\"></a>流、元素与基本尺寸</h2><p>HTML常见的标签有<code>&lt;div/&gt;</code>、<code>&lt;p/&gt;</code>、<code>&lt;li/&gt;</code>和<code>&lt;table/&gt;</code>以及<code>&lt;span/&gt;</code>、<code>&lt;img/&gt;</code>、和<code>&lt;em/&gt;</code>等。虽然标签种类繁多，但通常我们就把它们分为两类：块级元素（block-level element）和内联元素（inline element）。</p>\n<h3 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h3><p>“块级元素”对应的英文是block-level element，常见的块级元素有<code>&lt;div&gt;</code>、<code>&lt;li&gt;</code>和<code>&lt;table&gt;</code>等。需要注意是，“块级元素”和“display为block的元素”不是一个概念。例如，<code>&lt;li&gt;</code>元素默认的display值是list-item，<code>&lt;table&gt;</code>元素默认的display值是table，但是它们均是“块级元素”，因为它们都符合块级元素的基本特征，也就是一个水平流上只能单独显示一个元素，多个块级元素则换行显示。</p>\n<p>每个元素都有两个盒子，外在盒子和容器盒子，外在盒子控制元素是可以一行显示还是只能换行显示，内联盒子控制宽高、内容呈现等。</p>\n<p>按照display属性值的不同，值为block的元素的盒子实际由外在的“块级盒子”和内在的“块级容器盒子”组成，值为inline-block的元素则由外在的“内联盒子”和内在的“块级容器盒子”组成。</p>\n<p>display属性值是inline-block的元素既能和图文一行显示，又能直接设置width/height了吧！因为有两个盒子，外面的盒子是inline级别，里面的盒子是block级别。实际上，如果遵循这种理解，display:block应该脑补成display:block-block，display:table应该脑补成display:block-table，我们平时的写法实际上是一种简写。</p>\n<h3 id=\"内联元素\"><a href=\"#内联元素\" class=\"headerlink\" title=\"内联元素\"></a>内联元素</h3><p>”内联级元素“在这里简称内联元素。流体布局的本质就是inline和block。从作用上来讲，块级负责结构，内联负责内容。所谓图文，指图片和文字，是最典型的内联元素。</p>\n<h3 id=\"哪些元素是内联元素\"><a href=\"#哪些元素是内联元素\" class=\"headerlink\" title=\"哪些元素是内联元素\"></a>哪些元素是内联元素</h3><h4 id=\"从定义看\"><a href=\"#从定义看\" class=\"headerlink\" title=\"从定义看\"></a>从定义看</h4><p>首先要明白这一点：“内联元素”的“内联”特指“外在盒子”，和“display为inline的元素”不是一个概念</p>\n<p>inline-block和inline-table都是“内联元素”，因为它们的“外在盒子”都是内联盒子。那么，<code>&lt;button&gt;</code>按钮元素是内联元素，因为其display默认值是inline-block；<code>&lt;img&gt;</code>图片元素也是内联元素，因为其display默认值是inline等。</p>\n<h4 id=\"从表现看\"><a href=\"#从表现看\" class=\"headerlink\" title=\"从表现看\"></a>从表现看</h4><p>就行为表现来看，“内联元素”的典型特征就是可以和文字在一行显示。因此，文字是内联元素，图片是内联元素，按钮是内联元素，输入框、下拉框等原生表单控件也是内联元素。</p>\n<p>下面有一个疑问：浮动元素貌似也是可以和文字在一个水平上显示的，是不是浮动元素也是内联级别的呢？不是的。实际上，浮动元素和后面的文字并不在一行显示，浮动元素已经在文档流之外了。证据就是，当后面文字足够多的时候，文字并不是在浮动元素的下面，而是继续在后面。这就说明，浮动元素和后面文字不在一行，只是它们恰好站在了一起而已。真相是，浮动元素会生成“块盒子”，这就是后话了。</p>\n<h2 id=\"CSS定位\"><a href=\"#CSS定位\" class=\"headerlink\" title=\"CSS定位\"></a>CSS定位</h2><p>笔记来源：<a href=\"https://www.ruanyifeng.com/blog/2019/11/css-position.html\">CSS定位详解</a></p>\n<h3 id=\"一、postion属性的作用\"><a href=\"#一、postion属性的作用\" class=\"headerlink\" title=\"一、postion属性的作用\"></a>一、postion属性的作用</h3><p>postion属性用来指定一个元素在网页上的位置，一共有5种定位方式：</p>\n<ul>\n<li>static</li>\n<li>relative</li>\n<li>fixed</li>\n<li>absolute</li>\n<li>sticky  (2017年浏览器才支持)</li>\n</ul>\n<h3 id=\"二、static属性值\"><a href=\"#二、static属性值\" class=\"headerlink\" title=\"二、static属性值\"></a>二、static属性值</h3><p>static是postion的默认值。这时浏览器会按照源码的顺序决定每个元素的位置，这时 top、bottom、left、right这四个属性无效。</p>\n<h3 id=\"三、relative，absolute、fixed\"><a href=\"#三、relative，absolute、fixed\" class=\"headerlink\" title=\"三、relative，absolute、fixed\"></a>三、relative，absolute、fixed</h3><p>relative、absolute、fixed这三个属性值有一个共同点，都是相对于某个基点的定位，不同之处仅仅在于基点不同。这三种定位都不会影响其他元素的位置，因此元素之间可能会产生重叠。</p>\n<h4 id=\"3-1-relative属性值\"><a href=\"#3-1-relative属性值\" class=\"headerlink\" title=\"3.1 relative属性值\"></a>3.1 relative属性值</h4><p>relative表示，相对于默认位置（即static时的位置）进行偏移，即定位基点是元素的默认位置。</p>\n<p>它必须搭配top、bottom、left、right这四个属性一起使用，用来指定偏移的方向和距离</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">\tpostion: relative;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-absolute属性\"><a href=\"#3-2-absolute属性\" class=\"headerlink\" title=\"3.2 absolute属性\"></a>3.2 absolute属性</h4><p>absolute表示，相对于上级元素（一般是父元素）进行偏移，即定位基点是父元素。</p>\n<p>它有一个重要的限制条件：父元素的postion不能是static（默认）定位，否则定位基点就会变成整个网页的根元素html。另外，absolute定位也必须搭配top、bottom、left、right这四个属性一起使用。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;father&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;son&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">#father&#123;</span><br><span class=\"line\">\tpostion: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">\tpostion: absolute;</span><br><span class=\"line\">\ttop: 20px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意： absolute定位的元素会被“正常的页面流”忽略，即在“正常的页面流”里，该元素所占的空间为0，周边元素不受影响。</p>\n<h4 id=\"3-3-fixed属性\"><a href=\"#3-3-fixed属性\" class=\"headerlink\" title=\"3.3 fixed属性\"></a>3.3 fixed属性</h4><p>fixed表示，相对于浏览器窗口进行偏移，即定位基点是浏览器窗口。这会导致元素的位置不随页面滚动而变化，好像固定在网页上一样。</p>\n<p> 它如果搭配<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>这四个属性一起使用，表示元素的初始位置是基于视口计算的，否则初始位置就是元素的默认位置。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">\tpostion: fixed;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 上面代码中，<code>div</code>元素始终在视口顶部，不随网页滚动而变化。</p>\n<h3 id=\"四、sticky属性值\"><a href=\"#四、sticky属性值\" class=\"headerlink\" title=\"四、sticky属性值\"></a>四、sticky属性值</h3><p><code>sticky</code>跟前面四个属性值都不一样，它会产生动态效果，很像<code>relative</code>和<code>fixed</code>的结合：一些时候是<code>relative</code>定位（定位基点是自身默认位置），另一些时候自动变成<code>fixed</code>定位（定位基点是视口）。</p>\n<p> 因此，它能够形成”动态固定”的效果。比如，网页的搜索工具栏，初始加载时在自己的默认位置（<code>relative</code>定位）。</p>\n<p> 页面向下滚动时，工具栏变成固定位置，始终停留在页面头部（<code>fixed</code>定位），等到页面重新向上滚动回到原位，工具栏也会回到默认位置。</p>\n<p><code>sticky</code>生效的前提是，必须搭配<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>这四个属性一起使用，不能省略，否则等同于<code>relative</code>定位，不产生”动态固定”的效果。原因是这四个属性用来定义”偏移距离”，浏览器把它当作<code>sticky</code>的生效门槛。</p>\n<p>它的具体规则是，当页面滚动，父元素开始脱离视口时（即部分不可见），只要与<code>sticky</code>元素的距离达到生效门槛，<code>relative</code>定位自动切换为<code>fixed</code>定位；等到父元素完全脱离视口时（即完全不可见），<code>fixed</code>定位自动切换回<code>relative</code>定位。</p>\n<p>请看下面的示例代码。（注意，除了已被淘汰的 IE 以外，其他浏览器目前都支持<code>sticky</code>。但是，Safari 浏览器需要加上浏览器前缀<code>-webkit-</code>。）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#toolbar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: -webkit-sticky; <span class=\"comment\">/* safari 浏览器 */</span></span><br><span class=\"line\">  <span class=\"attribute\">position</span>: sticky; <span class=\"comment\">/* 其他浏览器 */</span></span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，页面向下滚动时，<code>#toolbar</code>的父元素开始脱离视口，一旦视口的顶部与<code>#toolbar</code>的距离小于<code>20px</code>（门槛值），<code>#toolbar</code>就自动变为<code>fixed</code>定位，保持与视口顶部<code>20px</code>的距离。页面继续向下滚动，父元素彻底离开视口（即整个父元素完全不可见），<code>#toolbar</code>恢复成<code>relative</code>定位。特性表现：</p>\n<ol>\n<li>父级元素不能有任何<code>overflow:visible</code>以外的overflow设置，否则没有粘滞效果。因为改变了滚动容器（即使没有出现滚动条）。因此，如果你的<code>position:sticky</code>无效，看看是不是某一个祖先元素设置了<code>overflow:hidden</code>，移除之即可。</li>\n<li><code>2019-05-22新增</code><br>父级元素设置和粘性定位元素等高的固定的<code>height</code>高度值，或者高度计算值和粘性定位元素高度一样，也没有粘滞效果。我专门写了篇文章深入讲解了粘性效果无效的原因，可以<a href=\"https://www.zhangxinxu.com/wordpress/2020/03/position-sticky-rules/\">点击这里查看</a>。</li>\n<li>同一个父容器中的sticky元素，如果定位值相等，则会重叠；如果属于不同父元素，且这些父元素正好紧密相连，则会鸠占鹊巢，挤开原来的元素，形成依次占位的效果。至于原因需要理解粘性定位的计算规则，同样<a href=\"https://www.zhangxinxu.com/wordpress/2020/03/position-sticky-rules/\">点击这里查看</a>。</li>\n<li>sticky定位，不仅可以设置<code>top</code>，基于滚动容器上边缘定位；还可以设置<code>bottom</code>，也就是相对底部粘滞。如果是水平滚动，也可以设置<code>left</code>和<code>right</code>值。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"CSS盒模型\"><a href=\"#CSS盒模型\" class=\"headerlink\" title=\"CSS盒模型\"></a>CSS盒模型</h2><p>当对一个文档进行布局的时候，浏览器的渲染引擎会根据标准之一的CSS基础框盒模型，将所有的元素表示为一个个矩形的盒子。CSS决定这些盒子的大小、位置以及属性（例如颜色，背景，边框尺寸等）。</p>\n<p>每个盒子由四个部分（或称区域）组成，其效用由它们各自的边界（Edge）所定义：</p>\n<p>​    Content 、Padding、Border、Margin</p>","more":"<h2 id=\"CSS术语和概念\"><a href=\"#CSS术语和概念\" class=\"headerlink\" title=\"CSS术语和概念\"></a>CSS术语和概念</h2><h3 id=\"长度单位\"><a href=\"#长度单位\" class=\"headerlink\" title=\"长度单位:\"></a>长度单位:</h3><p>CSS中的长度单位有时间单位（如s，ms），还有角度单位（如deg，rad等），但是最常见的自然还是长度单位（如px，em等）。需要注意的是，诸如2%后面的百分号%不是长度单位，因为2%就是一个完整的值，就是一个整体，就像0.02是一个值那样，2%也是一个值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;number&gt; + 长度单位 = &lt;length&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果细分，长度单位又可以分为相对长度单位和绝对长度单位。</p>\n<ol>\n<li>相对长度单位。相对长度又分为相对字体长度单位和相对视区长度单位。<ul>\n<li>相对字体长度单位，如em，ex，还有CSS3的rem和ch（字符0的宽度）</li>\n<li>相对视区长度单位，如vh、vw、vmin和vmax。</li>\n</ul>\n</li>\n<li>绝对长度单位：最常见的就是px，还有pt、cm、mm、pc等了解一下就可以了</li>\n</ol>\n<h3 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h3><p>选择器是瞄准目标元素的东西。</p>\n<ul>\n<li>类选择器：指以”.”开头的选择器。很多元素可以应用同一个类选择器。</li>\n<li>ID选择器：以“#”开头，权重很高。ID一般指向唯一元素。但是在CSS中，ID央视出现在多个不同的元素上并不会只渲染第一个，而是雨露均沾。但是显然不推荐这么做。</li>\n<li>属性选择器：指含有<code>[]</code>的选择器，形如[title]:{}、[title=”css-world”]等</li>\n<li>伪类选择器：一般指前面有个英文冒号”:”的选择器，如:first-child或:last-child等</li>\n<li>伪元素选择器：就是有两个连续冒号的选择器，如::first-line、::first-latter、::before、::after</li>\n</ul>\n<h3 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h3><p>hover前加空格，本身不会有:hover的效果，而后代元素会有:hover的效果</p>\n<h3 id=\"关系选择器\"><a href=\"#关系选择器\" class=\"headerlink\" title=\"关系选择器\"></a>关系选择器</h3><p>关系选择器是指根据与其他元素的关系选择元素的选择器，常见的符号有空格、&gt;、~，还有+等，这些都是非常常用的选择器。</p>\n<ul>\n<li>后代选择器：选择所有合乎规则的后代元素。空格连接。</li>\n<li>相邻后代选择器：仅仅选择合乎规则的儿子元素，孙子、重孙元素忽略，因此又称“子选择器”。&gt;连接。适用于IE7以上版本。</li>\n<li>兄弟选择器：选择当前元素后面的所有合乎规则的兄弟元素。~连接。适用于IE7以上版本。</li>\n<li>相邻兄弟选择器：仅仅选择当前元素相邻的那个合乎规则的兄弟元素。+连接。适用于IE7以上版本。</li>\n</ul>\n<h2 id=\"流、元素与基本尺寸\"><a href=\"#流、元素与基本尺寸\" class=\"headerlink\" title=\"流、元素与基本尺寸\"></a>流、元素与基本尺寸</h2><p>HTML常见的标签有<code>&lt;div/&gt;</code>、<code>&lt;p/&gt;</code>、<code>&lt;li/&gt;</code>和<code>&lt;table/&gt;</code>以及<code>&lt;span/&gt;</code>、<code>&lt;img/&gt;</code>、和<code>&lt;em/&gt;</code>等。虽然标签种类繁多，但通常我们就把它们分为两类：块级元素（block-level element）和内联元素（inline element）。</p>\n<h3 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h3><p>“块级元素”对应的英文是block-level element，常见的块级元素有<code>&lt;div&gt;</code>、<code>&lt;li&gt;</code>和<code>&lt;table&gt;</code>等。需要注意是，“块级元素”和“display为block的元素”不是一个概念。例如，<code>&lt;li&gt;</code>元素默认的display值是list-item，<code>&lt;table&gt;</code>元素默认的display值是table，但是它们均是“块级元素”，因为它们都符合块级元素的基本特征，也就是一个水平流上只能单独显示一个元素，多个块级元素则换行显示。</p>\n<p>每个元素都有两个盒子，外在盒子和容器盒子，外在盒子控制元素是可以一行显示还是只能换行显示，内联盒子控制宽高、内容呈现等。</p>\n<p>按照display属性值的不同，值为block的元素的盒子实际由外在的“块级盒子”和内在的“块级容器盒子”组成，值为inline-block的元素则由外在的“内联盒子”和内在的“块级容器盒子”组成。</p>\n<p>display属性值是inline-block的元素既能和图文一行显示，又能直接设置width/height了吧！因为有两个盒子，外面的盒子是inline级别，里面的盒子是block级别。实际上，如果遵循这种理解，display:block应该脑补成display:block-block，display:table应该脑补成display:block-table，我们平时的写法实际上是一种简写。</p>\n<h3 id=\"内联元素\"><a href=\"#内联元素\" class=\"headerlink\" title=\"内联元素\"></a>内联元素</h3><p>”内联级元素“在这里简称内联元素。流体布局的本质就是inline和block。从作用上来讲，块级负责结构，内联负责内容。所谓图文，指图片和文字，是最典型的内联元素。</p>\n<h3 id=\"哪些元素是内联元素\"><a href=\"#哪些元素是内联元素\" class=\"headerlink\" title=\"哪些元素是内联元素\"></a>哪些元素是内联元素</h3><h4 id=\"从定义看\"><a href=\"#从定义看\" class=\"headerlink\" title=\"从定义看\"></a>从定义看</h4><p>首先要明白这一点：“内联元素”的“内联”特指“外在盒子”，和“display为inline的元素”不是一个概念</p>\n<p>inline-block和inline-table都是“内联元素”，因为它们的“外在盒子”都是内联盒子。那么，<code>&lt;button&gt;</code>按钮元素是内联元素，因为其display默认值是inline-block；<code>&lt;img&gt;</code>图片元素也是内联元素，因为其display默认值是inline等。</p>\n<h4 id=\"从表现看\"><a href=\"#从表现看\" class=\"headerlink\" title=\"从表现看\"></a>从表现看</h4><p>就行为表现来看，“内联元素”的典型特征就是可以和文字在一行显示。因此，文字是内联元素，图片是内联元素，按钮是内联元素，输入框、下拉框等原生表单控件也是内联元素。</p>\n<p>下面有一个疑问：浮动元素貌似也是可以和文字在一个水平上显示的，是不是浮动元素也是内联级别的呢？不是的。实际上，浮动元素和后面的文字并不在一行显示，浮动元素已经在文档流之外了。证据就是，当后面文字足够多的时候，文字并不是在浮动元素的下面，而是继续在后面。这就说明，浮动元素和后面文字不在一行，只是它们恰好站在了一起而已。真相是，浮动元素会生成“块盒子”，这就是后话了。</p>\n<h2 id=\"CSS定位\"><a href=\"#CSS定位\" class=\"headerlink\" title=\"CSS定位\"></a>CSS定位</h2><p>笔记来源：<a href=\"https://www.ruanyifeng.com/blog/2019/11/css-position.html\">CSS定位详解</a></p>\n<h3 id=\"一、postion属性的作用\"><a href=\"#一、postion属性的作用\" class=\"headerlink\" title=\"一、postion属性的作用\"></a>一、postion属性的作用</h3><p>postion属性用来指定一个元素在网页上的位置，一共有5种定位方式：</p>\n<ul>\n<li>static</li>\n<li>relative</li>\n<li>fixed</li>\n<li>absolute</li>\n<li>sticky  (2017年浏览器才支持)</li>\n</ul>\n<h3 id=\"二、static属性值\"><a href=\"#二、static属性值\" class=\"headerlink\" title=\"二、static属性值\"></a>二、static属性值</h3><p>static是postion的默认值。这时浏览器会按照源码的顺序决定每个元素的位置，这时 top、bottom、left、right这四个属性无效。</p>\n<h3 id=\"三、relative，absolute、fixed\"><a href=\"#三、relative，absolute、fixed\" class=\"headerlink\" title=\"三、relative，absolute、fixed\"></a>三、relative，absolute、fixed</h3><p>relative、absolute、fixed这三个属性值有一个共同点，都是相对于某个基点的定位，不同之处仅仅在于基点不同。这三种定位都不会影响其他元素的位置，因此元素之间可能会产生重叠。</p>\n<h4 id=\"3-1-relative属性值\"><a href=\"#3-1-relative属性值\" class=\"headerlink\" title=\"3.1 relative属性值\"></a>3.1 relative属性值</h4><p>relative表示，相对于默认位置（即static时的位置）进行偏移，即定位基点是元素的默认位置。</p>\n<p>它必须搭配top、bottom、left、right这四个属性一起使用，用来指定偏移的方向和距离</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">\tpostion: relative;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-absolute属性\"><a href=\"#3-2-absolute属性\" class=\"headerlink\" title=\"3.2 absolute属性\"></a>3.2 absolute属性</h4><p>absolute表示，相对于上级元素（一般是父元素）进行偏移，即定位基点是父元素。</p>\n<p>它有一个重要的限制条件：父元素的postion不能是static（默认）定位，否则定位基点就会变成整个网页的根元素html。另外，absolute定位也必须搭配top、bottom、left、right这四个属性一起使用。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;father&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;son&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">#father&#123;</span><br><span class=\"line\">\tpostion: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#son&#123;</span><br><span class=\"line\">\tpostion: absolute;</span><br><span class=\"line\">\ttop: 20px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意： absolute定位的元素会被“正常的页面流”忽略，即在“正常的页面流”里，该元素所占的空间为0，周边元素不受影响。</p>\n<h4 id=\"3-3-fixed属性\"><a href=\"#3-3-fixed属性\" class=\"headerlink\" title=\"3.3 fixed属性\"></a>3.3 fixed属性</h4><p>fixed表示，相对于浏览器窗口进行偏移，即定位基点是浏览器窗口。这会导致元素的位置不随页面滚动而变化，好像固定在网页上一样。</p>\n<p> 它如果搭配<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>这四个属性一起使用，表示元素的初始位置是基于视口计算的，否则初始位置就是元素的默认位置。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">\tpostion: fixed;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 上面代码中，<code>div</code>元素始终在视口顶部，不随网页滚动而变化。</p>\n<h3 id=\"四、sticky属性值\"><a href=\"#四、sticky属性值\" class=\"headerlink\" title=\"四、sticky属性值\"></a>四、sticky属性值</h3><p><code>sticky</code>跟前面四个属性值都不一样，它会产生动态效果，很像<code>relative</code>和<code>fixed</code>的结合：一些时候是<code>relative</code>定位（定位基点是自身默认位置），另一些时候自动变成<code>fixed</code>定位（定位基点是视口）。</p>\n<p> 因此，它能够形成”动态固定”的效果。比如，网页的搜索工具栏，初始加载时在自己的默认位置（<code>relative</code>定位）。</p>\n<p> 页面向下滚动时，工具栏变成固定位置，始终停留在页面头部（<code>fixed</code>定位），等到页面重新向上滚动回到原位，工具栏也会回到默认位置。</p>\n<p><code>sticky</code>生效的前提是，必须搭配<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>这四个属性一起使用，不能省略，否则等同于<code>relative</code>定位，不产生”动态固定”的效果。原因是这四个属性用来定义”偏移距离”，浏览器把它当作<code>sticky</code>的生效门槛。</p>\n<p>它的具体规则是，当页面滚动，父元素开始脱离视口时（即部分不可见），只要与<code>sticky</code>元素的距离达到生效门槛，<code>relative</code>定位自动切换为<code>fixed</code>定位；等到父元素完全脱离视口时（即完全不可见），<code>fixed</code>定位自动切换回<code>relative</code>定位。</p>\n<p>请看下面的示例代码。（注意，除了已被淘汰的 IE 以外，其他浏览器目前都支持<code>sticky</code>。但是，Safari 浏览器需要加上浏览器前缀<code>-webkit-</code>。）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#toolbar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: -webkit-sticky; <span class=\"comment\">/* safari 浏览器 */</span></span><br><span class=\"line\">  <span class=\"attribute\">position</span>: sticky; <span class=\"comment\">/* 其他浏览器 */</span></span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，页面向下滚动时，<code>#toolbar</code>的父元素开始脱离视口，一旦视口的顶部与<code>#toolbar</code>的距离小于<code>20px</code>（门槛值），<code>#toolbar</code>就自动变为<code>fixed</code>定位，保持与视口顶部<code>20px</code>的距离。页面继续向下滚动，父元素彻底离开视口（即整个父元素完全不可见），<code>#toolbar</code>恢复成<code>relative</code>定位。特性表现：</p>\n<ol>\n<li>父级元素不能有任何<code>overflow:visible</code>以外的overflow设置，否则没有粘滞效果。因为改变了滚动容器（即使没有出现滚动条）。因此，如果你的<code>position:sticky</code>无效，看看是不是某一个祖先元素设置了<code>overflow:hidden</code>，移除之即可。</li>\n<li><code>2019-05-22新增</code><br>父级元素设置和粘性定位元素等高的固定的<code>height</code>高度值，或者高度计算值和粘性定位元素高度一样，也没有粘滞效果。我专门写了篇文章深入讲解了粘性效果无效的原因，可以<a href=\"https://www.zhangxinxu.com/wordpress/2020/03/position-sticky-rules/\">点击这里查看</a>。</li>\n<li>同一个父容器中的sticky元素，如果定位值相等，则会重叠；如果属于不同父元素，且这些父元素正好紧密相连，则会鸠占鹊巢，挤开原来的元素，形成依次占位的效果。至于原因需要理解粘性定位的计算规则，同样<a href=\"https://www.zhangxinxu.com/wordpress/2020/03/position-sticky-rules/\">点击这里查看</a>。</li>\n<li>sticky定位，不仅可以设置<code>top</code>，基于滚动容器上边缘定位；还可以设置<code>bottom</code>，也就是相对底部粘滞。如果是水平滚动，也可以设置<code>left</code>和<code>right</code>值。</li>\n</ol>"},{"title":"CSS水平垂直居中实现方式","date":"2019-08-28T01:38:42.000Z","cover":"https://img.showydream.com/img/iZX9MU-picography-food-platters-beach-restaurant-small-768x512.jpg","description":"CSS水平垂直居中实现","keywords":"CSS水平垂直居中实现","_content":"\n水平垂直居中包括行内元素居中，以及块级元素居中\n\n#### 行内元素html结构\n\n```html\n <div class=\"outer\">\n    <span class=\"inner\"></span>\n  </div>\n```\n\n#### 块级元素结构\n\n```html\n <div class=\"outer\">\n    <div class=\"inner\"></div>\n  </div>\n```\n\n#### 基础样式\n\n```html\n<style>\n.outer {\n    width: 400px;\n    height: 400px;\n    border: 1px solid red;\n}\n.outer .inner {\n    width: 50px;\n    height: 50px;\n    border: 1px solid blue;\n}\n</style>\n```\n\n### 水平居中\n\n#### 行内元素（最简单 text-align: center）\n\n```css\n.outer {\n    text-align: center;\n}\n```\n\n#### 块级元素（margin: auto）\n\n当使用这种方式时，内部元素必须定义宽度，不然margin属性会无效\n\n```css\n.outer .inner {\n    margin: auto;\n}\n```\n\n#### 块级元素（margin: auto + display: table）\n\n前面这种方式需要为内部元素定义宽度，如果不想定义宽度，可以设置内部元素的display 为 table，它的宽度会由内部元素来撑开。\n\n```css\n.outer .inner {\n    margin: auto;\n    display: table;\n}\n```\n\n#### 块级元素（display: inline）\n\n为内部元素设置display 为inline，将它转换为行内元素，再对父元素使用text-align: center 可以实现水平居中，缺点就是内部元素无法设置宽度。\n\n```css\n.outer {\n    text-align: center;\n}\n.outer .inner {\n    display: inline;\n}\n```\n\n#### 块级元素（display: inline-block）\n\n方案三无法为内部元素设置宽度，但是采用inline-block，则可以为内部元素设置宽度。\n\n```css\n.outer {\n    text-align: center;\n}\n.outer .inner {\n    display: inline-block;\n}\n```\n\n#### 块级元素（float: left + transform）\n\n这种方式不需要知道内部元素宽度。\n\n```css\n.outer .inner {\n    position: relative;\n    left: 50%;\n    transform: translateX(-50%);\n}\n```\n\n#### 块级元素（负边距+绝对定位）\n\n```css\n.outer {\n    position: relative;\n}\n.outer .inner {\n    position: absolute;\n    left: 50%;\n    margin-left: -25px;\n}\n```\n\n#### 块级元素（flexbox）\n\n```css\n用的最多的方式，但低版本浏览器会有兼容问题\n.outer {\n    display: flex;\n    justify-content: center;  // 主轴上居中\n}\n```\n\n### 垂直居中\n\n#### 行内元素（line-height）\n\n外部元素设置line-height\n\n```css\n.outer {\n    line-height: 400px;\n}\n```\n\n#### 块级元素（absolute + top + margin-top）\n\n使用绝对定位将内部元素的顶部定位在中间，再通过margin-top 负值拉回高度，需要提前知道内部元素的高度\n\n```css\n.outer {\n    position: relative;\n}\n.outer .inner {\n    position: absolute;\n    top: 50%;\n    margin-top: -25px;\n}\n```\n\n#### 块级元素（absolute + margin:auto）\n\n这种方式不需要知道内部元素的高度，兼容性也很好\n\n```css\n.outer {\n    position: relative;\n}\n.outer .inner {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    margin: auto;\n}\n```\n\n#### 块级元素（relative + transform）\n\n前面水平居中的时候也出现过这种方式，也可以使用position: absolute方式，但要对应地将外部元素设置成position: relative\n\n```css\n.outer .inner {\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n}\n```\n\n#### 块级元素（vertical-align + table-cell）\n\n```css\n.outer {\n    display: table-cell;\n    vertical-align: middle;\n}\n```\n\n#### 块级元素（vertical-align + inline-block）\n\n原理是新建一个inner的兄弟元素，高度撑开整个容器，再对inner使用vertical-align: middle 使元素居中，不需要知道内部元素的高度\n\n#### html结构\n\n```html\n <div class=\"outer\">\n    <div class=\"inner\"></div>\n    <div class=\"sibling\"></div>\n  </div>\n.outer .inner {\n    vertical-align: middle;\n    display: inline-block;\n}\n.outer .slibing {\n    height: 400px;\n    display: inline-block;\n    vertical-align: middle;\n}\n```\n\n#### 块级元素（伪元素）\n\n原理和上面的方式一样，只是通过伪元素去撑开高度\n\n```html\n.inner {\n    display: inline-block;\n    vertical-align: middle;\n}\n.outer::before {\n    content: '';\n    height: 100%;\n    display: inline-block;\n    vertical-align: middle;\n}\n```\n\n#### 块级元素（flexbox）\n\n```css\n.outer {\n    display: flex;\n    align=items: center;\n}\n```\n\n================================\n\n### 补充：\n\n还可以用transform: scale(0.5, 0.5)来实现\n\n使用line-height垂直居中时，需要对自己行高进行修正，默认会继承下来的\n\n\n```css\n.outer {\n  display: flex;\n  margin: auto\n}\n```\n","source":"_posts/CSS水平垂直居中实现方式.md","raw":"---\ntitle: CSS水平垂直居中实现方式\ndate: 2019-08-28 09:38:42\ncover: https://img.showydream.com/img/iZX9MU-picography-food-platters-beach-restaurant-small-768x512.jpg\ndescription: CSS水平垂直居中实现\nkeywords: CSS水平垂直居中实现\ntags: 面经\ncategories: \n  - CSS\n---\n\n水平垂直居中包括行内元素居中，以及块级元素居中\n\n#### 行内元素html结构\n\n```html\n <div class=\"outer\">\n    <span class=\"inner\"></span>\n  </div>\n```\n\n#### 块级元素结构\n\n```html\n <div class=\"outer\">\n    <div class=\"inner\"></div>\n  </div>\n```\n\n#### 基础样式\n\n```html\n<style>\n.outer {\n    width: 400px;\n    height: 400px;\n    border: 1px solid red;\n}\n.outer .inner {\n    width: 50px;\n    height: 50px;\n    border: 1px solid blue;\n}\n</style>\n```\n\n### 水平居中\n\n#### 行内元素（最简单 text-align: center）\n\n```css\n.outer {\n    text-align: center;\n}\n```\n\n#### 块级元素（margin: auto）\n\n当使用这种方式时，内部元素必须定义宽度，不然margin属性会无效\n\n```css\n.outer .inner {\n    margin: auto;\n}\n```\n\n#### 块级元素（margin: auto + display: table）\n\n前面这种方式需要为内部元素定义宽度，如果不想定义宽度，可以设置内部元素的display 为 table，它的宽度会由内部元素来撑开。\n\n```css\n.outer .inner {\n    margin: auto;\n    display: table;\n}\n```\n\n#### 块级元素（display: inline）\n\n为内部元素设置display 为inline，将它转换为行内元素，再对父元素使用text-align: center 可以实现水平居中，缺点就是内部元素无法设置宽度。\n\n```css\n.outer {\n    text-align: center;\n}\n.outer .inner {\n    display: inline;\n}\n```\n\n#### 块级元素（display: inline-block）\n\n方案三无法为内部元素设置宽度，但是采用inline-block，则可以为内部元素设置宽度。\n\n```css\n.outer {\n    text-align: center;\n}\n.outer .inner {\n    display: inline-block;\n}\n```\n\n#### 块级元素（float: left + transform）\n\n这种方式不需要知道内部元素宽度。\n\n```css\n.outer .inner {\n    position: relative;\n    left: 50%;\n    transform: translateX(-50%);\n}\n```\n\n#### 块级元素（负边距+绝对定位）\n\n```css\n.outer {\n    position: relative;\n}\n.outer .inner {\n    position: absolute;\n    left: 50%;\n    margin-left: -25px;\n}\n```\n\n#### 块级元素（flexbox）\n\n```css\n用的最多的方式，但低版本浏览器会有兼容问题\n.outer {\n    display: flex;\n    justify-content: center;  // 主轴上居中\n}\n```\n\n### 垂直居中\n\n#### 行内元素（line-height）\n\n外部元素设置line-height\n\n```css\n.outer {\n    line-height: 400px;\n}\n```\n\n#### 块级元素（absolute + top + margin-top）\n\n使用绝对定位将内部元素的顶部定位在中间，再通过margin-top 负值拉回高度，需要提前知道内部元素的高度\n\n```css\n.outer {\n    position: relative;\n}\n.outer .inner {\n    position: absolute;\n    top: 50%;\n    margin-top: -25px;\n}\n```\n\n#### 块级元素（absolute + margin:auto）\n\n这种方式不需要知道内部元素的高度，兼容性也很好\n\n```css\n.outer {\n    position: relative;\n}\n.outer .inner {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    margin: auto;\n}\n```\n\n#### 块级元素（relative + transform）\n\n前面水平居中的时候也出现过这种方式，也可以使用position: absolute方式，但要对应地将外部元素设置成position: relative\n\n```css\n.outer .inner {\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n}\n```\n\n#### 块级元素（vertical-align + table-cell）\n\n```css\n.outer {\n    display: table-cell;\n    vertical-align: middle;\n}\n```\n\n#### 块级元素（vertical-align + inline-block）\n\n原理是新建一个inner的兄弟元素，高度撑开整个容器，再对inner使用vertical-align: middle 使元素居中，不需要知道内部元素的高度\n\n#### html结构\n\n```html\n <div class=\"outer\">\n    <div class=\"inner\"></div>\n    <div class=\"sibling\"></div>\n  </div>\n.outer .inner {\n    vertical-align: middle;\n    display: inline-block;\n}\n.outer .slibing {\n    height: 400px;\n    display: inline-block;\n    vertical-align: middle;\n}\n```\n\n#### 块级元素（伪元素）\n\n原理和上面的方式一样，只是通过伪元素去撑开高度\n\n```html\n.inner {\n    display: inline-block;\n    vertical-align: middle;\n}\n.outer::before {\n    content: '';\n    height: 100%;\n    display: inline-block;\n    vertical-align: middle;\n}\n```\n\n#### 块级元素（flexbox）\n\n```css\n.outer {\n    display: flex;\n    align=items: center;\n}\n```\n\n================================\n\n### 补充：\n\n还可以用transform: scale(0.5, 0.5)来实现\n\n使用line-height垂直居中时，需要对自己行高进行修正，默认会继承下来的\n\n\n```css\n.outer {\n  display: flex;\n  margin: auto\n}\n```\n","slug":"CSS水平垂直居中实现方式","published":1,"updated":"2021-11-08T06:31:03.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62co0007rifya5fxcfgm","content":"<p>水平垂直居中包括行内元素居中，以及块级元素居中</p>\n<h4 id=\"行内元素html结构\"><a href=\"#行内元素html结构\" class=\"headerlink\" title=\"行内元素html结构\"></a>行内元素html结构</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;outer&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inner&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素结构\"><a href=\"#块级元素结构\" class=\"headerlink\" title=\"块级元素结构\"></a>块级元素结构</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;outer&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inner&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基础样式\"><a href=\"#基础样式\" class=\"headerlink\" title=\"基础样式\"></a>基础样式</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.outer</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"css\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.outer</span> <span class=\"selector-class\">.inner</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid blue;</span></span><br><span class=\"line\"><span class=\"css\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h3><h4 id=\"行内元素（最简单-text-align-center）\"><a href=\"#行内元素（最简单-text-align-center）\" class=\"headerlink\" title=\"行内元素（最简单 text-align: center）\"></a>行内元素（最简单 text-align: center）</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（margin-auto）\"><a href=\"#块级元素（margin-auto）\" class=\"headerlink\" title=\"块级元素（margin: auto）\"></a>块级元素（margin: auto）</h4><p>当使用这种方式时，内部元素必须定义宽度，不然margin属性会无效</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> <span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（margin-auto-display-table）\"><a href=\"#块级元素（margin-auto-display-table）\" class=\"headerlink\" title=\"块级元素（margin: auto + display: table）\"></a>块级元素（margin: auto + display: table）</h4><p>前面这种方式需要为内部元素定义宽度，如果不想定义宽度，可以设置内部元素的display 为 table，它的宽度会由内部元素来撑开。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> <span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（display-inline）\"><a href=\"#块级元素（display-inline）\" class=\"headerlink\" title=\"块级元素（display: inline）\"></a>块级元素（display: inline）</h4><p>为内部元素设置display 为inline，将它转换为行内元素，再对父元素使用text-align: center 可以实现水平居中，缺点就是内部元素无法设置宽度。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.outer</span> <span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（display-inline-block）\"><a href=\"#块级元素（display-inline-block）\" class=\"headerlink\" title=\"块级元素（display: inline-block）\"></a>块级元素（display: inline-block）</h4><p>方案三无法为内部元素设置宽度，但是采用inline-block，则可以为内部元素设置宽度。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.outer</span> <span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（float-left-transform）\"><a href=\"#块级元素（float-left-transform）\" class=\"headerlink\" title=\"块级元素（float: left + transform）\"></a>块级元素（float: left + transform）</h4><p>这种方式不需要知道内部元素宽度。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> <span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-<span class=\"number\">50%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（负边距-绝对定位）\"><a href=\"#块级元素（负边距-绝对定位）\" class=\"headerlink\" title=\"块级元素（负边距+绝对定位）\"></a>块级元素（负边距+绝对定位）</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.outer</span> <span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">25px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（flexbox）\"><a href=\"#块级元素（flexbox）\" class=\"headerlink\" title=\"块级元素（flexbox）\"></a>块级元素（flexbox）</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用的最多的方式，但低版本浏览器会有兼容问题</span><br><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;  // 主轴上居中</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><h4 id=\"行内元素（line-height）\"><a href=\"#行内元素（line-height）\" class=\"headerlink\" title=\"行内元素（line-height）\"></a>行内元素（line-height）</h4><p>外部元素设置line-height</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（absolute-top-margin-top）\"><a href=\"#块级元素（absolute-top-margin-top）\" class=\"headerlink\" title=\"块级元素（absolute + top + margin-top）\"></a>块级元素（absolute + top + margin-top）</h4><p>使用绝对定位将内部元素的顶部定位在中间，再通过margin-top 负值拉回高度，需要提前知道内部元素的高度</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.outer</span> <span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">25px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（absolute-margin-auto）\"><a href=\"#块级元素（absolute-margin-auto）\" class=\"headerlink\" title=\"块级元素（absolute + margin:auto）\"></a>块级元素（absolute + margin:auto）</h4><p>这种方式不需要知道内部元素的高度，兼容性也很好</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.outer</span> <span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（relative-transform）\"><a href=\"#块级元素（relative-transform）\" class=\"headerlink\" title=\"块级元素（relative + transform）\"></a>块级元素（relative + transform）</h4><p>前面水平居中的时候也出现过这种方式，也可以使用position: absolute方式，但要对应地将外部元素设置成position: relative</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> <span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-<span class=\"number\">50%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（vertical-align-table-cell）\"><a href=\"#块级元素（vertical-align-table-cell）\" class=\"headerlink\" title=\"块级元素（vertical-align + table-cell）\"></a>块级元素（vertical-align + table-cell）</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（vertical-align-inline-block）\"><a href=\"#块级元素（vertical-align-inline-block）\" class=\"headerlink\" title=\"块级元素（vertical-align + inline-block）\"></a>块级元素（vertical-align + inline-block）</h4><p>原理是新建一个inner的兄弟元素，高度撑开整个容器，再对inner使用vertical-align: middle 使元素居中，不需要知道内部元素的高度</p>\n<h4 id=\"html结构\"><a href=\"#html结构\" class=\"headerlink\" title=\"html结构\"></a>html结构</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;outer&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inner&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sibling&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">.outer .inner &#123;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.outer .slibing &#123;</span><br><span class=\"line\">    height: 400px;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（伪元素）\"><a href=\"#块级元素（伪元素）\" class=\"headerlink\" title=\"块级元素（伪元素）\"></a>块级元素（伪元素）</h4><p>原理和上面的方式一样，只是通过伪元素去撑开高度</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.inner &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.outer::before &#123;</span><br><span class=\"line\">    content: &#x27;&#x27;;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（flexbox）-1\"><a href=\"#块级元素（flexbox）-1\" class=\"headerlink\" title=\"块级元素（flexbox）\"></a>块级元素（flexbox）</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    align=items: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>================================</p>\n<h3 id=\"补充：\"><a href=\"#补充：\" class=\"headerlink\" title=\"补充：\"></a>补充：</h3><p>还可以用transform: scale(0.5, 0.5)来实现</p>\n<p>使用line-height垂直居中时，需要对自己行高进行修正，默认会继承下来的</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>水平垂直居中包括行内元素居中，以及块级元素居中</p>\n<h4 id=\"行内元素html结构\"><a href=\"#行内元素html结构\" class=\"headerlink\" title=\"行内元素html结构\"></a>行内元素html结构</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;outer&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inner&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素结构\"><a href=\"#块级元素结构\" class=\"headerlink\" title=\"块级元素结构\"></a>块级元素结构</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;outer&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inner&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基础样式\"><a href=\"#基础样式\" class=\"headerlink\" title=\"基础样式\"></a>基础样式</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.outer</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"css\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.outer</span> <span class=\"selector-class\">.inner</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid blue;</span></span><br><span class=\"line\"><span class=\"css\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h3><h4 id=\"行内元素（最简单-text-align-center）\"><a href=\"#行内元素（最简单-text-align-center）\" class=\"headerlink\" title=\"行内元素（最简单 text-align: center）\"></a>行内元素（最简单 text-align: center）</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（margin-auto）\"><a href=\"#块级元素（margin-auto）\" class=\"headerlink\" title=\"块级元素（margin: auto）\"></a>块级元素（margin: auto）</h4><p>当使用这种方式时，内部元素必须定义宽度，不然margin属性会无效</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> <span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（margin-auto-display-table）\"><a href=\"#块级元素（margin-auto-display-table）\" class=\"headerlink\" title=\"块级元素（margin: auto + display: table）\"></a>块级元素（margin: auto + display: table）</h4><p>前面这种方式需要为内部元素定义宽度，如果不想定义宽度，可以设置内部元素的display 为 table，它的宽度会由内部元素来撑开。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> <span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（display-inline）\"><a href=\"#块级元素（display-inline）\" class=\"headerlink\" title=\"块级元素（display: inline）\"></a>块级元素（display: inline）</h4><p>为内部元素设置display 为inline，将它转换为行内元素，再对父元素使用text-align: center 可以实现水平居中，缺点就是内部元素无法设置宽度。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.outer</span> <span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（display-inline-block）\"><a href=\"#块级元素（display-inline-block）\" class=\"headerlink\" title=\"块级元素（display: inline-block）\"></a>块级元素（display: inline-block）</h4><p>方案三无法为内部元素设置宽度，但是采用inline-block，则可以为内部元素设置宽度。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.outer</span> <span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（float-left-transform）\"><a href=\"#块级元素（float-left-transform）\" class=\"headerlink\" title=\"块级元素（float: left + transform）\"></a>块级元素（float: left + transform）</h4><p>这种方式不需要知道内部元素宽度。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> <span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-<span class=\"number\">50%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（负边距-绝对定位）\"><a href=\"#块级元素（负边距-绝对定位）\" class=\"headerlink\" title=\"块级元素（负边距+绝对定位）\"></a>块级元素（负边距+绝对定位）</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.outer</span> <span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">25px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（flexbox）\"><a href=\"#块级元素（flexbox）\" class=\"headerlink\" title=\"块级元素（flexbox）\"></a>块级元素（flexbox）</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用的最多的方式，但低版本浏览器会有兼容问题</span><br><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;  // 主轴上居中</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><h4 id=\"行内元素（line-height）\"><a href=\"#行内元素（line-height）\" class=\"headerlink\" title=\"行内元素（line-height）\"></a>行内元素（line-height）</h4><p>外部元素设置line-height</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（absolute-top-margin-top）\"><a href=\"#块级元素（absolute-top-margin-top）\" class=\"headerlink\" title=\"块级元素（absolute + top + margin-top）\"></a>块级元素（absolute + top + margin-top）</h4><p>使用绝对定位将内部元素的顶部定位在中间，再通过margin-top 负值拉回高度，需要提前知道内部元素的高度</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.outer</span> <span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">25px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（absolute-margin-auto）\"><a href=\"#块级元素（absolute-margin-auto）\" class=\"headerlink\" title=\"块级元素（absolute + margin:auto）\"></a>块级元素（absolute + margin:auto）</h4><p>这种方式不需要知道内部元素的高度，兼容性也很好</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.outer</span> <span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（relative-transform）\"><a href=\"#块级元素（relative-transform）\" class=\"headerlink\" title=\"块级元素（relative + transform）\"></a>块级元素（relative + transform）</h4><p>前面水平居中的时候也出现过这种方式，也可以使用position: absolute方式，但要对应地将外部元素设置成position: relative</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> <span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-<span class=\"number\">50%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（vertical-align-table-cell）\"><a href=\"#块级元素（vertical-align-table-cell）\" class=\"headerlink\" title=\"块级元素（vertical-align + table-cell）\"></a>块级元素（vertical-align + table-cell）</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（vertical-align-inline-block）\"><a href=\"#块级元素（vertical-align-inline-block）\" class=\"headerlink\" title=\"块级元素（vertical-align + inline-block）\"></a>块级元素（vertical-align + inline-block）</h4><p>原理是新建一个inner的兄弟元素，高度撑开整个容器，再对inner使用vertical-align: middle 使元素居中，不需要知道内部元素的高度</p>\n<h4 id=\"html结构\"><a href=\"#html结构\" class=\"headerlink\" title=\"html结构\"></a>html结构</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;outer&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inner&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sibling&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">.outer .inner &#123;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.outer .slibing &#123;</span><br><span class=\"line\">    height: 400px;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（伪元素）\"><a href=\"#块级元素（伪元素）\" class=\"headerlink\" title=\"块级元素（伪元素）\"></a>块级元素（伪元素）</h4><p>原理和上面的方式一样，只是通过伪元素去撑开高度</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.inner &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.outer::before &#123;</span><br><span class=\"line\">    content: &#x27;&#x27;;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"块级元素（flexbox）-1\"><a href=\"#块级元素（flexbox）-1\" class=\"headerlink\" title=\"块级元素（flexbox）\"></a>块级元素（flexbox）</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    align=items: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>================================</p>\n<h3 id=\"补充：\"><a href=\"#补充：\" class=\"headerlink\" title=\"补充：\"></a>补充：</h3><p>还可以用transform: scale(0.5, 0.5)来实现</p>\n<p>使用line-height垂直居中时，需要对自己行高进行修正，默认会继承下来的</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"HTML标签语义化","date":"2020-09-21T07:42:54.000Z","cover":"https://img.showydream.com/img/iZX9MU-picography-food-platters-beach-restaurant-small-768x512.jpg","description":"HTML标签语义化","keywords":"HTML标签语义化","_content":"\n\n\n## 语义化的含义\n\n语义化，我的理解是根据内容使用有含义的标签或设置有含义的属性。\n\n## 语义化的作用\n\n- HTML结构更加清晰，有助于阅读和维护\n- 方便机器识别内容，有助于SEO\n\n## 语义化标签\n\n我把语义化标签分为两类，一类是用于构建结构的容器标签，一类是指定具体含义的标签。以下内容摘自MDN。\n\n### 构建结构的容器标签\n\n#### `header`\n\n用于展示介绍性内容，通常包含一组介绍性的或是辅助导航的实用元素。它可能包含一些标题元素，但也可能包含其他元素，比如 Logo、搜索框、作者名称，等等。\n\n使用说明：\n\n- `header` 元素不是分段内容，因此不会往 大纲 中引入新的段落。也就是说，`header`元素通常用于包含周围部分的标题（h1 至 h6 元素），但这不是必需的。\n\n#### `main`\n\n呈现应用的主体部分。主体部分由与文档直接相关，或者扩展于文档的中心主题、应用的主要功能部分的内容组成。\n\n使用说明：\n\n- 这部分内容在文档中应当是独一无二的，不包含在任何一系列文档中重复的内容，比如侧边栏，导航栏链接，版权信息，网站 Logo，搜索框（除非搜索框为文档的主要功能）。\n- `main`对文档的大纲没有贡献;也就是说，与诸如`body`之类的元素，诸如`h2`之类的标题等不同，`main`不会影响DOM's页面结构概念。这是严格的信息。\n\n#### `aside`\n\n表示一个和其余页面内容几乎无关的部分，被认为是独立于该内容的一部分并且可以被单独的拆分出来而不会使整体受影响。其通常表现为侧边栏或者标注框。\n\n使用说明：\n\n- 不要使用 `aside` 元素去尾随括号内的文本 ，因为这种文本被认为是主要流内容的一部分。\n\n#### `footer`\n\n表示根节点元素的页脚或者最近一个章节内容的页脚。一个页脚通常包含该章节作者、版权数据或者与文档相关的链接等信息。\n\n使用说明：\n\n- `footer`元素内的作者信息应包含在`address` 元素中。\n- `footer`元素不是章节内容，因此在outline中不能包含新的章节。\n\n#### `nav`\n\n其目的是在当前文档或其他文档中提供导航链接。导航部分的常见示例是菜单，目录和索引。\n\n使用说明：\n\n- 并不是所有的链接都必须使用`nav`元素,它只用来将一些热门的链接放入导航栏,例如`footer`元素就常用来在页面底部包含一个不常用到,没必要加入`nav`的链接列表。\n- 一个网页也可能含有多个`nav`元素,例如一个是网站内的导航列表,另一个是本页面内的导航列表。\n- 对于屏幕阅读障碍的人,可以使用这个元素来确定是否忽略初始内容。\n\n#### `article`\n\n表示文档、页面、应用或网站中的独立结构，其意在成为可独立分配的或可复用的结构，如在发布中，它可能是论坛帖子、杂志或新闻文章、博客、用户提交的评论、交互式组件，或者其他独立的内容项目。\n\n使用说明：\n\n- 每个`article`，通常包括标题（`h1` - `h6`元素）作为`article`元素的子元素。\n- 当`article`元素嵌套使用时，则该元素代表与外层元素有关的文章。例如，代表博客评论的`article`元素可嵌套在代表博客文章的`article`元素中。\n- `article`元素的作者信息可通过`address`元素提供，但是不适用于嵌套的`article`元素。\n- `article`元素的发布日期和时间可通过`time`元素的pubdate属性表示。\n- 可以使用`time` 元素的datetime属性来描述元素的发布日期和时间。请注意`time`的pubdate 属性不再是W3C HTML5标准。\n\n#### `section`\n\n表示一个包含在HTML文档中的独立部分，它没有更具体的语义元素来表示，一般来说会有包含一个标题。\n\n使用说明：\n\n- 一般通过是否包含一个标题作为子节点 来 辨识每一个`section`。\n- 如果元素内容可以分为几个部分的话，应该使用 `article` 而不是`section`。\n- 不要把 `section` 元素作为一个普通的容器来使用，这是本应该是`div`的用法（特别是当片段仅仅是为了美化样式的时候）。 一般来说，一个`section`应该出现在文档大纲中。\n\n#### `details`\n\n可创建一个挂件，仅在被切换成展开状态时，它才会显示内含的信息。`summary` 用作 `details`元素的一个内容的摘要，标题或图例。\n\n#### `ol`/`ul`\n\nol和ul这两个标签表示的是列表，区别是是否有顺序要求。其子元素`li`表示的是列表项，li的属性`value`的值表示列表项的序号。\n\n#### `dl`\n\n是一个包含术语定义以及描述的列表，通常用于展示词汇表或者元数据 (键-值对列表)。\n\n- `dt` 用于在一个定义列表中声明一个术语。\n- `dd` 用来指明一个描述列表中一个术语的描述。\n\n#### `address`\n\n表示其中的 HTML 提供了某个人或某个组织（等等）的联系信息。\n\n用法说明节\n\n- 当表示一个和联系信息无关的任意的地址时，请改用 `p`元素而不是`address` 元素。\n- 这个元素不能包含除联系信息之外的任何信息，比如出版日期（这应当被包含在`time` 元素之中）。\n- 通常，`address` 元素可以放在`footer` 元素之中（如果存在的话）。\n\n### 指定具体内容的标签\n\n#### `h1`–`h6`\n\n标题(Heading)元素呈现了六个不同的级别的标题，`h1` 级别最高，而 `h6` 级别最低。\n\n使用说明：\n\n- 用户代理可以使用标题信息，例如自动构建文档的目录。\n- 不要为了减小标题的字体而使用低级别的标题， 而是使用 CSS font-size 属性。\n- 避免跳过某级标题：始终要从`h1` 开始，接下来依次使用 `h2` 等等。\n- 使用 `section`元素时，为了方便起见，你应该考虑避免在同一个页面上重复使用 `h1`，`h1` 应被用于表示页面的标题，其他的标题当从 `h2` 开始。在使用 section 时，应当为每个 section 都使用一个 `h2`。\n\n#### `a`\n\n锚元素可以创建通向其他网页、文件、同一页面内的位置、电子邮件地址或任何其他 URL 的超链接。属性`rel`可以设置`prev`/`next`来标识“上一篇”/“下一篇”，设置`nofollow`标识不推荐超链接指向的文档。\n\n#### `em`/`strong`\n\n这两个标签都有强调的作用，不过这两个在表现形式上有所不同，em是斜体，strong是加粗。\n\n#### `i`/`b`\n\ni是斜体，b是加粗，这两个与`em`/`strong`的不同是`i`/`b`没有强调/侧重的作用，而是为了引起注意或排版需要。\n\n#### `img`\n\nsrc, alt 属性决定了图片的含义\n\n- 有 src 且 alt 为空字符串，代表装饰用图\n- 有 src 且 alt 为非空字符串，图为文档内容的一部分\n- 有 src 且无 alt，图为内容一部分但无等价的文本内容可用\n\n#### `p`\n\n表示文本的一个段落。该元素通常表现为一整块与相邻文本分离的文本，或以垂直的空白隔离或以首行缩进。\n\n## 属性\n\n### title\n\n包含了表示咨询信息文本，和它属于的元素相关。这个信息通常存在，但绝不必要，作为提示信息展示给用户。一些典型用例：\n\n- 链接：被链接文档的标题或描述\n- 媒体元素，例如图像：描述或关联信息\n- 段落：脚注或者相关的评论\n- 引用：作者信息，以及其他\n\n","source":"_posts/HTML标签语义化.md","raw":"---\ntitle: HTML标签语义化\ndate: 2020-09-21 15:42:54\ncover: https://img.showydream.com/img/iZX9MU-picography-food-platters-beach-restaurant-small-768x512.jpg\ndescription: HTML标签语义化\nkeywords: HTML标签语义化\ntags: 面经\ncategories: \n  - HTML\n---\n\n\n\n## 语义化的含义\n\n语义化，我的理解是根据内容使用有含义的标签或设置有含义的属性。\n\n## 语义化的作用\n\n- HTML结构更加清晰，有助于阅读和维护\n- 方便机器识别内容，有助于SEO\n\n## 语义化标签\n\n我把语义化标签分为两类，一类是用于构建结构的容器标签，一类是指定具体含义的标签。以下内容摘自MDN。\n\n### 构建结构的容器标签\n\n#### `header`\n\n用于展示介绍性内容，通常包含一组介绍性的或是辅助导航的实用元素。它可能包含一些标题元素，但也可能包含其他元素，比如 Logo、搜索框、作者名称，等等。\n\n使用说明：\n\n- `header` 元素不是分段内容，因此不会往 大纲 中引入新的段落。也就是说，`header`元素通常用于包含周围部分的标题（h1 至 h6 元素），但这不是必需的。\n\n#### `main`\n\n呈现应用的主体部分。主体部分由与文档直接相关，或者扩展于文档的中心主题、应用的主要功能部分的内容组成。\n\n使用说明：\n\n- 这部分内容在文档中应当是独一无二的，不包含在任何一系列文档中重复的内容，比如侧边栏，导航栏链接，版权信息，网站 Logo，搜索框（除非搜索框为文档的主要功能）。\n- `main`对文档的大纲没有贡献;也就是说，与诸如`body`之类的元素，诸如`h2`之类的标题等不同，`main`不会影响DOM's页面结构概念。这是严格的信息。\n\n#### `aside`\n\n表示一个和其余页面内容几乎无关的部分，被认为是独立于该内容的一部分并且可以被单独的拆分出来而不会使整体受影响。其通常表现为侧边栏或者标注框。\n\n使用说明：\n\n- 不要使用 `aside` 元素去尾随括号内的文本 ，因为这种文本被认为是主要流内容的一部分。\n\n#### `footer`\n\n表示根节点元素的页脚或者最近一个章节内容的页脚。一个页脚通常包含该章节作者、版权数据或者与文档相关的链接等信息。\n\n使用说明：\n\n- `footer`元素内的作者信息应包含在`address` 元素中。\n- `footer`元素不是章节内容，因此在outline中不能包含新的章节。\n\n#### `nav`\n\n其目的是在当前文档或其他文档中提供导航链接。导航部分的常见示例是菜单，目录和索引。\n\n使用说明：\n\n- 并不是所有的链接都必须使用`nav`元素,它只用来将一些热门的链接放入导航栏,例如`footer`元素就常用来在页面底部包含一个不常用到,没必要加入`nav`的链接列表。\n- 一个网页也可能含有多个`nav`元素,例如一个是网站内的导航列表,另一个是本页面内的导航列表。\n- 对于屏幕阅读障碍的人,可以使用这个元素来确定是否忽略初始内容。\n\n#### `article`\n\n表示文档、页面、应用或网站中的独立结构，其意在成为可独立分配的或可复用的结构，如在发布中，它可能是论坛帖子、杂志或新闻文章、博客、用户提交的评论、交互式组件，或者其他独立的内容项目。\n\n使用说明：\n\n- 每个`article`，通常包括标题（`h1` - `h6`元素）作为`article`元素的子元素。\n- 当`article`元素嵌套使用时，则该元素代表与外层元素有关的文章。例如，代表博客评论的`article`元素可嵌套在代表博客文章的`article`元素中。\n- `article`元素的作者信息可通过`address`元素提供，但是不适用于嵌套的`article`元素。\n- `article`元素的发布日期和时间可通过`time`元素的pubdate属性表示。\n- 可以使用`time` 元素的datetime属性来描述元素的发布日期和时间。请注意`time`的pubdate 属性不再是W3C HTML5标准。\n\n#### `section`\n\n表示一个包含在HTML文档中的独立部分，它没有更具体的语义元素来表示，一般来说会有包含一个标题。\n\n使用说明：\n\n- 一般通过是否包含一个标题作为子节点 来 辨识每一个`section`。\n- 如果元素内容可以分为几个部分的话，应该使用 `article` 而不是`section`。\n- 不要把 `section` 元素作为一个普通的容器来使用，这是本应该是`div`的用法（特别是当片段仅仅是为了美化样式的时候）。 一般来说，一个`section`应该出现在文档大纲中。\n\n#### `details`\n\n可创建一个挂件，仅在被切换成展开状态时，它才会显示内含的信息。`summary` 用作 `details`元素的一个内容的摘要，标题或图例。\n\n#### `ol`/`ul`\n\nol和ul这两个标签表示的是列表，区别是是否有顺序要求。其子元素`li`表示的是列表项，li的属性`value`的值表示列表项的序号。\n\n#### `dl`\n\n是一个包含术语定义以及描述的列表，通常用于展示词汇表或者元数据 (键-值对列表)。\n\n- `dt` 用于在一个定义列表中声明一个术语。\n- `dd` 用来指明一个描述列表中一个术语的描述。\n\n#### `address`\n\n表示其中的 HTML 提供了某个人或某个组织（等等）的联系信息。\n\n用法说明节\n\n- 当表示一个和联系信息无关的任意的地址时，请改用 `p`元素而不是`address` 元素。\n- 这个元素不能包含除联系信息之外的任何信息，比如出版日期（这应当被包含在`time` 元素之中）。\n- 通常，`address` 元素可以放在`footer` 元素之中（如果存在的话）。\n\n### 指定具体内容的标签\n\n#### `h1`–`h6`\n\n标题(Heading)元素呈现了六个不同的级别的标题，`h1` 级别最高，而 `h6` 级别最低。\n\n使用说明：\n\n- 用户代理可以使用标题信息，例如自动构建文档的目录。\n- 不要为了减小标题的字体而使用低级别的标题， 而是使用 CSS font-size 属性。\n- 避免跳过某级标题：始终要从`h1` 开始，接下来依次使用 `h2` 等等。\n- 使用 `section`元素时，为了方便起见，你应该考虑避免在同一个页面上重复使用 `h1`，`h1` 应被用于表示页面的标题，其他的标题当从 `h2` 开始。在使用 section 时，应当为每个 section 都使用一个 `h2`。\n\n#### `a`\n\n锚元素可以创建通向其他网页、文件、同一页面内的位置、电子邮件地址或任何其他 URL 的超链接。属性`rel`可以设置`prev`/`next`来标识“上一篇”/“下一篇”，设置`nofollow`标识不推荐超链接指向的文档。\n\n#### `em`/`strong`\n\n这两个标签都有强调的作用，不过这两个在表现形式上有所不同，em是斜体，strong是加粗。\n\n#### `i`/`b`\n\ni是斜体，b是加粗，这两个与`em`/`strong`的不同是`i`/`b`没有强调/侧重的作用，而是为了引起注意或排版需要。\n\n#### `img`\n\nsrc, alt 属性决定了图片的含义\n\n- 有 src 且 alt 为空字符串，代表装饰用图\n- 有 src 且 alt 为非空字符串，图为文档内容的一部分\n- 有 src 且无 alt，图为内容一部分但无等价的文本内容可用\n\n#### `p`\n\n表示文本的一个段落。该元素通常表现为一整块与相邻文本分离的文本，或以垂直的空白隔离或以首行缩进。\n\n## 属性\n\n### title\n\n包含了表示咨询信息文本，和它属于的元素相关。这个信息通常存在，但绝不必要，作为提示信息展示给用户。一些典型用例：\n\n- 链接：被链接文档的标题或描述\n- 媒体元素，例如图像：描述或关联信息\n- 段落：脚注或者相关的评论\n- 引用：作者信息，以及其他\n\n","slug":"HTML标签语义化","published":1,"updated":"2021-11-08T06:34:52.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62cp0009rify1ldg6z3u","content":"<h2 id=\"语义化的含义\"><a href=\"#语义化的含义\" class=\"headerlink\" title=\"语义化的含义\"></a>语义化的含义</h2><p>语义化，我的理解是根据内容使用有含义的标签或设置有含义的属性。</p>\n<h2 id=\"语义化的作用\"><a href=\"#语义化的作用\" class=\"headerlink\" title=\"语义化的作用\"></a>语义化的作用</h2><ul>\n<li>HTML结构更加清晰，有助于阅读和维护</li>\n<li>方便机器识别内容，有助于SEO</li>\n</ul>\n<h2 id=\"语义化标签\"><a href=\"#语义化标签\" class=\"headerlink\" title=\"语义化标签\"></a>语义化标签</h2><p>我把语义化标签分为两类，一类是用于构建结构的容器标签，一类是指定具体含义的标签。以下内容摘自MDN。</p>\n<h3 id=\"构建结构的容器标签\"><a href=\"#构建结构的容器标签\" class=\"headerlink\" title=\"构建结构的容器标签\"></a>构建结构的容器标签</h3><h4 id=\"header\"><a href=\"#header\" class=\"headerlink\" title=\"header\"></a><code>header</code></h4><p>用于展示介绍性内容，通常包含一组介绍性的或是辅助导航的实用元素。它可能包含一些标题元素，但也可能包含其他元素，比如 Logo、搜索框、作者名称，等等。</p>\n<p>使用说明：</p>\n<ul>\n<li><code>header</code> 元素不是分段内容，因此不会往 大纲 中引入新的段落。也就是说，<code>header</code>元素通常用于包含周围部分的标题（h1 至 h6 元素），但这不是必需的。</li>\n</ul>\n<h4 id=\"main\"><a href=\"#main\" class=\"headerlink\" title=\"main\"></a><code>main</code></h4><p>呈现应用的主体部分。主体部分由与文档直接相关，或者扩展于文档的中心主题、应用的主要功能部分的内容组成。</p>\n<p>使用说明：</p>\n<ul>\n<li>这部分内容在文档中应当是独一无二的，不包含在任何一系列文档中重复的内容，比如侧边栏，导航栏链接，版权信息，网站 Logo，搜索框（除非搜索框为文档的主要功能）。</li>\n<li><code>main</code>对文档的大纲没有贡献;也就是说，与诸如<code>body</code>之类的元素，诸如<code>h2</code>之类的标题等不同，<code>main</code>不会影响DOM’s页面结构概念。这是严格的信息。</li>\n</ul>\n<h4 id=\"aside\"><a href=\"#aside\" class=\"headerlink\" title=\"aside\"></a><code>aside</code></h4><p>表示一个和其余页面内容几乎无关的部分，被认为是独立于该内容的一部分并且可以被单独的拆分出来而不会使整体受影响。其通常表现为侧边栏或者标注框。</p>\n<p>使用说明：</p>\n<ul>\n<li>不要使用 <code>aside</code> 元素去尾随括号内的文本 ，因为这种文本被认为是主要流内容的一部分。</li>\n</ul>\n<h4 id=\"footer\"><a href=\"#footer\" class=\"headerlink\" title=\"footer\"></a><code>footer</code></h4><p>表示根节点元素的页脚或者最近一个章节内容的页脚。一个页脚通常包含该章节作者、版权数据或者与文档相关的链接等信息。</p>\n<p>使用说明：</p>\n<ul>\n<li><code>footer</code>元素内的作者信息应包含在<code>address</code> 元素中。</li>\n<li><code>footer</code>元素不是章节内容，因此在outline中不能包含新的章节。</li>\n</ul>\n<h4 id=\"nav\"><a href=\"#nav\" class=\"headerlink\" title=\"nav\"></a><code>nav</code></h4><p>其目的是在当前文档或其他文档中提供导航链接。导航部分的常见示例是菜单，目录和索引。</p>\n<p>使用说明：</p>\n<ul>\n<li>并不是所有的链接都必须使用<code>nav</code>元素,它只用来将一些热门的链接放入导航栏,例如<code>footer</code>元素就常用来在页面底部包含一个不常用到,没必要加入<code>nav</code>的链接列表。</li>\n<li>一个网页也可能含有多个<code>nav</code>元素,例如一个是网站内的导航列表,另一个是本页面内的导航列表。</li>\n<li>对于屏幕阅读障碍的人,可以使用这个元素来确定是否忽略初始内容。</li>\n</ul>\n<h4 id=\"article\"><a href=\"#article\" class=\"headerlink\" title=\"article\"></a><code>article</code></h4><p>表示文档、页面、应用或网站中的独立结构，其意在成为可独立分配的或可复用的结构，如在发布中，它可能是论坛帖子、杂志或新闻文章、博客、用户提交的评论、交互式组件，或者其他独立的内容项目。</p>\n<p>使用说明：</p>\n<ul>\n<li>每个<code>article</code>，通常包括标题（<code>h1</code> - <code>h6</code>元素）作为<code>article</code>元素的子元素。</li>\n<li>当<code>article</code>元素嵌套使用时，则该元素代表与外层元素有关的文章。例如，代表博客评论的<code>article</code>元素可嵌套在代表博客文章的<code>article</code>元素中。</li>\n<li><code>article</code>元素的作者信息可通过<code>address</code>元素提供，但是不适用于嵌套的<code>article</code>元素。</li>\n<li><code>article</code>元素的发布日期和时间可通过<code>time</code>元素的pubdate属性表示。</li>\n<li>可以使用<code>time</code> 元素的datetime属性来描述元素的发布日期和时间。请注意<code>time</code>的pubdate 属性不再是W3C HTML5标准。</li>\n</ul>\n<h4 id=\"section\"><a href=\"#section\" class=\"headerlink\" title=\"section\"></a><code>section</code></h4><p>表示一个包含在HTML文档中的独立部分，它没有更具体的语义元素来表示，一般来说会有包含一个标题。</p>\n<p>使用说明：</p>\n<ul>\n<li>一般通过是否包含一个标题作为子节点 来 辨识每一个<code>section</code>。</li>\n<li>如果元素内容可以分为几个部分的话，应该使用 <code>article</code> 而不是<code>section</code>。</li>\n<li>不要把 <code>section</code> 元素作为一个普通的容器来使用，这是本应该是<code>div</code>的用法（特别是当片段仅仅是为了美化样式的时候）。 一般来说，一个<code>section</code>应该出现在文档大纲中。</li>\n</ul>\n<h4 id=\"details\"><a href=\"#details\" class=\"headerlink\" title=\"details\"></a><code>details</code></h4><p>可创建一个挂件，仅在被切换成展开状态时，它才会显示内含的信息。<code>summary</code> 用作 <code>details</code>元素的一个内容的摘要，标题或图例。</p>\n<h4 id=\"ol-ul\"><a href=\"#ol-ul\" class=\"headerlink\" title=\"ol/ul\"></a><code>ol</code>/<code>ul</code></h4><p>ol和ul这两个标签表示的是列表，区别是是否有顺序要求。其子元素<code>li</code>表示的是列表项，li的属性<code>value</code>的值表示列表项的序号。</p>\n<h4 id=\"dl\"><a href=\"#dl\" class=\"headerlink\" title=\"dl\"></a><code>dl</code></h4><p>是一个包含术语定义以及描述的列表，通常用于展示词汇表或者元数据 (键-值对列表)。</p>\n<ul>\n<li><code>dt</code> 用于在一个定义列表中声明一个术语。</li>\n<li><code>dd</code> 用来指明一个描述列表中一个术语的描述。</li>\n</ul>\n<h4 id=\"address\"><a href=\"#address\" class=\"headerlink\" title=\"address\"></a><code>address</code></h4><p>表示其中的 HTML 提供了某个人或某个组织（等等）的联系信息。</p>\n<p>用法说明节</p>\n<ul>\n<li>当表示一个和联系信息无关的任意的地址时，请改用 <code>p</code>元素而不是<code>address</code> 元素。</li>\n<li>这个元素不能包含除联系信息之外的任何信息，比如出版日期（这应当被包含在<code>time</code> 元素之中）。</li>\n<li>通常，<code>address</code> 元素可以放在<code>footer</code> 元素之中（如果存在的话）。</li>\n</ul>\n<h3 id=\"指定具体内容的标签\"><a href=\"#指定具体内容的标签\" class=\"headerlink\" title=\"指定具体内容的标签\"></a>指定具体内容的标签</h3><h4 id=\"h1–h6\"><a href=\"#h1–h6\" class=\"headerlink\" title=\"h1–h6\"></a><code>h1</code>–<code>h6</code></h4><p>标题(Heading)元素呈现了六个不同的级别的标题，<code>h1</code> 级别最高，而 <code>h6</code> 级别最低。</p>\n<p>使用说明：</p>\n<ul>\n<li>用户代理可以使用标题信息，例如自动构建文档的目录。</li>\n<li>不要为了减小标题的字体而使用低级别的标题， 而是使用 CSS font-size 属性。</li>\n<li>避免跳过某级标题：始终要从<code>h1</code> 开始，接下来依次使用 <code>h2</code> 等等。</li>\n<li>使用 <code>section</code>元素时，为了方便起见，你应该考虑避免在同一个页面上重复使用 <code>h1</code>，<code>h1</code> 应被用于表示页面的标题，其他的标题当从 <code>h2</code> 开始。在使用 section 时，应当为每个 section 都使用一个 <code>h2</code>。</li>\n</ul>\n<h4 id=\"a\"><a href=\"#a\" class=\"headerlink\" title=\"a\"></a><code>a</code></h4><p>锚元素可以创建通向其他网页、文件、同一页面内的位置、电子邮件地址或任何其他 URL 的超链接。属性<code>rel</code>可以设置<code>prev</code>/<code>next</code>来标识“上一篇”/“下一篇”，设置<code>nofollow</code>标识不推荐超链接指向的文档。</p>\n<h4 id=\"em-strong\"><a href=\"#em-strong\" class=\"headerlink\" title=\"em/strong\"></a><code>em</code>/<code>strong</code></h4><p>这两个标签都有强调的作用，不过这两个在表现形式上有所不同，em是斜体，strong是加粗。</p>\n<h4 id=\"i-b\"><a href=\"#i-b\" class=\"headerlink\" title=\"i/b\"></a><code>i</code>/<code>b</code></h4><p>i是斜体，b是加粗，这两个与<code>em</code>/<code>strong</code>的不同是<code>i</code>/<code>b</code>没有强调/侧重的作用，而是为了引起注意或排版需要。</p>\n<h4 id=\"img\"><a href=\"#img\" class=\"headerlink\" title=\"img\"></a><code>img</code></h4><p>src, alt 属性决定了图片的含义</p>\n<ul>\n<li>有 src 且 alt 为空字符串，代表装饰用图</li>\n<li>有 src 且 alt 为非空字符串，图为文档内容的一部分</li>\n<li>有 src 且无 alt，图为内容一部分但无等价的文本内容可用</li>\n</ul>\n<h4 id=\"p\"><a href=\"#p\" class=\"headerlink\" title=\"p\"></a><code>p</code></h4><p>表示文本的一个段落。该元素通常表现为一整块与相邻文本分离的文本，或以垂直的空白隔离或以首行缩进。</p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><h3 id=\"title\"><a href=\"#title\" class=\"headerlink\" title=\"title\"></a>title</h3><p>包含了表示咨询信息文本，和它属于的元素相关。这个信息通常存在，但绝不必要，作为提示信息展示给用户。一些典型用例：</p>\n<ul>\n<li>链接：被链接文档的标题或描述</li>\n<li>媒体元素，例如图像：描述或关联信息</li>\n<li>段落：脚注或者相关的评论</li>\n<li>引用：作者信息，以及其他</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"语义化的含义\"><a href=\"#语义化的含义\" class=\"headerlink\" title=\"语义化的含义\"></a>语义化的含义</h2><p>语义化，我的理解是根据内容使用有含义的标签或设置有含义的属性。</p>\n<h2 id=\"语义化的作用\"><a href=\"#语义化的作用\" class=\"headerlink\" title=\"语义化的作用\"></a>语义化的作用</h2><ul>\n<li>HTML结构更加清晰，有助于阅读和维护</li>\n<li>方便机器识别内容，有助于SEO</li>\n</ul>\n<h2 id=\"语义化标签\"><a href=\"#语义化标签\" class=\"headerlink\" title=\"语义化标签\"></a>语义化标签</h2><p>我把语义化标签分为两类，一类是用于构建结构的容器标签，一类是指定具体含义的标签。以下内容摘自MDN。</p>\n<h3 id=\"构建结构的容器标签\"><a href=\"#构建结构的容器标签\" class=\"headerlink\" title=\"构建结构的容器标签\"></a>构建结构的容器标签</h3><h4 id=\"header\"><a href=\"#header\" class=\"headerlink\" title=\"header\"></a><code>header</code></h4><p>用于展示介绍性内容，通常包含一组介绍性的或是辅助导航的实用元素。它可能包含一些标题元素，但也可能包含其他元素，比如 Logo、搜索框、作者名称，等等。</p>\n<p>使用说明：</p>\n<ul>\n<li><code>header</code> 元素不是分段内容，因此不会往 大纲 中引入新的段落。也就是说，<code>header</code>元素通常用于包含周围部分的标题（h1 至 h6 元素），但这不是必需的。</li>\n</ul>\n<h4 id=\"main\"><a href=\"#main\" class=\"headerlink\" title=\"main\"></a><code>main</code></h4><p>呈现应用的主体部分。主体部分由与文档直接相关，或者扩展于文档的中心主题、应用的主要功能部分的内容组成。</p>\n<p>使用说明：</p>\n<ul>\n<li>这部分内容在文档中应当是独一无二的，不包含在任何一系列文档中重复的内容，比如侧边栏，导航栏链接，版权信息，网站 Logo，搜索框（除非搜索框为文档的主要功能）。</li>\n<li><code>main</code>对文档的大纲没有贡献;也就是说，与诸如<code>body</code>之类的元素，诸如<code>h2</code>之类的标题等不同，<code>main</code>不会影响DOM’s页面结构概念。这是严格的信息。</li>\n</ul>\n<h4 id=\"aside\"><a href=\"#aside\" class=\"headerlink\" title=\"aside\"></a><code>aside</code></h4><p>表示一个和其余页面内容几乎无关的部分，被认为是独立于该内容的一部分并且可以被单独的拆分出来而不会使整体受影响。其通常表现为侧边栏或者标注框。</p>\n<p>使用说明：</p>\n<ul>\n<li>不要使用 <code>aside</code> 元素去尾随括号内的文本 ，因为这种文本被认为是主要流内容的一部分。</li>\n</ul>\n<h4 id=\"footer\"><a href=\"#footer\" class=\"headerlink\" title=\"footer\"></a><code>footer</code></h4><p>表示根节点元素的页脚或者最近一个章节内容的页脚。一个页脚通常包含该章节作者、版权数据或者与文档相关的链接等信息。</p>\n<p>使用说明：</p>\n<ul>\n<li><code>footer</code>元素内的作者信息应包含在<code>address</code> 元素中。</li>\n<li><code>footer</code>元素不是章节内容，因此在outline中不能包含新的章节。</li>\n</ul>\n<h4 id=\"nav\"><a href=\"#nav\" class=\"headerlink\" title=\"nav\"></a><code>nav</code></h4><p>其目的是在当前文档或其他文档中提供导航链接。导航部分的常见示例是菜单，目录和索引。</p>\n<p>使用说明：</p>\n<ul>\n<li>并不是所有的链接都必须使用<code>nav</code>元素,它只用来将一些热门的链接放入导航栏,例如<code>footer</code>元素就常用来在页面底部包含一个不常用到,没必要加入<code>nav</code>的链接列表。</li>\n<li>一个网页也可能含有多个<code>nav</code>元素,例如一个是网站内的导航列表,另一个是本页面内的导航列表。</li>\n<li>对于屏幕阅读障碍的人,可以使用这个元素来确定是否忽略初始内容。</li>\n</ul>\n<h4 id=\"article\"><a href=\"#article\" class=\"headerlink\" title=\"article\"></a><code>article</code></h4><p>表示文档、页面、应用或网站中的独立结构，其意在成为可独立分配的或可复用的结构，如在发布中，它可能是论坛帖子、杂志或新闻文章、博客、用户提交的评论、交互式组件，或者其他独立的内容项目。</p>\n<p>使用说明：</p>\n<ul>\n<li>每个<code>article</code>，通常包括标题（<code>h1</code> - <code>h6</code>元素）作为<code>article</code>元素的子元素。</li>\n<li>当<code>article</code>元素嵌套使用时，则该元素代表与外层元素有关的文章。例如，代表博客评论的<code>article</code>元素可嵌套在代表博客文章的<code>article</code>元素中。</li>\n<li><code>article</code>元素的作者信息可通过<code>address</code>元素提供，但是不适用于嵌套的<code>article</code>元素。</li>\n<li><code>article</code>元素的发布日期和时间可通过<code>time</code>元素的pubdate属性表示。</li>\n<li>可以使用<code>time</code> 元素的datetime属性来描述元素的发布日期和时间。请注意<code>time</code>的pubdate 属性不再是W3C HTML5标准。</li>\n</ul>\n<h4 id=\"section\"><a href=\"#section\" class=\"headerlink\" title=\"section\"></a><code>section</code></h4><p>表示一个包含在HTML文档中的独立部分，它没有更具体的语义元素来表示，一般来说会有包含一个标题。</p>\n<p>使用说明：</p>\n<ul>\n<li>一般通过是否包含一个标题作为子节点 来 辨识每一个<code>section</code>。</li>\n<li>如果元素内容可以分为几个部分的话，应该使用 <code>article</code> 而不是<code>section</code>。</li>\n<li>不要把 <code>section</code> 元素作为一个普通的容器来使用，这是本应该是<code>div</code>的用法（特别是当片段仅仅是为了美化样式的时候）。 一般来说，一个<code>section</code>应该出现在文档大纲中。</li>\n</ul>\n<h4 id=\"details\"><a href=\"#details\" class=\"headerlink\" title=\"details\"></a><code>details</code></h4><p>可创建一个挂件，仅在被切换成展开状态时，它才会显示内含的信息。<code>summary</code> 用作 <code>details</code>元素的一个内容的摘要，标题或图例。</p>\n<h4 id=\"ol-ul\"><a href=\"#ol-ul\" class=\"headerlink\" title=\"ol/ul\"></a><code>ol</code>/<code>ul</code></h4><p>ol和ul这两个标签表示的是列表，区别是是否有顺序要求。其子元素<code>li</code>表示的是列表项，li的属性<code>value</code>的值表示列表项的序号。</p>\n<h4 id=\"dl\"><a href=\"#dl\" class=\"headerlink\" title=\"dl\"></a><code>dl</code></h4><p>是一个包含术语定义以及描述的列表，通常用于展示词汇表或者元数据 (键-值对列表)。</p>\n<ul>\n<li><code>dt</code> 用于在一个定义列表中声明一个术语。</li>\n<li><code>dd</code> 用来指明一个描述列表中一个术语的描述。</li>\n</ul>\n<h4 id=\"address\"><a href=\"#address\" class=\"headerlink\" title=\"address\"></a><code>address</code></h4><p>表示其中的 HTML 提供了某个人或某个组织（等等）的联系信息。</p>\n<p>用法说明节</p>\n<ul>\n<li>当表示一个和联系信息无关的任意的地址时，请改用 <code>p</code>元素而不是<code>address</code> 元素。</li>\n<li>这个元素不能包含除联系信息之外的任何信息，比如出版日期（这应当被包含在<code>time</code> 元素之中）。</li>\n<li>通常，<code>address</code> 元素可以放在<code>footer</code> 元素之中（如果存在的话）。</li>\n</ul>\n<h3 id=\"指定具体内容的标签\"><a href=\"#指定具体内容的标签\" class=\"headerlink\" title=\"指定具体内容的标签\"></a>指定具体内容的标签</h3><h4 id=\"h1–h6\"><a href=\"#h1–h6\" class=\"headerlink\" title=\"h1–h6\"></a><code>h1</code>–<code>h6</code></h4><p>标题(Heading)元素呈现了六个不同的级别的标题，<code>h1</code> 级别最高，而 <code>h6</code> 级别最低。</p>\n<p>使用说明：</p>\n<ul>\n<li>用户代理可以使用标题信息，例如自动构建文档的目录。</li>\n<li>不要为了减小标题的字体而使用低级别的标题， 而是使用 CSS font-size 属性。</li>\n<li>避免跳过某级标题：始终要从<code>h1</code> 开始，接下来依次使用 <code>h2</code> 等等。</li>\n<li>使用 <code>section</code>元素时，为了方便起见，你应该考虑避免在同一个页面上重复使用 <code>h1</code>，<code>h1</code> 应被用于表示页面的标题，其他的标题当从 <code>h2</code> 开始。在使用 section 时，应当为每个 section 都使用一个 <code>h2</code>。</li>\n</ul>\n<h4 id=\"a\"><a href=\"#a\" class=\"headerlink\" title=\"a\"></a><code>a</code></h4><p>锚元素可以创建通向其他网页、文件、同一页面内的位置、电子邮件地址或任何其他 URL 的超链接。属性<code>rel</code>可以设置<code>prev</code>/<code>next</code>来标识“上一篇”/“下一篇”，设置<code>nofollow</code>标识不推荐超链接指向的文档。</p>\n<h4 id=\"em-strong\"><a href=\"#em-strong\" class=\"headerlink\" title=\"em/strong\"></a><code>em</code>/<code>strong</code></h4><p>这两个标签都有强调的作用，不过这两个在表现形式上有所不同，em是斜体，strong是加粗。</p>\n<h4 id=\"i-b\"><a href=\"#i-b\" class=\"headerlink\" title=\"i/b\"></a><code>i</code>/<code>b</code></h4><p>i是斜体，b是加粗，这两个与<code>em</code>/<code>strong</code>的不同是<code>i</code>/<code>b</code>没有强调/侧重的作用，而是为了引起注意或排版需要。</p>\n<h4 id=\"img\"><a href=\"#img\" class=\"headerlink\" title=\"img\"></a><code>img</code></h4><p>src, alt 属性决定了图片的含义</p>\n<ul>\n<li>有 src 且 alt 为空字符串，代表装饰用图</li>\n<li>有 src 且 alt 为非空字符串，图为文档内容的一部分</li>\n<li>有 src 且无 alt，图为内容一部分但无等价的文本内容可用</li>\n</ul>\n<h4 id=\"p\"><a href=\"#p\" class=\"headerlink\" title=\"p\"></a><code>p</code></h4><p>表示文本的一个段落。该元素通常表现为一整块与相邻文本分离的文本，或以垂直的空白隔离或以首行缩进。</p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><h3 id=\"title\"><a href=\"#title\" class=\"headerlink\" title=\"title\"></a>title</h3><p>包含了表示咨询信息文本，和它属于的元素相关。这个信息通常存在，但绝不必要，作为提示信息展示给用户。一些典型用例：</p>\n<ul>\n<li>链接：被链接文档的标题或描述</li>\n<li>媒体元素，例如图像：描述或关联信息</li>\n<li>段落：脚注或者相关的评论</li>\n<li>引用：作者信息，以及其他</li>\n</ul>\n"},{"title":"Docker常用命令","date":"2021-06-10T16:00:00.000Z","cover":"https://img.showydream.com/img/ZhBcmx-iStock-1144628524.jpeg","description":"Docker常用命令","keywords":"docker","_content":"\n\n\n### 安装和常用CLI\n\n添加阿里云镜像：sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\n安装命令：sudo yum install -y  docker-ce docker-ce-cli containerd.io\n\n启动命令：sudo systemctl start docker\n\n添加当前用户到docker用户组：sudo usermod -aG docker $USER （需注销），newgrp docker （立即生效）\n\nHelloworld：docker run hello-world  （本地没有镜像的话会自动从远端仓库pull）\n\npull nginx 镜像：docker pull nginx（等效于nginx:latest）\n\n运行：docker run -【d】（后台运行不阻塞shell） 【-p 80:80】（指定容器端口映射，内部：外部） nginx\n\n查看正在运行：docker ps\n\n删除容器：docker rm -f container id(不用打全，前缀区分)\n\n进入bash：docker exec -it container id(不用打全，前缀区分) bash\n\ncommit镜像：docker commit container id(不用打全，前缀区分)  name\n\n查看镜像列表：docker images （刚才commit的镜像）\n\n使用运行刚才commit的镜像：docker run -d name\n\n使用Dockerfile构建镜像：docker build -t name 存放Dockerfile的文件夹\n\n删除镜像：docker rmi name\n\n保存为tar：docker save name  tar name\n\n从tar加载：docker load  tar name\n\n一些启动参数：\n\n后台运行容器：-d\n\n容器内外端口映射：-p 内部端口号:外部端口号\n\n目录映射：-v dir name : dir\n\n指定映像版本：name:ver\n","source":"_posts/Docker常用命令.md","raw":"---\ntitle: Docker常用命令\ndate: 2021-6-11 00:00:00\ncover: https://img.showydream.com/img/ZhBcmx-iStock-1144628524.jpeg\ndescription: Docker常用命令\nkeywords: docker\ntags: Docker\ncategories: \n - Docker\n---\n\n\n\n### 安装和常用CLI\n\n添加阿里云镜像：sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\n安装命令：sudo yum install -y  docker-ce docker-ce-cli containerd.io\n\n启动命令：sudo systemctl start docker\n\n添加当前用户到docker用户组：sudo usermod -aG docker $USER （需注销），newgrp docker （立即生效）\n\nHelloworld：docker run hello-world  （本地没有镜像的话会自动从远端仓库pull）\n\npull nginx 镜像：docker pull nginx（等效于nginx:latest）\n\n运行：docker run -【d】（后台运行不阻塞shell） 【-p 80:80】（指定容器端口映射，内部：外部） nginx\n\n查看正在运行：docker ps\n\n删除容器：docker rm -f container id(不用打全，前缀区分)\n\n进入bash：docker exec -it container id(不用打全，前缀区分) bash\n\ncommit镜像：docker commit container id(不用打全，前缀区分)  name\n\n查看镜像列表：docker images （刚才commit的镜像）\n\n使用运行刚才commit的镜像：docker run -d name\n\n使用Dockerfile构建镜像：docker build -t name 存放Dockerfile的文件夹\n\n删除镜像：docker rmi name\n\n保存为tar：docker save name  tar name\n\n从tar加载：docker load  tar name\n\n一些启动参数：\n\n后台运行容器：-d\n\n容器内外端口映射：-p 内部端口号:外部端口号\n\n目录映射：-v dir name : dir\n\n指定映像版本：name:ver\n","slug":"Docker常用命令","published":1,"updated":"2021-11-08T06:32:15.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62cq000arify0j2a196p","content":"<h3 id=\"安装和常用CLI\"><a href=\"#安装和常用CLI\" class=\"headerlink\" title=\"安装和常用CLI\"></a>安装和常用CLI</h3><p>添加阿里云镜像：sudo yum-config-manager –add-repo <a href=\"https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p>\n<p>安装命令：sudo yum install -y  docker-ce docker-ce-cli containerd.io</p>\n<p>启动命令：sudo systemctl start docker</p>\n<p>添加当前用户到docker用户组：sudo usermod -aG docker $USER （需注销），newgrp docker （立即生效）</p>\n<p>Helloworld：docker run hello-world  （本地没有镜像的话会自动从远端仓库pull）</p>\n<p>pull nginx 镜像：docker pull nginx（等效于nginx:latest）</p>\n<p>运行：docker run -【d】（后台运行不阻塞shell） 【-p 80:80】（指定容器端口映射，内部：外部） nginx</p>\n<p>查看正在运行：docker ps</p>\n<p>删除容器：docker rm -f container id(不用打全，前缀区分)</p>\n<p>进入bash：docker exec -it container id(不用打全，前缀区分) bash</p>\n<p>commit镜像：docker commit container id(不用打全，前缀区分)  name</p>\n<p>查看镜像列表：docker images （刚才commit的镜像）</p>\n<p>使用运行刚才commit的镜像：docker run -d name</p>\n<p>使用Dockerfile构建镜像：docker build -t name 存放Dockerfile的文件夹</p>\n<p>删除镜像：docker rmi name</p>\n<p>保存为tar：docker save name  tar name</p>\n<p>从tar加载：docker load  tar name</p>\n<p>一些启动参数：</p>\n<p>后台运行容器：-d</p>\n<p>容器内外端口映射：-p 内部端口号:外部端口号</p>\n<p>目录映射：-v dir name : dir</p>\n<p>指定映像版本：name:ver</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装和常用CLI\"><a href=\"#安装和常用CLI\" class=\"headerlink\" title=\"安装和常用CLI\"></a>安装和常用CLI</h3><p>添加阿里云镜像：sudo yum-config-manager –add-repo <a href=\"https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p>\n<p>安装命令：sudo yum install -y  docker-ce docker-ce-cli containerd.io</p>\n<p>启动命令：sudo systemctl start docker</p>\n<p>添加当前用户到docker用户组：sudo usermod -aG docker $USER （需注销），newgrp docker （立即生效）</p>\n<p>Helloworld：docker run hello-world  （本地没有镜像的话会自动从远端仓库pull）</p>\n<p>pull nginx 镜像：docker pull nginx（等效于nginx:latest）</p>\n<p>运行：docker run -【d】（后台运行不阻塞shell） 【-p 80:80】（指定容器端口映射，内部：外部） nginx</p>\n<p>查看正在运行：docker ps</p>\n<p>删除容器：docker rm -f container id(不用打全，前缀区分)</p>\n<p>进入bash：docker exec -it container id(不用打全，前缀区分) bash</p>\n<p>commit镜像：docker commit container id(不用打全，前缀区分)  name</p>\n<p>查看镜像列表：docker images （刚才commit的镜像）</p>\n<p>使用运行刚才commit的镜像：docker run -d name</p>\n<p>使用Dockerfile构建镜像：docker build -t name 存放Dockerfile的文件夹</p>\n<p>删除镜像：docker rmi name</p>\n<p>保存为tar：docker save name  tar name</p>\n<p>从tar加载：docker load  tar name</p>\n<p>一些启动参数：</p>\n<p>后台运行容器：-d</p>\n<p>容器内外端口映射：-p 内部端口号:外部端口号</p>\n<p>目录映射：-v dir name : dir</p>\n<p>指定映像版本：name:ver</p>\n"},{"title":"CSS画图大法","date":"2021-04-18T01:38:42.000Z","cover":"https://img.showydream.com/img/RTpMv6-11c39f7be6854b6b92b0180ec7524baa~tplv-k3u1fbpfcp-watermark.image","description":"CSS画几何图形","keywords":"CSS画几何图形，CSS画三角形","_content":"\n\n### 用css画一个三角形\n\n思路：把div的宽和高都设为0，然后设置四个border的颜色。\n\n```html\n<style type=\"text/css\">\n    .triangle {\n        width: 0;\n        height: 0;\n        border-top: 50px solid blue;\n        border-right: 50px solid red;\n        border-bottom: 50px solid green;\n        border-left: 50px solid yellow;\n    }\n</style>\n<body style=\"padding: 40px;\">\n    <div class=\"triangle\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/5DpIXX-image-20210415154000125.png\" alt=\"image-20210415154000125\" style=\"zoom:50%;\" />\n\n然后用css的transparent属性把其他三个三角的颜色变透明，这样我们就得到一个三角形了。\n\n```html\n<style type=\"text/css\">\n    .triangle {\n        width: 0;\n        height: 0;\n        border: 50px solid transparent;\n        border-bottom: 50px solid green;\n    }\n</style>\n\n<body style=\"padding: 40px;\">\n    <div class=\"triangle\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/ebrrvl-image-20210415154229146.png\" alt=\"image-20210415154229146\" style=\"zoom:50%;\" />\n\n如果下面的bottom宽一点，三角形就会变尖\n\n```html\n<style type=\"text/css\">\n    .triangle {\n        width: 0;\n        height: 0;\n        border: 50px solid transparent;\n        border-bottom: 90px solid green;\n    }\n</style>\n<body style=\"padding: 40px;\">\n    <div class=\"triangle\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/fBo0xT-image-20210415154422217.png\" alt=\"image-20210415154422217\" style=\"zoom:50%;\" />\n\n如果想要一个空心的三角形，可以在后面加一个伪类：\n\n```html\n<style type=\"text/css\">\n    .triangle {\n        width: 0;\n        height: 0;\n        border: 50px solid transparent;\n        border-bottom: 50px solid green;\n        position: relative;\n    }\n    .triangle:after{\n        content: '';\n        border: 40px solid transparent;\n        border-bottom: 40px solid #fff;\n        position: absolute;\n        right: -40px;\n        top: -33px;\n    }\n</style>\n<body style=\"padding: 40px;\">\n    <div class=\"triangle\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/eNfspe-image-20210415155254357.png\" alt=\"image-20210415155254357\" style=\"zoom:50%;\" />\n\n画完三角形，有点意犹未尽，那么问题来了，如何用css画其他的几何图形？\n\n### 用css画一个平行四边形\n\n画平行四边形的思路跟画三角形有点不一样，这时候我们用到了**CSS**的**transform**的**skew**方法。[在这里](https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/skew())看MDN的文档\n\n```html\n<style type=\"text/css\">\n    .parallelogram {\n        width: 150px;\n        height: 100px;\n        transform: skew(25deg);\n        background: green;\n    }\n</style>\n<body style=\"padding: 40px;\">\n    <div class=\"parallelogram\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/ZVGOFO-image-20210415162035076.png\" alt=\"image-20210415162035076\" style=\"zoom:50%;\" />\n\n### 用CSS画一个梯形\n\n画梯形的思路跟画三角形一样，区别是给div加一点宽度：\n\n```html\n<style type=\"text/css\">\n  .trapezoid{\n        width: 100px;\n        height: 0;\n        border: 50px solid transparent;\n        border-bottom: 50px solid green;\n        position: relative;\n    }\n</style>\n<body style=\"padding: 40px;\">\n    <div class=\"trapezoid\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/Aw1RR6-image-20210415162554039.png\" alt=\"image-20210415162554039\" style=\"zoom:50%;\" />\n\n### 用CSS画一个六角形\n\n画六角形的思路还是用三角形的方式，在伪类里画一个倒三角形，然后用绝对定位把伪类放到合适的位置。\n\n点歌：六等星の夜\n\n```html\n<style type=\"text/css\">\n  .star{\n        width: 0;\n        height: 0;\n        border: 60px solid transparent;\n        border-bottom: 100px solid green;\n        position: relative;\n    }\n    .star:after {\n        content: '';\n    \t\tborder: 60px solid transparent;\n    \t\tborder-top: 100px solid green;\n    \t\tposition: absolute;\n    \t\tright: -60px;\n    \t\ttop: 33px;\n    }\n</style>\n<body style=\"padding: 40px;\">\n    <div class=\"star\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/yYRJoJ-image-20210415163151870.png\" alt=\"image-20210415163151870\" style=\"zoom:50%;\" />\n\n### 用CSS画一个五角星\n\n画五角星的思路和画六角形一样，区别是一个伪类不够用了，这回before也用上，还有就是需要用到transform的rotate()函数。[MDN文档](https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/rotate())\n\n```html\n<style type=\"text/css\">\n  .star-five {\n      position: relative;\n      width: 0;\n      height: 0;\n      border-right: 100px solid transparent;\n      border-bottom: 70px solid green;\n      border-left: 100px solid transparent;\n      transform: rotate(35deg);\n    }\n    .star-five:before {\n      border-bottom: 80px solid green;\n      border-left: 30px solid transparent;\n      border-right: 30px solid transparent;\n      position: absolute;\n      height: 0;\n      width: 0;\n      top: -45px;\n      left: -65px;\n      content: '';\n      transform: rotate(-35deg);\n    }\n    .star-five:after {\n      position: absolute;\n      display: block;\n      color: green;\n      top: 3px;\n      left: -105px;\n      width: 0;\n      height: 0;\n      border-right: 100px solid transparent;\n      border-bottom: 70px solid green;\n      border-left: 100px solid transparent;\n      transform: rotate(-70deg);\n      content: '';\n    }\n</style>\n<body style=\"padding: 80px;\">\n    <div class=\"star-five\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/73GW5b-image-20210415164731705.png\" alt=\"image-20210415164731705\" style=\"zoom:50%;\" />\n\n### 用CSS画一个扇形\n\n思路如上，话不多说，直接上代码：\n\n```html\n<style type=\"text/css\">\n  .sector {\n        width: 0px;\n        height: 0px;\n        border-right: 60px solid transparent;\n        border-top: 60px solid green;\n        border-left: 60px solid green;\n        border-bottom: 60px solid green;\n        border-top-left-radius: 60px;\n        border-top-right-radius: 60px;\n        border-bottom-left-radius: 60px;\n        border-bottom-right-radius: 60px;\n    }\n</style>\n<body style=\"padding: 80px;\">\n    <div class=\"sector\"></div>\n</body>\n```\n\n\n\n几何图形的练习到此结束，我们发现带角的这种几何图形都可以用border去画出来，主要是思路灵活一点，脑洞大一点就可以了。下面我们玩儿点花的\n\n### 用CSS画一个月亮\n\n这回用到了新思路：`box-shadow`\n\n```html\n<style type=\"text/css\">\n   .moon {\n      width: 80px;\n      height: 80px;\n      border-radius: 50%;\n      box-shadow: 15px 15px 0 0 green;\n    }\n</style>\n<body style=\"padding: 80px;\">\n    <div class=\"moon\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/LPTTTQ-image-20210415171918291.png\" alt=\"image-20210415171918291\" style=\"zoom:50%;\" />\n\n### 用css画一个小心心\n\n画小心心的思路与上面画几何图形类似，区别是这回不用border了，先画一个头部是圆形，底部是方形的半颗心，并将它旋转45度\n\n```html\n<style type=\"text/css\">\n\t\t.heart {\n      position: relative;\n    }\n    .heart:before {\n      position: absolute;\n      content: \"\";\n      left: 50px;\n      top: 0;\n      width: 50px;\n      height: 80px;\n      background: red;\n      border-radius: 50px 50px 0 0;\n      transform: rotate(-45deg);\n      transform-origin: 0 100%;\n    }\n</style>\n<body style=\"padding: 80px;\">\n    <div class=\"heart\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/5V2OzZ-image-20210415170946156.png\" alt=\"image-20210415170946156\" style=\"zoom:50%;\" />\n\n然后在画一个同样的图形，反方向旋转45度。我们的小心心就画好啦。\n\n```html\n<style type=\"text/css\">\n  \t.heart {\n      position: relative;\n    }\n    .heart:before, .heart:after{\n      position: absolute;\n      content: \"\";\n      left: 50px;\n      top: 0;\n      width: 50px;\n      height: 80px;\n      background: red;\n      border-radius: 50px 50px 0 0;\n      transform: rotate(-45deg);\n      transform-origin: 0 100%;\n    }\n    .heart:after {\n      left: 0;\n      transform: rotate(45deg);\n      transform-origin: 100% 100%;\n    }\n</style>\n<body style=\"padding: 80px;\">\n    <div class=\"heart\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/yBp2AP-image-20210415171126723.png\" alt=\"image-20210415171126723\" style=\"zoom:50%;\" />\n\n### 用CSS画一个阴阳鱼\n\n这个思路就比较好玩儿了，还是用到了伪类叠加的方式。首先画一个半边黑半边白的圆形。\n\n```html\n<style type=\"text/css\">\n  .yin-yang {\n      width: 96px;\n      box-sizing: content-box;\n      height: 48px;\n      background: #fff;\n      border-color: #333;\n      border-style: solid;\n      border-width: 1px 1px 50px 1px;\n      border-radius: 100%;\n      position: relative;\n    }\n</style>\n<body style=\"padding: 80px;\">\n    <div class=\"yin-yang\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/tNuqC0-image-20210415174858818.png\" alt=\"image-20210415174858818\" style=\"zoom:50%;\" />\n\n然后画一个黑色的鱼头，白色眼睛。\n\n```\n<style type=\"text/css\">\n  .yin-yang {\n      width: 96px;\n      box-sizing: content-box;\n      height: 48px;\n      background: #fff;\n      border-color: #333;\n      border-style: solid;\n      border-width: 1px 1px 50px 1px;\n      border-radius: 100%;\n      position: relative;\n    }\n    .yin-yang:before {\n      content: \"\";\n      position: absolute;\n      top: 50%;\n      left: 0;\n      background: #fff;\n      border: 18px solid #333;\n      border-radius: 100%;\n      width: 12px;\n      height: 12px;\n      box-sizing: content-box;\n    }\n</style>\n<body style=\"padding: 80px;\">\n    <div class=\"yin-yang\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/R1KR1q-image-20210415175018831.png\" alt=\"image-20210415175018831\" style=\"zoom:50%;\" />\n\n最后画一个白色鱼头，黑色眼睛：\n\n```\n<style type=\"text/css\">\n  .yin-yang {\n      width: 96px;\n      box-sizing: content-box;\n      height: 48px;\n      background: #fff;\n      border-color: #333;\n      border-style: solid;\n      border-width: 1px 1px 50px 1px;\n      border-radius: 100%;\n      position: relative;\n    }\n    .yin-yang:before {\n      content: \"\";\n      position: absolute;\n      top: 50%;\n      left: 0;\n      background: #fff;\n      border: 18px solid #333;\n      border-radius: 100%;\n      width: 12px;\n      height: 12px;\n      box-sizing: content-box;\n    }\n    .yin-yang:after {\n      content: \"\";\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      background: #333;\n      border: 18px solid #fff;\n      border-radius: 100%;\n      width: 12px;\n      height: 12px;\n      box-sizing: content-box;\n    }\n</style>\n<body style=\"padding: 80px;\">\n    <div class=\"yin-yang\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/jFgYyG-image-20210415175131227.png\" alt=\"image-20210415175131227\" style=\"zoom:50%;\" />\n\n### 最后\n\n祝大家看的开心，喜欢帮忙点个关注呀\n","source":"_posts/CSS画图大法.md","raw":"---\ntitle: CSS画图大法\ndate: 2021-04-18 09:38:42\ncover: https://img.showydream.com/img/RTpMv6-11c39f7be6854b6b92b0180ec7524baa~tplv-k3u1fbpfcp-watermark.image\ndescription: CSS画几何图形\ntags: 面经\nkeywords: CSS画几何图形，CSS画三角形\ncategories: \n  - CSS\n---\n\n\n### 用css画一个三角形\n\n思路：把div的宽和高都设为0，然后设置四个border的颜色。\n\n```html\n<style type=\"text/css\">\n    .triangle {\n        width: 0;\n        height: 0;\n        border-top: 50px solid blue;\n        border-right: 50px solid red;\n        border-bottom: 50px solid green;\n        border-left: 50px solid yellow;\n    }\n</style>\n<body style=\"padding: 40px;\">\n    <div class=\"triangle\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/5DpIXX-image-20210415154000125.png\" alt=\"image-20210415154000125\" style=\"zoom:50%;\" />\n\n然后用css的transparent属性把其他三个三角的颜色变透明，这样我们就得到一个三角形了。\n\n```html\n<style type=\"text/css\">\n    .triangle {\n        width: 0;\n        height: 0;\n        border: 50px solid transparent;\n        border-bottom: 50px solid green;\n    }\n</style>\n\n<body style=\"padding: 40px;\">\n    <div class=\"triangle\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/ebrrvl-image-20210415154229146.png\" alt=\"image-20210415154229146\" style=\"zoom:50%;\" />\n\n如果下面的bottom宽一点，三角形就会变尖\n\n```html\n<style type=\"text/css\">\n    .triangle {\n        width: 0;\n        height: 0;\n        border: 50px solid transparent;\n        border-bottom: 90px solid green;\n    }\n</style>\n<body style=\"padding: 40px;\">\n    <div class=\"triangle\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/fBo0xT-image-20210415154422217.png\" alt=\"image-20210415154422217\" style=\"zoom:50%;\" />\n\n如果想要一个空心的三角形，可以在后面加一个伪类：\n\n```html\n<style type=\"text/css\">\n    .triangle {\n        width: 0;\n        height: 0;\n        border: 50px solid transparent;\n        border-bottom: 50px solid green;\n        position: relative;\n    }\n    .triangle:after{\n        content: '';\n        border: 40px solid transparent;\n        border-bottom: 40px solid #fff;\n        position: absolute;\n        right: -40px;\n        top: -33px;\n    }\n</style>\n<body style=\"padding: 40px;\">\n    <div class=\"triangle\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/eNfspe-image-20210415155254357.png\" alt=\"image-20210415155254357\" style=\"zoom:50%;\" />\n\n画完三角形，有点意犹未尽，那么问题来了，如何用css画其他的几何图形？\n\n### 用css画一个平行四边形\n\n画平行四边形的思路跟画三角形有点不一样，这时候我们用到了**CSS**的**transform**的**skew**方法。[在这里](https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/skew())看MDN的文档\n\n```html\n<style type=\"text/css\">\n    .parallelogram {\n        width: 150px;\n        height: 100px;\n        transform: skew(25deg);\n        background: green;\n    }\n</style>\n<body style=\"padding: 40px;\">\n    <div class=\"parallelogram\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/ZVGOFO-image-20210415162035076.png\" alt=\"image-20210415162035076\" style=\"zoom:50%;\" />\n\n### 用CSS画一个梯形\n\n画梯形的思路跟画三角形一样，区别是给div加一点宽度：\n\n```html\n<style type=\"text/css\">\n  .trapezoid{\n        width: 100px;\n        height: 0;\n        border: 50px solid transparent;\n        border-bottom: 50px solid green;\n        position: relative;\n    }\n</style>\n<body style=\"padding: 40px;\">\n    <div class=\"trapezoid\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/Aw1RR6-image-20210415162554039.png\" alt=\"image-20210415162554039\" style=\"zoom:50%;\" />\n\n### 用CSS画一个六角形\n\n画六角形的思路还是用三角形的方式，在伪类里画一个倒三角形，然后用绝对定位把伪类放到合适的位置。\n\n点歌：六等星の夜\n\n```html\n<style type=\"text/css\">\n  .star{\n        width: 0;\n        height: 0;\n        border: 60px solid transparent;\n        border-bottom: 100px solid green;\n        position: relative;\n    }\n    .star:after {\n        content: '';\n    \t\tborder: 60px solid transparent;\n    \t\tborder-top: 100px solid green;\n    \t\tposition: absolute;\n    \t\tright: -60px;\n    \t\ttop: 33px;\n    }\n</style>\n<body style=\"padding: 40px;\">\n    <div class=\"star\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/yYRJoJ-image-20210415163151870.png\" alt=\"image-20210415163151870\" style=\"zoom:50%;\" />\n\n### 用CSS画一个五角星\n\n画五角星的思路和画六角形一样，区别是一个伪类不够用了，这回before也用上，还有就是需要用到transform的rotate()函数。[MDN文档](https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/rotate())\n\n```html\n<style type=\"text/css\">\n  .star-five {\n      position: relative;\n      width: 0;\n      height: 0;\n      border-right: 100px solid transparent;\n      border-bottom: 70px solid green;\n      border-left: 100px solid transparent;\n      transform: rotate(35deg);\n    }\n    .star-five:before {\n      border-bottom: 80px solid green;\n      border-left: 30px solid transparent;\n      border-right: 30px solid transparent;\n      position: absolute;\n      height: 0;\n      width: 0;\n      top: -45px;\n      left: -65px;\n      content: '';\n      transform: rotate(-35deg);\n    }\n    .star-five:after {\n      position: absolute;\n      display: block;\n      color: green;\n      top: 3px;\n      left: -105px;\n      width: 0;\n      height: 0;\n      border-right: 100px solid transparent;\n      border-bottom: 70px solid green;\n      border-left: 100px solid transparent;\n      transform: rotate(-70deg);\n      content: '';\n    }\n</style>\n<body style=\"padding: 80px;\">\n    <div class=\"star-five\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/73GW5b-image-20210415164731705.png\" alt=\"image-20210415164731705\" style=\"zoom:50%;\" />\n\n### 用CSS画一个扇形\n\n思路如上，话不多说，直接上代码：\n\n```html\n<style type=\"text/css\">\n  .sector {\n        width: 0px;\n        height: 0px;\n        border-right: 60px solid transparent;\n        border-top: 60px solid green;\n        border-left: 60px solid green;\n        border-bottom: 60px solid green;\n        border-top-left-radius: 60px;\n        border-top-right-radius: 60px;\n        border-bottom-left-radius: 60px;\n        border-bottom-right-radius: 60px;\n    }\n</style>\n<body style=\"padding: 80px;\">\n    <div class=\"sector\"></div>\n</body>\n```\n\n\n\n几何图形的练习到此结束，我们发现带角的这种几何图形都可以用border去画出来，主要是思路灵活一点，脑洞大一点就可以了。下面我们玩儿点花的\n\n### 用CSS画一个月亮\n\n这回用到了新思路：`box-shadow`\n\n```html\n<style type=\"text/css\">\n   .moon {\n      width: 80px;\n      height: 80px;\n      border-radius: 50%;\n      box-shadow: 15px 15px 0 0 green;\n    }\n</style>\n<body style=\"padding: 80px;\">\n    <div class=\"moon\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/LPTTTQ-image-20210415171918291.png\" alt=\"image-20210415171918291\" style=\"zoom:50%;\" />\n\n### 用css画一个小心心\n\n画小心心的思路与上面画几何图形类似，区别是这回不用border了，先画一个头部是圆形，底部是方形的半颗心，并将它旋转45度\n\n```html\n<style type=\"text/css\">\n\t\t.heart {\n      position: relative;\n    }\n    .heart:before {\n      position: absolute;\n      content: \"\";\n      left: 50px;\n      top: 0;\n      width: 50px;\n      height: 80px;\n      background: red;\n      border-radius: 50px 50px 0 0;\n      transform: rotate(-45deg);\n      transform-origin: 0 100%;\n    }\n</style>\n<body style=\"padding: 80px;\">\n    <div class=\"heart\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/5V2OzZ-image-20210415170946156.png\" alt=\"image-20210415170946156\" style=\"zoom:50%;\" />\n\n然后在画一个同样的图形，反方向旋转45度。我们的小心心就画好啦。\n\n```html\n<style type=\"text/css\">\n  \t.heart {\n      position: relative;\n    }\n    .heart:before, .heart:after{\n      position: absolute;\n      content: \"\";\n      left: 50px;\n      top: 0;\n      width: 50px;\n      height: 80px;\n      background: red;\n      border-radius: 50px 50px 0 0;\n      transform: rotate(-45deg);\n      transform-origin: 0 100%;\n    }\n    .heart:after {\n      left: 0;\n      transform: rotate(45deg);\n      transform-origin: 100% 100%;\n    }\n</style>\n<body style=\"padding: 80px;\">\n    <div class=\"heart\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/yBp2AP-image-20210415171126723.png\" alt=\"image-20210415171126723\" style=\"zoom:50%;\" />\n\n### 用CSS画一个阴阳鱼\n\n这个思路就比较好玩儿了，还是用到了伪类叠加的方式。首先画一个半边黑半边白的圆形。\n\n```html\n<style type=\"text/css\">\n  .yin-yang {\n      width: 96px;\n      box-sizing: content-box;\n      height: 48px;\n      background: #fff;\n      border-color: #333;\n      border-style: solid;\n      border-width: 1px 1px 50px 1px;\n      border-radius: 100%;\n      position: relative;\n    }\n</style>\n<body style=\"padding: 80px;\">\n    <div class=\"yin-yang\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/tNuqC0-image-20210415174858818.png\" alt=\"image-20210415174858818\" style=\"zoom:50%;\" />\n\n然后画一个黑色的鱼头，白色眼睛。\n\n```\n<style type=\"text/css\">\n  .yin-yang {\n      width: 96px;\n      box-sizing: content-box;\n      height: 48px;\n      background: #fff;\n      border-color: #333;\n      border-style: solid;\n      border-width: 1px 1px 50px 1px;\n      border-radius: 100%;\n      position: relative;\n    }\n    .yin-yang:before {\n      content: \"\";\n      position: absolute;\n      top: 50%;\n      left: 0;\n      background: #fff;\n      border: 18px solid #333;\n      border-radius: 100%;\n      width: 12px;\n      height: 12px;\n      box-sizing: content-box;\n    }\n</style>\n<body style=\"padding: 80px;\">\n    <div class=\"yin-yang\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/R1KR1q-image-20210415175018831.png\" alt=\"image-20210415175018831\" style=\"zoom:50%;\" />\n\n最后画一个白色鱼头，黑色眼睛：\n\n```\n<style type=\"text/css\">\n  .yin-yang {\n      width: 96px;\n      box-sizing: content-box;\n      height: 48px;\n      background: #fff;\n      border-color: #333;\n      border-style: solid;\n      border-width: 1px 1px 50px 1px;\n      border-radius: 100%;\n      position: relative;\n    }\n    .yin-yang:before {\n      content: \"\";\n      position: absolute;\n      top: 50%;\n      left: 0;\n      background: #fff;\n      border: 18px solid #333;\n      border-radius: 100%;\n      width: 12px;\n      height: 12px;\n      box-sizing: content-box;\n    }\n    .yin-yang:after {\n      content: \"\";\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      background: #333;\n      border: 18px solid #fff;\n      border-radius: 100%;\n      width: 12px;\n      height: 12px;\n      box-sizing: content-box;\n    }\n</style>\n<body style=\"padding: 80px;\">\n    <div class=\"yin-yang\"></div>\n</body>\n```\n\n<img src=\"https://img.showydream.com/img/jFgYyG-image-20210415175131227.png\" alt=\"image-20210415175131227\" style=\"zoom:50%;\" />\n\n### 最后\n\n祝大家看的开心，喜欢帮忙点个关注呀\n","slug":"CSS画图大法","published":1,"updated":"2021-11-08T06:33:26.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62cs000erify139pg5c7","content":"<h3 id=\"用css画一个三角形\"><a href=\"#用css画一个三角形\" class=\"headerlink\" title=\"用css画一个三角形\"></a>用css画一个三角形</h3><p>思路：把div的宽和高都设为0，然后设置四个border的颜色。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.triangle</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid blue;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid red;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid yellow;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 40px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;triangle&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/5DpIXX-image-20210415154000125.png\" alt=\"image-20210415154000125\" style=\"zoom:50%;\" />\n\n<p>然后用css的transparent属性把其他三个三角的颜色变透明，这样我们就得到一个三角形了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.triangle</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border</span>: <span class=\"number\">50px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 40px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;triangle&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/ebrrvl-image-20210415154229146.png\" alt=\"image-20210415154229146\" style=\"zoom:50%;\" />\n\n<p>如果下面的bottom宽一点，三角形就会变尖</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.triangle</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border</span>: <span class=\"number\">50px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-bottom</span>: <span class=\"number\">90px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 40px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;triangle&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/fBo0xT-image-20210415154422217.png\" alt=\"image-20210415154422217\" style=\"zoom:50%;\" />\n\n<p>如果想要一个空心的三角形，可以在后面加一个伪类：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.triangle</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border</span>: <span class=\"number\">50px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.triangle</span>:after&#123;</span></span><br><span class=\"line\"><span class=\"css\">        content: <span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border</span>: <span class=\"number\">40px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-bottom</span>: <span class=\"number\">40px</span> solid <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">right</span>: -<span class=\"number\">40px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">top</span>: -<span class=\"number\">33px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 40px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;triangle&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/eNfspe-image-20210415155254357.png\" alt=\"image-20210415155254357\" style=\"zoom:50%;\" />\n\n<p>画完三角形，有点意犹未尽，那么问题来了，如何用css画其他的几何图形？</p>\n<h3 id=\"用css画一个平行四边形\"><a href=\"#用css画一个平行四边形\" class=\"headerlink\" title=\"用css画一个平行四边形\"></a>用css画一个平行四边形</h3><p>画平行四边形的思路跟画三角形有点不一样，这时候我们用到了<strong>CSS</strong>的<strong>transform</strong>的<strong>skew</strong>方法。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/skew()\">在这里</a>看MDN的文档</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.parallelogram</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">skew</span>(<span class=\"number\">25deg</span>);</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">background</span>: green;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 40px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parallelogram&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/ZVGOFO-image-20210415162035076.png\" alt=\"image-20210415162035076\" style=\"zoom:50%;\" />\n\n<h3 id=\"用CSS画一个梯形\"><a href=\"#用CSS画一个梯形\" class=\"headerlink\" title=\"用CSS画一个梯形\"></a>用CSS画一个梯形</h3><p>画梯形的思路跟画三角形一样，区别是给div加一点宽度：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.trapezoid</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border</span>: <span class=\"number\">50px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 40px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;trapezoid&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/Aw1RR6-image-20210415162554039.png\" alt=\"image-20210415162554039\" style=\"zoom:50%;\" />\n\n<h3 id=\"用CSS画一个六角形\"><a href=\"#用CSS画一个六角形\" class=\"headerlink\" title=\"用CSS画一个六角形\"></a>用CSS画一个六角形</h3><p>画六角形的思路还是用三角形的方式，在伪类里画一个倒三角形，然后用绝对定位把伪类放到合适的位置。</p>\n<p>点歌：六等星の夜</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.star</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border</span>: <span class=\"number\">60px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-bottom</span>: <span class=\"number\">100px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.star</span>:after &#123;</span></span><br><span class=\"line\"><span class=\"css\">        content: <span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"css\">    \t\t<span class=\"attribute\">border</span>: <span class=\"number\">60px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">    \t\t<span class=\"attribute\">border-top</span>: <span class=\"number\">100px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">    \t\t<span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"css\">    \t\t<span class=\"attribute\">right</span>: -<span class=\"number\">60px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    \t\t<span class=\"attribute\">top</span>: <span class=\"number\">33px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 40px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;star&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/yYRJoJ-image-20210415163151870.png\" alt=\"image-20210415163151870\" style=\"zoom:50%;\" />\n\n<h3 id=\"用CSS画一个五角星\"><a href=\"#用CSS画一个五角星\" class=\"headerlink\" title=\"用CSS画一个五角星\"></a>用CSS画一个五角星</h3><p>画五角星的思路和画六角形一样，区别是一个伪类不够用了，这回before也用上，还有就是需要用到transform的rotate()函数。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/rotate()\">MDN文档</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.star-five</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-right</span>: <span class=\"number\">100px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-bottom</span>: <span class=\"number\">70px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-left</span>: <span class=\"number\">100px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">35deg</span>);</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.star-five</span>:before &#123;</span></span><br><span class=\"line\"><span class=\"css\">      border-bottom: <span class=\"number\">80px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-left</span>: <span class=\"number\">30px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-right</span>: <span class=\"number\">30px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">top</span>: -<span class=\"number\">45px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">left</span>: -<span class=\"number\">65px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(-<span class=\"number\">35deg</span>);</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.star-five</span>:after &#123;</span></span><br><span class=\"line\"><span class=\"css\">      position: absolute;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">display</span>: block;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">color</span>: green;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">top</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">left</span>: -<span class=\"number\">105px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-right</span>: <span class=\"number\">100px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-bottom</span>: <span class=\"number\">70px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-left</span>: <span class=\"number\">100px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(-<span class=\"number\">70deg</span>);</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 80px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;star-five&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/73GW5b-image-20210415164731705.png\" alt=\"image-20210415164731705\" style=\"zoom:50%;\" />\n\n<h3 id=\"用CSS画一个扇形\"><a href=\"#用CSS画一个扇形\" class=\"headerlink\" title=\"用CSS画一个扇形\"></a>用CSS画一个扇形</h3><p>思路如上，话不多说，直接上代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.sector</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-right</span>: <span class=\"number\">60px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-top</span>: <span class=\"number\">60px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-left</span>: <span class=\"number\">60px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-bottom</span>: <span class=\"number\">60px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-top-left-radius</span>: <span class=\"number\">60px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-top-right-radius</span>: <span class=\"number\">60px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-bottom-left-radius</span>: <span class=\"number\">60px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-bottom-right-radius</span>: <span class=\"number\">60px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 80px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sector&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>几何图形的练习到此结束，我们发现带角的这种几何图形都可以用border去画出来，主要是思路灵活一点，脑洞大一点就可以了。下面我们玩儿点花的</p>\n<h3 id=\"用CSS画一个月亮\"><a href=\"#用CSS画一个月亮\" class=\"headerlink\" title=\"用CSS画一个月亮\"></a>用CSS画一个月亮</h3><p>这回用到了新思路：<code>box-shadow</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">   <span class=\"selector-class\">.moon</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">box-shadow</span>: <span class=\"number\">15px</span> <span class=\"number\">15px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> green;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 80px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;moon&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/LPTTTQ-image-20210415171918291.png\" alt=\"image-20210415171918291\" style=\"zoom:50%;\" />\n\n<h3 id=\"用css画一个小心心\"><a href=\"#用css画一个小心心\" class=\"headerlink\" title=\"用css画一个小心心\"></a>用css画一个小心心</h3><p>画小心心的思路与上面画几何图形类似，区别是这回不用border了，先画一个头部是圆形，底部是方形的半颗心，并将它旋转45度</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.heart</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.heart</span>:before &#123;</span></span><br><span class=\"line\"><span class=\"css\">      position: absolute;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">left</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">background</span>: red;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-radius</span>: <span class=\"number\">50px</span> <span class=\"number\">50px</span> <span class=\"number\">0</span> <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(-<span class=\"number\">45deg</span>);</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">transform-origin</span>: <span class=\"number\">0</span> <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 80px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;heart&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/5V2OzZ-image-20210415170946156.png\" alt=\"image-20210415170946156\" style=\"zoom:50%;\" />\n\n<p>然后在画一个同样的图形，反方向旋转45度。我们的小心心就画好啦。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">  \t<span class=\"selector-class\">.heart</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.heart</span>:before, .heart:after&#123;</span></span><br><span class=\"line\"><span class=\"css\">      position: absolute;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">left</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">background</span>: red;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-radius</span>: <span class=\"number\">50px</span> <span class=\"number\">50px</span> <span class=\"number\">0</span> <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(-<span class=\"number\">45deg</span>);</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">transform-origin</span>: <span class=\"number\">0</span> <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.heart</span>:after &#123;</span></span><br><span class=\"line\"><span class=\"css\">      left: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">45deg</span>);</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">transform-origin</span>: <span class=\"number\">100%</span> <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 80px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;heart&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/yBp2AP-image-20210415171126723.png\" alt=\"image-20210415171126723\" style=\"zoom:50%;\" />\n\n<h3 id=\"用CSS画一个阴阳鱼\"><a href=\"#用CSS画一个阴阳鱼\" class=\"headerlink\" title=\"用CSS画一个阴阳鱼\"></a>用CSS画一个阴阳鱼</h3><p>这个思路就比较好玩儿了，还是用到了伪类叠加的方式。首先画一个半边黑半边白的圆形。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.yin-yang</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">width</span>: <span class=\"number\">96px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">box-sizing</span>: content-box;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">height</span>: <span class=\"number\">48px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-color</span>: <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-style</span>: solid;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-width</span>: <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">50px</span> <span class=\"number\">1px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-radius</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 80px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;yin-yang&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/tNuqC0-image-20210415174858818.png\" alt=\"image-20210415174858818\" style=\"zoom:50%;\" />\n\n<p>然后画一个黑色的鱼头，白色眼睛。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">  .yin-yang &#123;</span><br><span class=\"line\">      width: 96px;</span><br><span class=\"line\">      box-sizing: content-box;</span><br><span class=\"line\">      height: 48px;</span><br><span class=\"line\">      background: #fff;</span><br><span class=\"line\">      border-color: #333;</span><br><span class=\"line\">      border-style: solid;</span><br><span class=\"line\">      border-width: 1px 1px 50px 1px;</span><br><span class=\"line\">      border-radius: 100%;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .yin-yang:before &#123;</span><br><span class=\"line\">      content: &quot;&quot;;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      top: 50%;</span><br><span class=\"line\">      left: 0;</span><br><span class=\"line\">      background: #fff;</span><br><span class=\"line\">      border: 18px solid #333;</span><br><span class=\"line\">      border-radius: 100%;</span><br><span class=\"line\">      width: 12px;</span><br><span class=\"line\">      height: 12px;</span><br><span class=\"line\">      box-sizing: content-box;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;body style=&quot;padding: 80px;&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;yin-yang&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/R1KR1q-image-20210415175018831.png\" alt=\"image-20210415175018831\" style=\"zoom:50%;\" />\n\n<p>最后画一个白色鱼头，黑色眼睛：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">  .yin-yang &#123;</span><br><span class=\"line\">      width: 96px;</span><br><span class=\"line\">      box-sizing: content-box;</span><br><span class=\"line\">      height: 48px;</span><br><span class=\"line\">      background: #fff;</span><br><span class=\"line\">      border-color: #333;</span><br><span class=\"line\">      border-style: solid;</span><br><span class=\"line\">      border-width: 1px 1px 50px 1px;</span><br><span class=\"line\">      border-radius: 100%;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .yin-yang:before &#123;</span><br><span class=\"line\">      content: &quot;&quot;;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      top: 50%;</span><br><span class=\"line\">      left: 0;</span><br><span class=\"line\">      background: #fff;</span><br><span class=\"line\">      border: 18px solid #333;</span><br><span class=\"line\">      border-radius: 100%;</span><br><span class=\"line\">      width: 12px;</span><br><span class=\"line\">      height: 12px;</span><br><span class=\"line\">      box-sizing: content-box;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .yin-yang:after &#123;</span><br><span class=\"line\">      content: &quot;&quot;;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      top: 50%;</span><br><span class=\"line\">      left: 50%;</span><br><span class=\"line\">      background: #333;</span><br><span class=\"line\">      border: 18px solid #fff;</span><br><span class=\"line\">      border-radius: 100%;</span><br><span class=\"line\">      width: 12px;</span><br><span class=\"line\">      height: 12px;</span><br><span class=\"line\">      box-sizing: content-box;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;body style=&quot;padding: 80px;&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;yin-yang&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/jFgYyG-image-20210415175131227.png\" alt=\"image-20210415175131227\" style=\"zoom:50%;\" />\n\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>祝大家看的开心，喜欢帮忙点个关注呀</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"用css画一个三角形\"><a href=\"#用css画一个三角形\" class=\"headerlink\" title=\"用css画一个三角形\"></a>用css画一个三角形</h3><p>思路：把div的宽和高都设为0，然后设置四个border的颜色。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.triangle</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid blue;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid red;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid yellow;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 40px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;triangle&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/5DpIXX-image-20210415154000125.png\" alt=\"image-20210415154000125\" style=\"zoom:50%;\" />\n\n<p>然后用css的transparent属性把其他三个三角的颜色变透明，这样我们就得到一个三角形了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.triangle</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border</span>: <span class=\"number\">50px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 40px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;triangle&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/ebrrvl-image-20210415154229146.png\" alt=\"image-20210415154229146\" style=\"zoom:50%;\" />\n\n<p>如果下面的bottom宽一点，三角形就会变尖</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.triangle</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border</span>: <span class=\"number\">50px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-bottom</span>: <span class=\"number\">90px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 40px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;triangle&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/fBo0xT-image-20210415154422217.png\" alt=\"image-20210415154422217\" style=\"zoom:50%;\" />\n\n<p>如果想要一个空心的三角形，可以在后面加一个伪类：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.triangle</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border</span>: <span class=\"number\">50px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.triangle</span>:after&#123;</span></span><br><span class=\"line\"><span class=\"css\">        content: <span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border</span>: <span class=\"number\">40px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-bottom</span>: <span class=\"number\">40px</span> solid <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">right</span>: -<span class=\"number\">40px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">top</span>: -<span class=\"number\">33px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 40px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;triangle&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/eNfspe-image-20210415155254357.png\" alt=\"image-20210415155254357\" style=\"zoom:50%;\" />\n\n<p>画完三角形，有点意犹未尽，那么问题来了，如何用css画其他的几何图形？</p>\n<h3 id=\"用css画一个平行四边形\"><a href=\"#用css画一个平行四边形\" class=\"headerlink\" title=\"用css画一个平行四边形\"></a>用css画一个平行四边形</h3><p>画平行四边形的思路跟画三角形有点不一样，这时候我们用到了<strong>CSS</strong>的<strong>transform</strong>的<strong>skew</strong>方法。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/skew()\">在这里</a>看MDN的文档</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.parallelogram</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">skew</span>(<span class=\"number\">25deg</span>);</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">background</span>: green;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 40px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parallelogram&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/ZVGOFO-image-20210415162035076.png\" alt=\"image-20210415162035076\" style=\"zoom:50%;\" />\n\n<h3 id=\"用CSS画一个梯形\"><a href=\"#用CSS画一个梯形\" class=\"headerlink\" title=\"用CSS画一个梯形\"></a>用CSS画一个梯形</h3><p>画梯形的思路跟画三角形一样，区别是给div加一点宽度：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.trapezoid</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border</span>: <span class=\"number\">50px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 40px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;trapezoid&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/Aw1RR6-image-20210415162554039.png\" alt=\"image-20210415162554039\" style=\"zoom:50%;\" />\n\n<h3 id=\"用CSS画一个六角形\"><a href=\"#用CSS画一个六角形\" class=\"headerlink\" title=\"用CSS画一个六角形\"></a>用CSS画一个六角形</h3><p>画六角形的思路还是用三角形的方式，在伪类里画一个倒三角形，然后用绝对定位把伪类放到合适的位置。</p>\n<p>点歌：六等星の夜</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.star</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border</span>: <span class=\"number\">60px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-bottom</span>: <span class=\"number\">100px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.star</span>:after &#123;</span></span><br><span class=\"line\"><span class=\"css\">        content: <span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"css\">    \t\t<span class=\"attribute\">border</span>: <span class=\"number\">60px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">    \t\t<span class=\"attribute\">border-top</span>: <span class=\"number\">100px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">    \t\t<span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"css\">    \t\t<span class=\"attribute\">right</span>: -<span class=\"number\">60px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    \t\t<span class=\"attribute\">top</span>: <span class=\"number\">33px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 40px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;star&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/yYRJoJ-image-20210415163151870.png\" alt=\"image-20210415163151870\" style=\"zoom:50%;\" />\n\n<h3 id=\"用CSS画一个五角星\"><a href=\"#用CSS画一个五角星\" class=\"headerlink\" title=\"用CSS画一个五角星\"></a>用CSS画一个五角星</h3><p>画五角星的思路和画六角形一样，区别是一个伪类不够用了，这回before也用上，还有就是需要用到transform的rotate()函数。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/rotate()\">MDN文档</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.star-five</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-right</span>: <span class=\"number\">100px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-bottom</span>: <span class=\"number\">70px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-left</span>: <span class=\"number\">100px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">35deg</span>);</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.star-five</span>:before &#123;</span></span><br><span class=\"line\"><span class=\"css\">      border-bottom: <span class=\"number\">80px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-left</span>: <span class=\"number\">30px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-right</span>: <span class=\"number\">30px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">top</span>: -<span class=\"number\">45px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">left</span>: -<span class=\"number\">65px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(-<span class=\"number\">35deg</span>);</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.star-five</span>:after &#123;</span></span><br><span class=\"line\"><span class=\"css\">      position: absolute;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">display</span>: block;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">color</span>: green;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">top</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">left</span>: -<span class=\"number\">105px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-right</span>: <span class=\"number\">100px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-bottom</span>: <span class=\"number\">70px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-left</span>: <span class=\"number\">100px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(-<span class=\"number\">70deg</span>);</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 80px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;star-five&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/73GW5b-image-20210415164731705.png\" alt=\"image-20210415164731705\" style=\"zoom:50%;\" />\n\n<h3 id=\"用CSS画一个扇形\"><a href=\"#用CSS画一个扇形\" class=\"headerlink\" title=\"用CSS画一个扇形\"></a>用CSS画一个扇形</h3><p>思路如上，话不多说，直接上代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.sector</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-right</span>: <span class=\"number\">60px</span> solid transparent;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-top</span>: <span class=\"number\">60px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-left</span>: <span class=\"number\">60px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-bottom</span>: <span class=\"number\">60px</span> solid green;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-top-left-radius</span>: <span class=\"number\">60px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-top-right-radius</span>: <span class=\"number\">60px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-bottom-left-radius</span>: <span class=\"number\">60px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-bottom-right-radius</span>: <span class=\"number\">60px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 80px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sector&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>几何图形的练习到此结束，我们发现带角的这种几何图形都可以用border去画出来，主要是思路灵活一点，脑洞大一点就可以了。下面我们玩儿点花的</p>\n<h3 id=\"用CSS画一个月亮\"><a href=\"#用CSS画一个月亮\" class=\"headerlink\" title=\"用CSS画一个月亮\"></a>用CSS画一个月亮</h3><p>这回用到了新思路：<code>box-shadow</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">   <span class=\"selector-class\">.moon</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">box-shadow</span>: <span class=\"number\">15px</span> <span class=\"number\">15px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> green;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 80px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;moon&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/LPTTTQ-image-20210415171918291.png\" alt=\"image-20210415171918291\" style=\"zoom:50%;\" />\n\n<h3 id=\"用css画一个小心心\"><a href=\"#用css画一个小心心\" class=\"headerlink\" title=\"用css画一个小心心\"></a>用css画一个小心心</h3><p>画小心心的思路与上面画几何图形类似，区别是这回不用border了，先画一个头部是圆形，底部是方形的半颗心，并将它旋转45度</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.heart</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.heart</span>:before &#123;</span></span><br><span class=\"line\"><span class=\"css\">      position: absolute;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">left</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">background</span>: red;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-radius</span>: <span class=\"number\">50px</span> <span class=\"number\">50px</span> <span class=\"number\">0</span> <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(-<span class=\"number\">45deg</span>);</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">transform-origin</span>: <span class=\"number\">0</span> <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 80px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;heart&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/5V2OzZ-image-20210415170946156.png\" alt=\"image-20210415170946156\" style=\"zoom:50%;\" />\n\n<p>然后在画一个同样的图形，反方向旋转45度。我们的小心心就画好啦。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">  \t<span class=\"selector-class\">.heart</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.heart</span>:before, .heart:after&#123;</span></span><br><span class=\"line\"><span class=\"css\">      position: absolute;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">left</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">background</span>: red;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-radius</span>: <span class=\"number\">50px</span> <span class=\"number\">50px</span> <span class=\"number\">0</span> <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(-<span class=\"number\">45deg</span>);</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">transform-origin</span>: <span class=\"number\">0</span> <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.heart</span>:after &#123;</span></span><br><span class=\"line\"><span class=\"css\">      left: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">45deg</span>);</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">transform-origin</span>: <span class=\"number\">100%</span> <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 80px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;heart&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/yBp2AP-image-20210415171126723.png\" alt=\"image-20210415171126723\" style=\"zoom:50%;\" />\n\n<h3 id=\"用CSS画一个阴阳鱼\"><a href=\"#用CSS画一个阴阳鱼\" class=\"headerlink\" title=\"用CSS画一个阴阳鱼\"></a>用CSS画一个阴阳鱼</h3><p>这个思路就比较好玩儿了，还是用到了伪类叠加的方式。首先画一个半边黑半边白的圆形。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.yin-yang</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">width</span>: <span class=\"number\">96px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">box-sizing</span>: content-box;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">height</span>: <span class=\"number\">48px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-color</span>: <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-style</span>: solid;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-width</span>: <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">50px</span> <span class=\"number\">1px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">border-radius</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding: 80px;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;yin-yang&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/tNuqC0-image-20210415174858818.png\" alt=\"image-20210415174858818\" style=\"zoom:50%;\" />\n\n<p>然后画一个黑色的鱼头，白色眼睛。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">  .yin-yang &#123;</span><br><span class=\"line\">      width: 96px;</span><br><span class=\"line\">      box-sizing: content-box;</span><br><span class=\"line\">      height: 48px;</span><br><span class=\"line\">      background: #fff;</span><br><span class=\"line\">      border-color: #333;</span><br><span class=\"line\">      border-style: solid;</span><br><span class=\"line\">      border-width: 1px 1px 50px 1px;</span><br><span class=\"line\">      border-radius: 100%;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .yin-yang:before &#123;</span><br><span class=\"line\">      content: &quot;&quot;;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      top: 50%;</span><br><span class=\"line\">      left: 0;</span><br><span class=\"line\">      background: #fff;</span><br><span class=\"line\">      border: 18px solid #333;</span><br><span class=\"line\">      border-radius: 100%;</span><br><span class=\"line\">      width: 12px;</span><br><span class=\"line\">      height: 12px;</span><br><span class=\"line\">      box-sizing: content-box;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;body style=&quot;padding: 80px;&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;yin-yang&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/R1KR1q-image-20210415175018831.png\" alt=\"image-20210415175018831\" style=\"zoom:50%;\" />\n\n<p>最后画一个白色鱼头，黑色眼睛：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">  .yin-yang &#123;</span><br><span class=\"line\">      width: 96px;</span><br><span class=\"line\">      box-sizing: content-box;</span><br><span class=\"line\">      height: 48px;</span><br><span class=\"line\">      background: #fff;</span><br><span class=\"line\">      border-color: #333;</span><br><span class=\"line\">      border-style: solid;</span><br><span class=\"line\">      border-width: 1px 1px 50px 1px;</span><br><span class=\"line\">      border-radius: 100%;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .yin-yang:before &#123;</span><br><span class=\"line\">      content: &quot;&quot;;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      top: 50%;</span><br><span class=\"line\">      left: 0;</span><br><span class=\"line\">      background: #fff;</span><br><span class=\"line\">      border: 18px solid #333;</span><br><span class=\"line\">      border-radius: 100%;</span><br><span class=\"line\">      width: 12px;</span><br><span class=\"line\">      height: 12px;</span><br><span class=\"line\">      box-sizing: content-box;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .yin-yang:after &#123;</span><br><span class=\"line\">      content: &quot;&quot;;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      top: 50%;</span><br><span class=\"line\">      left: 50%;</span><br><span class=\"line\">      background: #333;</span><br><span class=\"line\">      border: 18px solid #fff;</span><br><span class=\"line\">      border-radius: 100%;</span><br><span class=\"line\">      width: 12px;</span><br><span class=\"line\">      height: 12px;</span><br><span class=\"line\">      box-sizing: content-box;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;body style=&quot;padding: 80px;&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;yin-yang&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/jFgYyG-image-20210415175131227.png\" alt=\"image-20210415175131227\" style=\"zoom:50%;\" />\n\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>祝大家看的开心，喜欢帮忙点个关注呀</p>\n"},{"title":"JavaScript工具函数","date":"2021-05-15T16:00:00.000Z","cover":"https://img.showydream.com/img/ZrtTjb-javascript.jpg","description":"JavaScript工具函数，持续更新。","keywords":"JavaScript, function, tools","_content":"\n\n### 处理字符串中的html标签\n\n```javascript\n// 处理字符串中的html标签\nexport const escapeHtml = function (str) {\n  let temp = document.createElement(\"div\");\n  (temp.textContent != null) ? (temp.textContent = str) : (temp.innerText = str)\n  const output = temp.innerHTML\n  temp = null\n  // 用于v-html高亮过滤\n  return output\n    .replace(/@highlighted-field@/g, '<em>')\n    .replace(/@\\/highlighted-field@/g, '</em>') || ''\n}\n```\n\n### 数字转换成单位数\n\n```javascript\n//  120000 => 10万 120001 => 10万+\nexport const transformNum = (value) => {\n  if (isNaN(parseInt(value))) {\n    return 0\n  }\n  const val = parseInt(value)\n  if (val < 1000) {\n    return val\n  }\n  let fr = 1000\n  let num = 4\n  let unit = '千'\n  while (val / fr >= 1) {\n    if (val / fr < 10) {\n      break\n    }\n    fr *= 10\n    num += 1\n  }\n  switch (num) {\n    case 4:\n      unit = '千'\n      break\n    case 5:\n      unit = '万'\n      break\n    case 6:\n      unit = '0万'\n      break\n    case 7:\n      unit = '百万'\n      break\n    case 8:\n      unit = '千万'\n      break\n    case 9:\n      unit = '亿'\n      break\n    case 10:\n      unit = '0亿'\n      break\n    case 11:\n      unit = '百亿'\n      break\n    case 12:\n      unit = '千亿'\n      break\n    default:\n      break\n  }\n  return `${Math.floor(val / fr)}${unit}${val % fr > 0 ? '+' : ''}`\n}\n```\n\n### 文件大小计算\n\n```javascript\nexport const getFileSize = (value) => {\n  if (isNaN(parseInt(value))) {\n    return ''\n  }\n  const size = parseInt(value)\n\n  const num = 1024.00 // byte\n\n  if (size < num) { return size + \"B\" }\n  if (size < Math.pow(num, 2)) { return (size / num).toFixed(2) + \"K\" } // kb\n  if (size < Math.pow(num, 3)) { return (size / Math.pow(num, 2)).toFixed(2) + \"M\" } // M\n  if (size < Math.pow(num, 4)) { return (size / Math.pow(num, 3)).toFixed(2) + \"G\" } // G\n  return (size / Math.pow(num, 4)).toFixed(2) + \"T\" // T\n}\n```\n\n### 获取字符数\n\n```javascript\n// 一个中文两个字符\nexport const getByteLen = (val) => {\n  let len = 0\n  for (let i = 0; i < val.length; i++) {\n    const iLen = val.charCodeAt(i)\n    if (iLen >= 0 && iLen <= 128) {\n      len += 1\n    } else {\n      len += 2\n    }\n  }\n  return len\n}\n```\n\n### 图片url转base64\n\n```javascript\nexport const getBase64Image = (url, cb) => {\n  const image = new Image()\n  image.src = url + \"?v\" + Math.random() // 处理缓存\n  image.crossOrigin = '*' // 支持跨域\n  image.onload = () => {\n    const base64 = drawBase64Image(image)\n    cb && cb(base64)\n  }\n}\nconst drawBase64Image = (img) => {\n  const canvas = document.createElement('canvas')\n  canvas.width = img.width\n  canvas.height = img.height\n  const ctx = canvas.getContext('2d')\n  ctx.drawImage(img, 0, 0, img.width, img.height)\n  return canvas.toDataURL('image/png')\n}\n```\n\n### 复制文本\n\n```javascript\nexport const msgCopy = (value) => {\n  if (!value) {\n    console.error('无复制内容')\n    return\n  }\n  // 动态创建 textarea 标签\n  const textarea = document.createElement('textarea')\n  // 将该 textarea 设为 readonly 防止 iOS 下自动唤起键盘，同时将 textarea 移出可视区域\n  textarea.readOnly = 'readonly'\n  textarea.style.position = 'absolute'\n  textarea.style.left = '-9999px'\n  // 将要 copy 的值赋给 textarea 标签的 value 属性\n  textarea.value = value\n  // 将 textarea 插入到 body 中\n  document.body.appendChild(textarea)\n  // 选中值并复制\n  textarea.select()\n  // textarea.setSelectionRange(0, textarea.value.length);\n  const result = document.execCommand('Copy')\n  if (result) {\n    Message.success('复制成功')\n  }\n  document.body.removeChild(textarea)\n}\n```\n\n### 格式化时间\n\n```JavaScript\nexport function formatTime (time) {\n  const addZero = (m) => {\n    return m < 10 ? '0' + m : m\n  }\n  if ((`${time}`).length === 10) {\n    time = window.parseInt(time) * 1000\n  } else {\n    time = +time\n  }\n  const d = new Date(time)\n  return (\n    `${d.getFullYear()}-${addZero(d.getMonth() + 1)}-${addZero(d.getDate())} ${addZero(d.getHours())}:${addZero(d.getMinutes())}:${addZero(d.getSeconds())}`\n  )\n}\n\nexport function formatMinute (time) {\n  const addZero = (m) => {\n    return m < 10 ? '0' + m : m\n  }\n  if ((`${time}`).length === 10) {\n    time = window.parseInt(time) * 1000\n  } else {\n    time = +time\n  }\n  const d = new Date(time)\n  return (\n    `${d.getFullYear()}.${addZero(d.getMonth() + 1)}.${addZero(d.getDate())} ${addZero(d.getHours())}:${addZero(d.getMinutes())}`\n  )\n}\n\nexport const formatDate = (time) => {\n  const addZero = (m) => {\n    return m < 10 ? '0' + m : m\n  }\n  if ((`${time}`).length === 10) {\n    time = window.parseInt(time) * 1000\n  } else {\n    time = +time\n  }\n  const d = new Date(time)\n  return (\n    `${d.getFullYear()}.${addZero(d.getMonth() + 1)}.${addZero(d.getDate())}`\n  )\n}\n```\n\n","source":"_posts/JavaScript工具函数.md","raw":"---\ntitle: JavaScript工具函数\ndate: 2021-5-16 00:00:00\ncover: https://img.showydream.com/img/ZrtTjb-javascript.jpg\ndescription: JavaScript工具函数，持续更新。\nkeywords: JavaScript, function, tools\ntags: JavaScript工具函数\ncategories: \n - Javascript\n---\n\n\n### 处理字符串中的html标签\n\n```javascript\n// 处理字符串中的html标签\nexport const escapeHtml = function (str) {\n  let temp = document.createElement(\"div\");\n  (temp.textContent != null) ? (temp.textContent = str) : (temp.innerText = str)\n  const output = temp.innerHTML\n  temp = null\n  // 用于v-html高亮过滤\n  return output\n    .replace(/@highlighted-field@/g, '<em>')\n    .replace(/@\\/highlighted-field@/g, '</em>') || ''\n}\n```\n\n### 数字转换成单位数\n\n```javascript\n//  120000 => 10万 120001 => 10万+\nexport const transformNum = (value) => {\n  if (isNaN(parseInt(value))) {\n    return 0\n  }\n  const val = parseInt(value)\n  if (val < 1000) {\n    return val\n  }\n  let fr = 1000\n  let num = 4\n  let unit = '千'\n  while (val / fr >= 1) {\n    if (val / fr < 10) {\n      break\n    }\n    fr *= 10\n    num += 1\n  }\n  switch (num) {\n    case 4:\n      unit = '千'\n      break\n    case 5:\n      unit = '万'\n      break\n    case 6:\n      unit = '0万'\n      break\n    case 7:\n      unit = '百万'\n      break\n    case 8:\n      unit = '千万'\n      break\n    case 9:\n      unit = '亿'\n      break\n    case 10:\n      unit = '0亿'\n      break\n    case 11:\n      unit = '百亿'\n      break\n    case 12:\n      unit = '千亿'\n      break\n    default:\n      break\n  }\n  return `${Math.floor(val / fr)}${unit}${val % fr > 0 ? '+' : ''}`\n}\n```\n\n### 文件大小计算\n\n```javascript\nexport const getFileSize = (value) => {\n  if (isNaN(parseInt(value))) {\n    return ''\n  }\n  const size = parseInt(value)\n\n  const num = 1024.00 // byte\n\n  if (size < num) { return size + \"B\" }\n  if (size < Math.pow(num, 2)) { return (size / num).toFixed(2) + \"K\" } // kb\n  if (size < Math.pow(num, 3)) { return (size / Math.pow(num, 2)).toFixed(2) + \"M\" } // M\n  if (size < Math.pow(num, 4)) { return (size / Math.pow(num, 3)).toFixed(2) + \"G\" } // G\n  return (size / Math.pow(num, 4)).toFixed(2) + \"T\" // T\n}\n```\n\n### 获取字符数\n\n```javascript\n// 一个中文两个字符\nexport const getByteLen = (val) => {\n  let len = 0\n  for (let i = 0; i < val.length; i++) {\n    const iLen = val.charCodeAt(i)\n    if (iLen >= 0 && iLen <= 128) {\n      len += 1\n    } else {\n      len += 2\n    }\n  }\n  return len\n}\n```\n\n### 图片url转base64\n\n```javascript\nexport const getBase64Image = (url, cb) => {\n  const image = new Image()\n  image.src = url + \"?v\" + Math.random() // 处理缓存\n  image.crossOrigin = '*' // 支持跨域\n  image.onload = () => {\n    const base64 = drawBase64Image(image)\n    cb && cb(base64)\n  }\n}\nconst drawBase64Image = (img) => {\n  const canvas = document.createElement('canvas')\n  canvas.width = img.width\n  canvas.height = img.height\n  const ctx = canvas.getContext('2d')\n  ctx.drawImage(img, 0, 0, img.width, img.height)\n  return canvas.toDataURL('image/png')\n}\n```\n\n### 复制文本\n\n```javascript\nexport const msgCopy = (value) => {\n  if (!value) {\n    console.error('无复制内容')\n    return\n  }\n  // 动态创建 textarea 标签\n  const textarea = document.createElement('textarea')\n  // 将该 textarea 设为 readonly 防止 iOS 下自动唤起键盘，同时将 textarea 移出可视区域\n  textarea.readOnly = 'readonly'\n  textarea.style.position = 'absolute'\n  textarea.style.left = '-9999px'\n  // 将要 copy 的值赋给 textarea 标签的 value 属性\n  textarea.value = value\n  // 将 textarea 插入到 body 中\n  document.body.appendChild(textarea)\n  // 选中值并复制\n  textarea.select()\n  // textarea.setSelectionRange(0, textarea.value.length);\n  const result = document.execCommand('Copy')\n  if (result) {\n    Message.success('复制成功')\n  }\n  document.body.removeChild(textarea)\n}\n```\n\n### 格式化时间\n\n```JavaScript\nexport function formatTime (time) {\n  const addZero = (m) => {\n    return m < 10 ? '0' + m : m\n  }\n  if ((`${time}`).length === 10) {\n    time = window.parseInt(time) * 1000\n  } else {\n    time = +time\n  }\n  const d = new Date(time)\n  return (\n    `${d.getFullYear()}-${addZero(d.getMonth() + 1)}-${addZero(d.getDate())} ${addZero(d.getHours())}:${addZero(d.getMinutes())}:${addZero(d.getSeconds())}`\n  )\n}\n\nexport function formatMinute (time) {\n  const addZero = (m) => {\n    return m < 10 ? '0' + m : m\n  }\n  if ((`${time}`).length === 10) {\n    time = window.parseInt(time) * 1000\n  } else {\n    time = +time\n  }\n  const d = new Date(time)\n  return (\n    `${d.getFullYear()}.${addZero(d.getMonth() + 1)}.${addZero(d.getDate())} ${addZero(d.getHours())}:${addZero(d.getMinutes())}`\n  )\n}\n\nexport const formatDate = (time) => {\n  const addZero = (m) => {\n    return m < 10 ? '0' + m : m\n  }\n  if ((`${time}`).length === 10) {\n    time = window.parseInt(time) * 1000\n  } else {\n    time = +time\n  }\n  const d = new Date(time)\n  return (\n    `${d.getFullYear()}.${addZero(d.getMonth() + 1)}.${addZero(d.getDate())}`\n  )\n}\n```\n\n","slug":"JavaScript工具函数","published":1,"updated":"2021-11-08T06:40:03.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62ct000frify3b977jgq","content":"<h3 id=\"处理字符串中的html标签\"><a href=\"#处理字符串中的html标签\" class=\"headerlink\" title=\"处理字符串中的html标签\"></a>处理字符串中的html标签</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理字符串中的html标签</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> escapeHtml = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> temp = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">  (temp.textContent != <span class=\"literal\">null</span>) ? (temp.textContent = str) : (temp.innerText = str)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> output = temp.innerHTML</span><br><span class=\"line\">  temp = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"comment\">// 用于v-html高亮过滤</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> output</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/@highlighted-field@/g</span>, <span class=\"string\">&#x27;&lt;em&gt;&#x27;</span>)</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/@\\/highlighted-field@/g</span>, <span class=\"string\">&#x27;&lt;/em&gt;&#x27;</span>) || <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数字转换成单位数\"><a href=\"#数字转换成单位数\" class=\"headerlink\" title=\"数字转换成单位数\"></a>数字转换成单位数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  120000 =&gt; 10万 120001 =&gt; 10万+</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> transformNum = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(<span class=\"built_in\">parseInt</span>(value))) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> val = <span class=\"built_in\">parseInt</span>(value)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (val &lt; <span class=\"number\">1000</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fr = <span class=\"number\">1000</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"number\">4</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> unit = <span class=\"string\">&#x27;千&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (val / fr &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val / fr &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fr *= <span class=\"number\">10</span></span><br><span class=\"line\">    num += <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (num) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">      unit = <span class=\"string\">&#x27;千&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">      unit = <span class=\"string\">&#x27;万&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">      unit = <span class=\"string\">&#x27;0万&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">      unit = <span class=\"string\">&#x27;百万&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">      unit = <span class=\"string\">&#x27;千万&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">9</span>:</span><br><span class=\"line\">      unit = <span class=\"string\">&#x27;亿&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">10</span>:</span><br><span class=\"line\">      unit = <span class=\"string\">&#x27;0亿&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">11</span>:</span><br><span class=\"line\">      unit = <span class=\"string\">&#x27;百亿&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">12</span>:</span><br><span class=\"line\">      unit = <span class=\"string\">&#x27;千亿&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.floor(val / fr)&#125;</span><span class=\"subst\">$&#123;unit&#125;</span><span class=\"subst\">$&#123;val % fr &gt; <span class=\"number\">0</span> ? <span class=\"string\">&#x27;+&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件大小计算\"><a href=\"#文件大小计算\" class=\"headerlink\" title=\"文件大小计算\"></a>文件大小计算</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getFileSize = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(<span class=\"built_in\">parseInt</span>(value))) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> size = <span class=\"built_in\">parseInt</span>(value)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> num = <span class=\"number\">1024.00</span> <span class=\"comment\">// byte</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (size &lt; num) &#123; <span class=\"keyword\">return</span> size + <span class=\"string\">&quot;B&quot;</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (size &lt; <span class=\"built_in\">Math</span>.pow(num, <span class=\"number\">2</span>)) &#123; <span class=\"keyword\">return</span> (size / num).toFixed(<span class=\"number\">2</span>) + <span class=\"string\">&quot;K&quot;</span> &#125; <span class=\"comment\">// kb</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (size &lt; <span class=\"built_in\">Math</span>.pow(num, <span class=\"number\">3</span>)) &#123; <span class=\"keyword\">return</span> (size / <span class=\"built_in\">Math</span>.pow(num, <span class=\"number\">2</span>)).toFixed(<span class=\"number\">2</span>) + <span class=\"string\">&quot;M&quot;</span> &#125; <span class=\"comment\">// M</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (size &lt; <span class=\"built_in\">Math</span>.pow(num, <span class=\"number\">4</span>)) &#123; <span class=\"keyword\">return</span> (size / <span class=\"built_in\">Math</span>.pow(num, <span class=\"number\">3</span>)).toFixed(<span class=\"number\">2</span>) + <span class=\"string\">&quot;G&quot;</span> &#125; <span class=\"comment\">// G</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (size / <span class=\"built_in\">Math</span>.pow(num, <span class=\"number\">4</span>)).toFixed(<span class=\"number\">2</span>) + <span class=\"string\">&quot;T&quot;</span> <span class=\"comment\">// T</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取字符数\"><a href=\"#获取字符数\" class=\"headerlink\" title=\"获取字符数\"></a>获取字符数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个中文两个字符</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getByteLen = <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; val.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> iLen = val.charCodeAt(i)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iLen &gt;= <span class=\"number\">0</span> &amp;&amp; iLen &lt;= <span class=\"number\">128</span>) &#123;</span><br><span class=\"line\">      len += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      len += <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> len</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图片url转base64\"><a href=\"#图片url转base64\" class=\"headerlink\" title=\"图片url转base64\"></a>图片url转base64</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getBase64Image = <span class=\"function\">(<span class=\"params\">url, cb</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\">  image.src = url + <span class=\"string\">&quot;?v&quot;</span> + <span class=\"built_in\">Math</span>.random() <span class=\"comment\">// 处理缓存</span></span><br><span class=\"line\">  image.crossOrigin = <span class=\"string\">&#x27;*&#x27;</span> <span class=\"comment\">// 支持跨域</span></span><br><span class=\"line\">  image.onload = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> base64 = drawBase64Image(image)</span><br><span class=\"line\">    cb &amp;&amp; cb(base64)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> drawBase64Image = <span class=\"function\">(<span class=\"params\">img</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\">  canvas.width = img.width</span><br><span class=\"line\">  canvas.height = img.height</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">&#x27;2d&#x27;</span>)</span><br><span class=\"line\">  ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, img.width, img.height)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> canvas.toDataURL(<span class=\"string\">&#x27;image/png&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"复制文本\"><a href=\"#复制文本\" class=\"headerlink\" title=\"复制文本\"></a>复制文本</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> msgCopy = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">&#x27;无复制内容&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 动态创建 textarea 标签</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> textarea = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;textarea&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 将该 textarea 设为 readonly 防止 iOS 下自动唤起键盘，同时将 textarea 移出可视区域</span></span><br><span class=\"line\">  textarea.readOnly = <span class=\"string\">&#x27;readonly&#x27;</span></span><br><span class=\"line\">  textarea.style.position = <span class=\"string\">&#x27;absolute&#x27;</span></span><br><span class=\"line\">  textarea.style.left = <span class=\"string\">&#x27;-9999px&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// 将要 copy 的值赋给 textarea 标签的 value 属性</span></span><br><span class=\"line\">  textarea.value = value</span><br><span class=\"line\">  <span class=\"comment\">// 将 textarea 插入到 body 中</span></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(textarea)</span><br><span class=\"line\">  <span class=\"comment\">// 选中值并复制</span></span><br><span class=\"line\">  textarea.select()</span><br><span class=\"line\">  <span class=\"comment\">// textarea.setSelectionRange(0, textarea.value.length);</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"built_in\">document</span>.execCommand(<span class=\"string\">&#x27;Copy&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">    Message.success(<span class=\"string\">&#x27;复制成功&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.removeChild(textarea)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"格式化时间\"><a href=\"#格式化时间\" class=\"headerlink\" title=\"格式化时间\"></a>格式化时间</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatTime</span> (<span class=\"params\">time</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> addZero = <span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + m : m</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((<span class=\"string\">`<span class=\"subst\">$&#123;time&#125;</span>`</span>).length === <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    time = <span class=\"built_in\">window</span>.parseInt(time) * <span class=\"number\">1000</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    time = +time</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(time)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"string\">`<span class=\"subst\">$&#123;d.getFullYear()&#125;</span>-<span class=\"subst\">$&#123;addZero(d.getMonth() + <span class=\"number\">1</span>)&#125;</span>-<span class=\"subst\">$&#123;addZero(d.getDate())&#125;</span> <span class=\"subst\">$&#123;addZero(d.getHours())&#125;</span>:<span class=\"subst\">$&#123;addZero(d.getMinutes())&#125;</span>:<span class=\"subst\">$&#123;addZero(d.getSeconds())&#125;</span>`</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatMinute</span> (<span class=\"params\">time</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> addZero = <span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + m : m</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((<span class=\"string\">`<span class=\"subst\">$&#123;time&#125;</span>`</span>).length === <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    time = <span class=\"built_in\">window</span>.parseInt(time) * <span class=\"number\">1000</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    time = +time</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(time)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"string\">`<span class=\"subst\">$&#123;d.getFullYear()&#125;</span>.<span class=\"subst\">$&#123;addZero(d.getMonth() + <span class=\"number\">1</span>)&#125;</span>.<span class=\"subst\">$&#123;addZero(d.getDate())&#125;</span> <span class=\"subst\">$&#123;addZero(d.getHours())&#125;</span>:<span class=\"subst\">$&#123;addZero(d.getMinutes())&#125;</span>`</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> formatDate = <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> addZero = <span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + m : m</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((<span class=\"string\">`<span class=\"subst\">$&#123;time&#125;</span>`</span>).length === <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    time = <span class=\"built_in\">window</span>.parseInt(time) * <span class=\"number\">1000</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    time = +time</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(time)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"string\">`<span class=\"subst\">$&#123;d.getFullYear()&#125;</span>.<span class=\"subst\">$&#123;addZero(d.getMonth() + <span class=\"number\">1</span>)&#125;</span>.<span class=\"subst\">$&#123;addZero(d.getDate())&#125;</span>`</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"处理字符串中的html标签\"><a href=\"#处理字符串中的html标签\" class=\"headerlink\" title=\"处理字符串中的html标签\"></a>处理字符串中的html标签</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理字符串中的html标签</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> escapeHtml = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> temp = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">  (temp.textContent != <span class=\"literal\">null</span>) ? (temp.textContent = str) : (temp.innerText = str)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> output = temp.innerHTML</span><br><span class=\"line\">  temp = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"comment\">// 用于v-html高亮过滤</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> output</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/@highlighted-field@/g</span>, <span class=\"string\">&#x27;&lt;em&gt;&#x27;</span>)</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/@\\/highlighted-field@/g</span>, <span class=\"string\">&#x27;&lt;/em&gt;&#x27;</span>) || <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数字转换成单位数\"><a href=\"#数字转换成单位数\" class=\"headerlink\" title=\"数字转换成单位数\"></a>数字转换成单位数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  120000 =&gt; 10万 120001 =&gt; 10万+</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> transformNum = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(<span class=\"built_in\">parseInt</span>(value))) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> val = <span class=\"built_in\">parseInt</span>(value)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (val &lt; <span class=\"number\">1000</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fr = <span class=\"number\">1000</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"number\">4</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> unit = <span class=\"string\">&#x27;千&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (val / fr &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val / fr &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fr *= <span class=\"number\">10</span></span><br><span class=\"line\">    num += <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (num) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">      unit = <span class=\"string\">&#x27;千&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">      unit = <span class=\"string\">&#x27;万&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">      unit = <span class=\"string\">&#x27;0万&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">      unit = <span class=\"string\">&#x27;百万&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">      unit = <span class=\"string\">&#x27;千万&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">9</span>:</span><br><span class=\"line\">      unit = <span class=\"string\">&#x27;亿&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">10</span>:</span><br><span class=\"line\">      unit = <span class=\"string\">&#x27;0亿&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">11</span>:</span><br><span class=\"line\">      unit = <span class=\"string\">&#x27;百亿&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">12</span>:</span><br><span class=\"line\">      unit = <span class=\"string\">&#x27;千亿&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.floor(val / fr)&#125;</span><span class=\"subst\">$&#123;unit&#125;</span><span class=\"subst\">$&#123;val % fr &gt; <span class=\"number\">0</span> ? <span class=\"string\">&#x27;+&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件大小计算\"><a href=\"#文件大小计算\" class=\"headerlink\" title=\"文件大小计算\"></a>文件大小计算</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getFileSize = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(<span class=\"built_in\">parseInt</span>(value))) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> size = <span class=\"built_in\">parseInt</span>(value)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> num = <span class=\"number\">1024.00</span> <span class=\"comment\">// byte</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (size &lt; num) &#123; <span class=\"keyword\">return</span> size + <span class=\"string\">&quot;B&quot;</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (size &lt; <span class=\"built_in\">Math</span>.pow(num, <span class=\"number\">2</span>)) &#123; <span class=\"keyword\">return</span> (size / num).toFixed(<span class=\"number\">2</span>) + <span class=\"string\">&quot;K&quot;</span> &#125; <span class=\"comment\">// kb</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (size &lt; <span class=\"built_in\">Math</span>.pow(num, <span class=\"number\">3</span>)) &#123; <span class=\"keyword\">return</span> (size / <span class=\"built_in\">Math</span>.pow(num, <span class=\"number\">2</span>)).toFixed(<span class=\"number\">2</span>) + <span class=\"string\">&quot;M&quot;</span> &#125; <span class=\"comment\">// M</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (size &lt; <span class=\"built_in\">Math</span>.pow(num, <span class=\"number\">4</span>)) &#123; <span class=\"keyword\">return</span> (size / <span class=\"built_in\">Math</span>.pow(num, <span class=\"number\">3</span>)).toFixed(<span class=\"number\">2</span>) + <span class=\"string\">&quot;G&quot;</span> &#125; <span class=\"comment\">// G</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (size / <span class=\"built_in\">Math</span>.pow(num, <span class=\"number\">4</span>)).toFixed(<span class=\"number\">2</span>) + <span class=\"string\">&quot;T&quot;</span> <span class=\"comment\">// T</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取字符数\"><a href=\"#获取字符数\" class=\"headerlink\" title=\"获取字符数\"></a>获取字符数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个中文两个字符</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getByteLen = <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; val.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> iLen = val.charCodeAt(i)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iLen &gt;= <span class=\"number\">0</span> &amp;&amp; iLen &lt;= <span class=\"number\">128</span>) &#123;</span><br><span class=\"line\">      len += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      len += <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> len</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图片url转base64\"><a href=\"#图片url转base64\" class=\"headerlink\" title=\"图片url转base64\"></a>图片url转base64</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getBase64Image = <span class=\"function\">(<span class=\"params\">url, cb</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\">  image.src = url + <span class=\"string\">&quot;?v&quot;</span> + <span class=\"built_in\">Math</span>.random() <span class=\"comment\">// 处理缓存</span></span><br><span class=\"line\">  image.crossOrigin = <span class=\"string\">&#x27;*&#x27;</span> <span class=\"comment\">// 支持跨域</span></span><br><span class=\"line\">  image.onload = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> base64 = drawBase64Image(image)</span><br><span class=\"line\">    cb &amp;&amp; cb(base64)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> drawBase64Image = <span class=\"function\">(<span class=\"params\">img</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\">  canvas.width = img.width</span><br><span class=\"line\">  canvas.height = img.height</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">&#x27;2d&#x27;</span>)</span><br><span class=\"line\">  ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, img.width, img.height)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> canvas.toDataURL(<span class=\"string\">&#x27;image/png&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"复制文本\"><a href=\"#复制文本\" class=\"headerlink\" title=\"复制文本\"></a>复制文本</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> msgCopy = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">&#x27;无复制内容&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 动态创建 textarea 标签</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> textarea = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;textarea&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 将该 textarea 设为 readonly 防止 iOS 下自动唤起键盘，同时将 textarea 移出可视区域</span></span><br><span class=\"line\">  textarea.readOnly = <span class=\"string\">&#x27;readonly&#x27;</span></span><br><span class=\"line\">  textarea.style.position = <span class=\"string\">&#x27;absolute&#x27;</span></span><br><span class=\"line\">  textarea.style.left = <span class=\"string\">&#x27;-9999px&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// 将要 copy 的值赋给 textarea 标签的 value 属性</span></span><br><span class=\"line\">  textarea.value = value</span><br><span class=\"line\">  <span class=\"comment\">// 将 textarea 插入到 body 中</span></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(textarea)</span><br><span class=\"line\">  <span class=\"comment\">// 选中值并复制</span></span><br><span class=\"line\">  textarea.select()</span><br><span class=\"line\">  <span class=\"comment\">// textarea.setSelectionRange(0, textarea.value.length);</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"built_in\">document</span>.execCommand(<span class=\"string\">&#x27;Copy&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">    Message.success(<span class=\"string\">&#x27;复制成功&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.removeChild(textarea)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"格式化时间\"><a href=\"#格式化时间\" class=\"headerlink\" title=\"格式化时间\"></a>格式化时间</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatTime</span> (<span class=\"params\">time</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> addZero = <span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + m : m</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((<span class=\"string\">`<span class=\"subst\">$&#123;time&#125;</span>`</span>).length === <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    time = <span class=\"built_in\">window</span>.parseInt(time) * <span class=\"number\">1000</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    time = +time</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(time)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"string\">`<span class=\"subst\">$&#123;d.getFullYear()&#125;</span>-<span class=\"subst\">$&#123;addZero(d.getMonth() + <span class=\"number\">1</span>)&#125;</span>-<span class=\"subst\">$&#123;addZero(d.getDate())&#125;</span> <span class=\"subst\">$&#123;addZero(d.getHours())&#125;</span>:<span class=\"subst\">$&#123;addZero(d.getMinutes())&#125;</span>:<span class=\"subst\">$&#123;addZero(d.getSeconds())&#125;</span>`</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatMinute</span> (<span class=\"params\">time</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> addZero = <span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + m : m</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((<span class=\"string\">`<span class=\"subst\">$&#123;time&#125;</span>`</span>).length === <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    time = <span class=\"built_in\">window</span>.parseInt(time) * <span class=\"number\">1000</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    time = +time</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(time)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"string\">`<span class=\"subst\">$&#123;d.getFullYear()&#125;</span>.<span class=\"subst\">$&#123;addZero(d.getMonth() + <span class=\"number\">1</span>)&#125;</span>.<span class=\"subst\">$&#123;addZero(d.getDate())&#125;</span> <span class=\"subst\">$&#123;addZero(d.getHours())&#125;</span>:<span class=\"subst\">$&#123;addZero(d.getMinutes())&#125;</span>`</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> formatDate = <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> addZero = <span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + m : m</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((<span class=\"string\">`<span class=\"subst\">$&#123;time&#125;</span>`</span>).length === <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    time = <span class=\"built_in\">window</span>.parseInt(time) * <span class=\"number\">1000</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    time = +time</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(time)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"string\">`<span class=\"subst\">$&#123;d.getFullYear()&#125;</span>.<span class=\"subst\">$&#123;addZero(d.getMonth() + <span class=\"number\">1</span>)&#125;</span>.<span class=\"subst\">$&#123;addZero(d.getDate())&#125;</span>`</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"JavaScript的eval函数","date":"2021-05-16T16:00:00.000Z","cover":"https://img.showydream.com/img/ZrtTjb-javascript.jpg","description":"JavaScript的eval函数笔记","keywords":"JavaScript, function, eval","_content":"\n​\t\tJavaScript中的eval(..)函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码。换句话说，可以在你写的代码中用程序生成代码并运行，就好像代码是写在那个位置的一样。\n\n​       根据这个原理来理解eval(..)，它是如何通过代码欺骗和假装成书写时（也就是词法期）代码就在“那，来实现修改词法作用域环境的，这个原理就变得清晰易懂了。在执行eval(..)之后的代码时，引擎并不“知道”或“在意”前面的代码是以动态形式插入进来，并对词法作用域的环境进行修改的。引擎只会如往常地进行词法作用域查找。\n\n​\t\t考虑以下代码：\n\n```javascript\nfunction foo(str, a) {\n    eval( str ); // 欺骗！\n    console.log( a, b );\n}\nvar b = 2;\nfoo( \"var b = 3;\", 1 ); // 1, 3\n\n```\n\n​\t\teval(..)调用中的\"var b = 3;\"这段代码会被当作本来就在那里一样来处理。由于那段代码声明了一个新的变量b，因此它对已经存在的foo(..)的词法作用域进行了修改。事实上，和前面提到的原理一样，这段代码实际上在foo(..)内部创建了一个变量b，并遮蔽了外部（全局）作用域中的同名变量。\n\n​\t\t当console.log(..)被执行时，会在foo(..)的内部同时找到a和b，但是永远也无法找到外部的b。因此会输出“1, 3”而不是正常情况下会输出的“1, 2”。\n\n​\t\t在这个例子中，为了展示的方便和简洁，我们传递进去的“代码”字符串是固定不变的。而在实际情况中，可以非常容易地根据程序逻辑动态地将字符拼接在一起之后再传递进去。eval(..)通常被用来执行动态创建的代码，因为像例子中这样动态地执行一段固定字符所组成的代码，并没有比直接将代码写在那里更有好处。\n\n​\t\t默认情况下，如果eval(..)中所执行的代码包含有一个或多个声明（无论是变量还是函数），就会对eval(..)所处的词法作用域进行修改。技术上，通过一些技巧（已经超出我们的讨论范围）可以间接调用eval(..)来使其运行在全局作用域中，并对全局作用域进行修改。但无论何种情况，eval(..)都可以在运行期修改书写期的词法作用域。\n\n 在严格模式的程序中，eval(..)在运行时有其自己的词法作用域，意味着其中的声明无法修改所在的作用域。\n\n```javascript\nfunction foo(str) {\n   \"use strict\";\n   eval( str );\n   console.log( a ); // ReferenceError: a is not defined\n}\n\nfoo( \"var a = 2\");\n```\n\n​\t\tJavaScript中还有其他一些功能效果和eval(..)很相似。setTimeout(..)和setInterval(..)的第一个参数可以是字符串，字符串的内容可以被解释为一段动态生成的函数代码。这些功能已经过时且并不被提倡。不要使用它们！\n\n​\t\tnew Function(..)函数的行为也很类似，最后一个参数可以接受代码字符串，并将其转化为动态生成的函数（前面的参数是这个新生成的函数的形参）。这种构建函数的语法比eval(..)略微安全一些，但也要尽量避免使用。\n\n​\t\t在程序中动态生成代码的使用场景非常罕见，因为它所带来的好处无法抵消性能上的损失。\n","source":"_posts/JavaScript的eval函数.md","raw":"---\ntitle: JavaScript的eval函数\ndate: 2021-5-17 00:00:00\ncover: https://img.showydream.com/img/ZrtTjb-javascript.jpg\ndescription: JavaScript的eval函数笔记\nkeywords: JavaScript, function, eval\ntags: 面经\ncategories: \n - Javascript\n---\n\n​\t\tJavaScript中的eval(..)函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码。换句话说，可以在你写的代码中用程序生成代码并运行，就好像代码是写在那个位置的一样。\n\n​       根据这个原理来理解eval(..)，它是如何通过代码欺骗和假装成书写时（也就是词法期）代码就在“那，来实现修改词法作用域环境的，这个原理就变得清晰易懂了。在执行eval(..)之后的代码时，引擎并不“知道”或“在意”前面的代码是以动态形式插入进来，并对词法作用域的环境进行修改的。引擎只会如往常地进行词法作用域查找。\n\n​\t\t考虑以下代码：\n\n```javascript\nfunction foo(str, a) {\n    eval( str ); // 欺骗！\n    console.log( a, b );\n}\nvar b = 2;\nfoo( \"var b = 3;\", 1 ); // 1, 3\n\n```\n\n​\t\teval(..)调用中的\"var b = 3;\"这段代码会被当作本来就在那里一样来处理。由于那段代码声明了一个新的变量b，因此它对已经存在的foo(..)的词法作用域进行了修改。事实上，和前面提到的原理一样，这段代码实际上在foo(..)内部创建了一个变量b，并遮蔽了外部（全局）作用域中的同名变量。\n\n​\t\t当console.log(..)被执行时，会在foo(..)的内部同时找到a和b，但是永远也无法找到外部的b。因此会输出“1, 3”而不是正常情况下会输出的“1, 2”。\n\n​\t\t在这个例子中，为了展示的方便和简洁，我们传递进去的“代码”字符串是固定不变的。而在实际情况中，可以非常容易地根据程序逻辑动态地将字符拼接在一起之后再传递进去。eval(..)通常被用来执行动态创建的代码，因为像例子中这样动态地执行一段固定字符所组成的代码，并没有比直接将代码写在那里更有好处。\n\n​\t\t默认情况下，如果eval(..)中所执行的代码包含有一个或多个声明（无论是变量还是函数），就会对eval(..)所处的词法作用域进行修改。技术上，通过一些技巧（已经超出我们的讨论范围）可以间接调用eval(..)来使其运行在全局作用域中，并对全局作用域进行修改。但无论何种情况，eval(..)都可以在运行期修改书写期的词法作用域。\n\n 在严格模式的程序中，eval(..)在运行时有其自己的词法作用域，意味着其中的声明无法修改所在的作用域。\n\n```javascript\nfunction foo(str) {\n   \"use strict\";\n   eval( str );\n   console.log( a ); // ReferenceError: a is not defined\n}\n\nfoo( \"var a = 2\");\n```\n\n​\t\tJavaScript中还有其他一些功能效果和eval(..)很相似。setTimeout(..)和setInterval(..)的第一个参数可以是字符串，字符串的内容可以被解释为一段动态生成的函数代码。这些功能已经过时且并不被提倡。不要使用它们！\n\n​\t\tnew Function(..)函数的行为也很类似，最后一个参数可以接受代码字符串，并将其转化为动态生成的函数（前面的参数是这个新生成的函数的形参）。这种构建函数的语法比eval(..)略微安全一些，但也要尽量避免使用。\n\n​\t\t在程序中动态生成代码的使用场景非常罕见，因为它所带来的好处无法抵消性能上的损失。\n","slug":"JavaScript的eval函数","published":1,"updated":"2021-11-08T06:35:44.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62cv000krify2odm5kgo","content":"<p>​        JavaScript中的eval(..)函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码。换句话说，可以在你写的代码中用程序生成代码并运行，就好像代码是写在那个位置的一样。</p>\n<p>​       根据这个原理来理解eval(..)，它是如何通过代码欺骗和假装成书写时（也就是词法期）代码就在“那，来实现修改词法作用域环境的，这个原理就变得清晰易懂了。在执行eval(..)之后的代码时，引擎并不“知道”或“在意”前面的代码是以动态形式插入进来，并对词法作用域的环境进行修改的。引擎只会如往常地进行词法作用域查找。</p>\n<p>​        考虑以下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">str, a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">eval</span>( str ); <span class=\"comment\">// 欺骗！</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( a, b );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">foo( <span class=\"string\">&quot;var b = 3;&quot;</span>, <span class=\"number\">1</span> ); <span class=\"comment\">// 1, 3</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​        eval(..)调用中的”var b = 3;”这段代码会被当作本来就在那里一样来处理。由于那段代码声明了一个新的变量b，因此它对已经存在的foo(..)的词法作用域进行了修改。事实上，和前面提到的原理一样，这段代码实际上在foo(..)内部创建了一个变量b，并遮蔽了外部（全局）作用域中的同名变量。</p>\n<p>​        当console.log(..)被执行时，会在foo(..)的内部同时找到a和b，但是永远也无法找到外部的b。因此会输出“1, 3”而不是正常情况下会输出的“1, 2”。</p>\n<p>​        在这个例子中，为了展示的方便和简洁，我们传递进去的“代码”字符串是固定不变的。而在实际情况中，可以非常容易地根据程序逻辑动态地将字符拼接在一起之后再传递进去。eval(..)通常被用来执行动态创建的代码，因为像例子中这样动态地执行一段固定字符所组成的代码，并没有比直接将代码写在那里更有好处。</p>\n<p>​        默认情况下，如果eval(..)中所执行的代码包含有一个或多个声明（无论是变量还是函数），就会对eval(..)所处的词法作用域进行修改。技术上，通过一些技巧（已经超出我们的讨论范围）可以间接调用eval(..)来使其运行在全局作用域中，并对全局作用域进行修改。但无论何种情况，eval(..)都可以在运行期修改书写期的词法作用域。</p>\n<p> 在严格模式的程序中，eval(..)在运行时有其自己的词法作用域，意味着其中的声明无法修改所在的作用域。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">   &quot;use strict&quot;</span>;</span><br><span class=\"line\">   <span class=\"built_in\">eval</span>( str );</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// ReferenceError: a is not defined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo( <span class=\"string\">&quot;var a = 2&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>​        JavaScript中还有其他一些功能效果和eval(..)很相似。setTimeout(..)和setInterval(..)的第一个参数可以是字符串，字符串的内容可以被解释为一段动态生成的函数代码。这些功能已经过时且并不被提倡。不要使用它们！</p>\n<p>​        new Function(..)函数的行为也很类似，最后一个参数可以接受代码字符串，并将其转化为动态生成的函数（前面的参数是这个新生成的函数的形参）。这种构建函数的语法比eval(..)略微安全一些，但也要尽量避免使用。</p>\n<p>​        在程序中动态生成代码的使用场景非常罕见，因为它所带来的好处无法抵消性能上的损失。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​        JavaScript中的eval(..)函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码。换句话说，可以在你写的代码中用程序生成代码并运行，就好像代码是写在那个位置的一样。</p>\n<p>​       根据这个原理来理解eval(..)，它是如何通过代码欺骗和假装成书写时（也就是词法期）代码就在“那，来实现修改词法作用域环境的，这个原理就变得清晰易懂了。在执行eval(..)之后的代码时，引擎并不“知道”或“在意”前面的代码是以动态形式插入进来，并对词法作用域的环境进行修改的。引擎只会如往常地进行词法作用域查找。</p>\n<p>​        考虑以下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">str, a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">eval</span>( str ); <span class=\"comment\">// 欺骗！</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( a, b );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">foo( <span class=\"string\">&quot;var b = 3;&quot;</span>, <span class=\"number\">1</span> ); <span class=\"comment\">// 1, 3</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​        eval(..)调用中的”var b = 3;”这段代码会被当作本来就在那里一样来处理。由于那段代码声明了一个新的变量b，因此它对已经存在的foo(..)的词法作用域进行了修改。事实上，和前面提到的原理一样，这段代码实际上在foo(..)内部创建了一个变量b，并遮蔽了外部（全局）作用域中的同名变量。</p>\n<p>​        当console.log(..)被执行时，会在foo(..)的内部同时找到a和b，但是永远也无法找到外部的b。因此会输出“1, 3”而不是正常情况下会输出的“1, 2”。</p>\n<p>​        在这个例子中，为了展示的方便和简洁，我们传递进去的“代码”字符串是固定不变的。而在实际情况中，可以非常容易地根据程序逻辑动态地将字符拼接在一起之后再传递进去。eval(..)通常被用来执行动态创建的代码，因为像例子中这样动态地执行一段固定字符所组成的代码，并没有比直接将代码写在那里更有好处。</p>\n<p>​        默认情况下，如果eval(..)中所执行的代码包含有一个或多个声明（无论是变量还是函数），就会对eval(..)所处的词法作用域进行修改。技术上，通过一些技巧（已经超出我们的讨论范围）可以间接调用eval(..)来使其运行在全局作用域中，并对全局作用域进行修改。但无论何种情况，eval(..)都可以在运行期修改书写期的词法作用域。</p>\n<p> 在严格模式的程序中，eval(..)在运行时有其自己的词法作用域，意味着其中的声明无法修改所在的作用域。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">   &quot;use strict&quot;</span>;</span><br><span class=\"line\">   <span class=\"built_in\">eval</span>( str );</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// ReferenceError: a is not defined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo( <span class=\"string\">&quot;var a = 2&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>​        JavaScript中还有其他一些功能效果和eval(..)很相似。setTimeout(..)和setInterval(..)的第一个参数可以是字符串，字符串的内容可以被解释为一段动态生成的函数代码。这些功能已经过时且并不被提倡。不要使用它们！</p>\n<p>​        new Function(..)函数的行为也很类似，最后一个参数可以接受代码字符串，并将其转化为动态生成的函数（前面的参数是这个新生成的函数的形参）。这种构建函数的语法比eval(..)略微安全一些，但也要尽量避免使用。</p>\n<p>​        在程序中动态生成代码的使用场景非常罕见，因为它所带来的好处无法抵消性能上的损失。</p>\n"},{"title":"JavaScript之垃圾回收机制","date":"2021-04-06T04:00:00.000Z","cover":"https://img.showydream.com/img/ZrtTjb-javascript.jpg","description":"介绍一下JS的垃圾回收机制。","keywords":"JS的垃圾回收机制","_content":"\n\n\n## 垃圾回收机制介绍\n\n下面这段话引自《JavaScript权威指南（第四版）》：\n\n>由于字符串、对象和数组没有固定大小，所以当它们大小已知时，才能对它们进行动态的存储分配。JavaScript程序每次创建字符串、对象或数组时，解释器都必须分配内存来存储那个实体。只要像这样动态地分配了内存。最终都要释放这些内存以便它们能够被再用，否则，JavaScript的解释器将会消耗完系统的内存，造成系统崩溃。\n\n​\t\t这段话解释了为什么需要系统垃圾回收，JS不详C语言或者C++，它有自己的一套垃圾回收机制（Garbage Collection）。JavaScript的解释器可以检测到何时程序不再使用一个对象了，当它确定了一个对象没用了以后，它就会把这个对象占用的内存释放掉。\n\n​\t\tJS的垃圾回收机制是为了防止内存泄漏，内存泄漏的含义就是当已经不需要某块内存时这块内存还存在着，造成内存的浪费。垃圾回收机制就是间歇的不定期的寻找到不再使用的变量，并释放掉它们所指向的内存。C#、Java、JavaScript有自动垃圾回收机制，但c++和c就没有垃圾回收机制，也许是因为垃圾回收机制必须由一种平台来实现。在JS中，JS的执行环境会负责管理代码执行过程中使用的内存。\n\n​\t\t不再使用的变量也就是生命周期结束的变量，是局部变量，局部变量只在函数的执行过程中存在，当函数运行结束，没有其他引用(闭包)，那么该变量会被标记回收。\n\n全局变量的生命周期直至浏览器卸载页面才会结束，也就是说**全局变量不会被当成垃圾回收**。\n\n### 内存的生命周期\n\n1. 分配你所需要的内存：\n   由于字符串、对象等没有固定的大小，js程序在每次创建字符串、对象的时候，程序都回分配内存来存储那个实体。\n\n2. 使用分配到的内存做点什么\n\n3. 不需要时将其释放回归：\n\n   在不需要字符串、对象的时候，需要释放其所在的内存，否则将会消耗完系统中所有可用的内存，造成系统崩溃。这就是**垃圾回收机制所存在的意义**。\n\n## 垃圾回收原理浅析\n\n现在各大浏览器通常用采用的垃圾回收有两种方法：标记清除（mark and sweep）、引用计数(reference counting)。\n\n1. ### 标记清除\n\n   **工作原理**：\n\n   ​\t\t假定设置一个叫做根（root）的对象（在JavaScript里，根是全局对象）。垃圾回收器将定期从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象……从根开始，垃圾回收器将找到所有可以获得的对象和收集所有不能获得的对象。\n\n   ​\t\t当变量进入环境时（例如局部声明一个变量），将这个变量标记为“进入环境”，当变量离开环境时，标记为“离开环境”。标记为“离开环境”的变量就会被回收内存。\n\n   ```javascript\n   function func3 () {\n         const a = 1\n         const b = 2\n         // 函数执行时，a b 分别被标记 进入环境\n   }\n   func3() // 函数执行结束，a b 被标记 离开环境，被回收\n   ```\n\n   **工作流程**：\n\n   1. 垃圾收集器会在运行的时候会给存储在内存中的**所有变量都加上标记**。\n   2. **去掉环境中的变量**以及被环境中的变量引用的变量的标记。\n   3. 那些**还存在标记的变量被视为准备删除的变量**。\n   4. 最后垃圾收集器会执行最后一步内存清除的工作，**销毁那些带标记的值并回收它们所占用的内存空间**。\n\n2. ### 引用计数\n\n   统计引用类型变量声明后被引用的次数，当次数为 0 时，该变量将被回收\n\n   ```javascript\n   function func4 () {\n         const c = {} // 引用类型变量 c的引用计数为 0\n         let d = c // c 被 d 引用 c的引用计数为 1\n         let e = c // c 被 e 引用 c的引用计数为 2\n         d = {} // d 不再引用c c的引用计数减为 1\n         e = null // e 不再引用 c c的引用计数减为 0 将被回收\n   }\n   ```\n\n   但是引用计数的方式，有一个相对明显的缺点——循环引用\n\n   ```javascript\n   function func5 () {\n         let f = {}\n         let g = {}\n         f.prop = g\n         g.prop = f\n         // 由于 f 和 g 互相引用，计数永远不可能为 0\n   }\n   ```\n\n   解决方式是，当我们不使用它们的时候，手动切断链接：\n\n   ```javascript\n   f.prop = null\n   g.prop = null\n   ```\n\n   **淘汰**：\n\n   从2012年起，所有现代浏览器都使用了标记清除垃圾回收算法。所有对JavaScript垃圾回收算法的改进都是基于标记清除算法的改进。\n\n## 哪些情况会引起内存泄漏？\n\n1. #### 全局变量\n\n   顾名思义，全局变量一直在全局环境中，所以它不会被垃圾回收机制标记“离开环境”。自定义的还好，但是有时候意外的全局变量就会导致内存泄漏。\n\n   ```javascript\n   function test(){\n     name = '全局变量1'； // 没有声明的变量，实际上会指向window.name\n     this.age = '全局变量2'； // this会向上找 如果找不到对象，就会指向window\n   }\n   test()\n   ```\n\n   **解决方法**：使用严格模式或者细心一点\n\n   ```javascript\n   function test(){\n     \"use strict\";\n     name = '全局变量1'； // 此时会直接报错\n     this.age = '全局变量2'； // 严格模式下，this向上如果找不到对象，就会指向undefined\n   }\n   test()\n   ```\n\n   **手动释放变量**：\n\n   ```javascript\n   window.name = undefined\n   delete window.age\n   ```\n\n2. #### 未销毁的定时器和回调函数\n\n   ​\t\t当**不需要**`setInterval`或者`setTimeout`时，**定时器没有被clear**，定时器的**回调函数以及内部依赖的变量都不能被回收**，造成内存泄漏。\n\n   ```javascript\n   var someResource = function(){\n     return 'test'\n   };\n   setInterval(function() {\n       var node = document.getElementById('test');\n       if(node) {\n           node.innerHTML = JSON.stringify(someResource));\n       }\n   }, 1000);\n   ```\n\n   如果后续 **test** 元素被移除, 整个定时器实际上没有任何作用. 但如果你没有回收定时器, 整个定时器依然有效, 不但定时器无法被内存回收, 定时器函数中的依赖也无法回收. 在这个案例中的 **someResource** 也无法被回收.\n\n3. #### DOM引用\n\n   ```html\n   <body>\n       <div id='test1'>213</div>\n   </body>\n   <script>\n       var test1 = document.getElementById('test1');\n       document.body.removeChild(test1); // dom删除了\n       console.log(test1, \"test1\");  // 但是还存在引用\n   </script>\n   ```\n\n   控制台输出：\n\n   <img src=\"https://img.showydream.com/img/g92zJK-image-20210408115109640.png\" alt=\"image-20210408115109640\" style=\"zoom:50%;\" />\n\n   **解决办法**：test1 = null;\n\n## 注意：闭包不会引起内存泄漏\n\n老浏览器（主要是IE6）有bug，闭包会造成内存泄漏，这个现在已经无须考虑了。\n","source":"_posts/JavaScript的垃圾回收机制.md","raw":"---\ntitle: JavaScript之垃圾回收机制\ndate: 2021-4-6 12:00:00\ncover: https://img.showydream.com/img/ZrtTjb-javascript.jpg\ndescription: 介绍一下JS的垃圾回收机制。\nkeywords: JS的垃圾回收机制\ntags: 面经\ncategories: \n  - JavaScript\n---\n\n\n\n## 垃圾回收机制介绍\n\n下面这段话引自《JavaScript权威指南（第四版）》：\n\n>由于字符串、对象和数组没有固定大小，所以当它们大小已知时，才能对它们进行动态的存储分配。JavaScript程序每次创建字符串、对象或数组时，解释器都必须分配内存来存储那个实体。只要像这样动态地分配了内存。最终都要释放这些内存以便它们能够被再用，否则，JavaScript的解释器将会消耗完系统的内存，造成系统崩溃。\n\n​\t\t这段话解释了为什么需要系统垃圾回收，JS不详C语言或者C++，它有自己的一套垃圾回收机制（Garbage Collection）。JavaScript的解释器可以检测到何时程序不再使用一个对象了，当它确定了一个对象没用了以后，它就会把这个对象占用的内存释放掉。\n\n​\t\tJS的垃圾回收机制是为了防止内存泄漏，内存泄漏的含义就是当已经不需要某块内存时这块内存还存在着，造成内存的浪费。垃圾回收机制就是间歇的不定期的寻找到不再使用的变量，并释放掉它们所指向的内存。C#、Java、JavaScript有自动垃圾回收机制，但c++和c就没有垃圾回收机制，也许是因为垃圾回收机制必须由一种平台来实现。在JS中，JS的执行环境会负责管理代码执行过程中使用的内存。\n\n​\t\t不再使用的变量也就是生命周期结束的变量，是局部变量，局部变量只在函数的执行过程中存在，当函数运行结束，没有其他引用(闭包)，那么该变量会被标记回收。\n\n全局变量的生命周期直至浏览器卸载页面才会结束，也就是说**全局变量不会被当成垃圾回收**。\n\n### 内存的生命周期\n\n1. 分配你所需要的内存：\n   由于字符串、对象等没有固定的大小，js程序在每次创建字符串、对象的时候，程序都回分配内存来存储那个实体。\n\n2. 使用分配到的内存做点什么\n\n3. 不需要时将其释放回归：\n\n   在不需要字符串、对象的时候，需要释放其所在的内存，否则将会消耗完系统中所有可用的内存，造成系统崩溃。这就是**垃圾回收机制所存在的意义**。\n\n## 垃圾回收原理浅析\n\n现在各大浏览器通常用采用的垃圾回收有两种方法：标记清除（mark and sweep）、引用计数(reference counting)。\n\n1. ### 标记清除\n\n   **工作原理**：\n\n   ​\t\t假定设置一个叫做根（root）的对象（在JavaScript里，根是全局对象）。垃圾回收器将定期从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象……从根开始，垃圾回收器将找到所有可以获得的对象和收集所有不能获得的对象。\n\n   ​\t\t当变量进入环境时（例如局部声明一个变量），将这个变量标记为“进入环境”，当变量离开环境时，标记为“离开环境”。标记为“离开环境”的变量就会被回收内存。\n\n   ```javascript\n   function func3 () {\n         const a = 1\n         const b = 2\n         // 函数执行时，a b 分别被标记 进入环境\n   }\n   func3() // 函数执行结束，a b 被标记 离开环境，被回收\n   ```\n\n   **工作流程**：\n\n   1. 垃圾收集器会在运行的时候会给存储在内存中的**所有变量都加上标记**。\n   2. **去掉环境中的变量**以及被环境中的变量引用的变量的标记。\n   3. 那些**还存在标记的变量被视为准备删除的变量**。\n   4. 最后垃圾收集器会执行最后一步内存清除的工作，**销毁那些带标记的值并回收它们所占用的内存空间**。\n\n2. ### 引用计数\n\n   统计引用类型变量声明后被引用的次数，当次数为 0 时，该变量将被回收\n\n   ```javascript\n   function func4 () {\n         const c = {} // 引用类型变量 c的引用计数为 0\n         let d = c // c 被 d 引用 c的引用计数为 1\n         let e = c // c 被 e 引用 c的引用计数为 2\n         d = {} // d 不再引用c c的引用计数减为 1\n         e = null // e 不再引用 c c的引用计数减为 0 将被回收\n   }\n   ```\n\n   但是引用计数的方式，有一个相对明显的缺点——循环引用\n\n   ```javascript\n   function func5 () {\n         let f = {}\n         let g = {}\n         f.prop = g\n         g.prop = f\n         // 由于 f 和 g 互相引用，计数永远不可能为 0\n   }\n   ```\n\n   解决方式是，当我们不使用它们的时候，手动切断链接：\n\n   ```javascript\n   f.prop = null\n   g.prop = null\n   ```\n\n   **淘汰**：\n\n   从2012年起，所有现代浏览器都使用了标记清除垃圾回收算法。所有对JavaScript垃圾回收算法的改进都是基于标记清除算法的改进。\n\n## 哪些情况会引起内存泄漏？\n\n1. #### 全局变量\n\n   顾名思义，全局变量一直在全局环境中，所以它不会被垃圾回收机制标记“离开环境”。自定义的还好，但是有时候意外的全局变量就会导致内存泄漏。\n\n   ```javascript\n   function test(){\n     name = '全局变量1'； // 没有声明的变量，实际上会指向window.name\n     this.age = '全局变量2'； // this会向上找 如果找不到对象，就会指向window\n   }\n   test()\n   ```\n\n   **解决方法**：使用严格模式或者细心一点\n\n   ```javascript\n   function test(){\n     \"use strict\";\n     name = '全局变量1'； // 此时会直接报错\n     this.age = '全局变量2'； // 严格模式下，this向上如果找不到对象，就会指向undefined\n   }\n   test()\n   ```\n\n   **手动释放变量**：\n\n   ```javascript\n   window.name = undefined\n   delete window.age\n   ```\n\n2. #### 未销毁的定时器和回调函数\n\n   ​\t\t当**不需要**`setInterval`或者`setTimeout`时，**定时器没有被clear**，定时器的**回调函数以及内部依赖的变量都不能被回收**，造成内存泄漏。\n\n   ```javascript\n   var someResource = function(){\n     return 'test'\n   };\n   setInterval(function() {\n       var node = document.getElementById('test');\n       if(node) {\n           node.innerHTML = JSON.stringify(someResource));\n       }\n   }, 1000);\n   ```\n\n   如果后续 **test** 元素被移除, 整个定时器实际上没有任何作用. 但如果你没有回收定时器, 整个定时器依然有效, 不但定时器无法被内存回收, 定时器函数中的依赖也无法回收. 在这个案例中的 **someResource** 也无法被回收.\n\n3. #### DOM引用\n\n   ```html\n   <body>\n       <div id='test1'>213</div>\n   </body>\n   <script>\n       var test1 = document.getElementById('test1');\n       document.body.removeChild(test1); // dom删除了\n       console.log(test1, \"test1\");  // 但是还存在引用\n   </script>\n   ```\n\n   控制台输出：\n\n   <img src=\"https://img.showydream.com/img/g92zJK-image-20210408115109640.png\" alt=\"image-20210408115109640\" style=\"zoom:50%;\" />\n\n   **解决办法**：test1 = null;\n\n## 注意：闭包不会引起内存泄漏\n\n老浏览器（主要是IE6）有bug，闭包会造成内存泄漏，这个现在已经无须考虑了。\n","slug":"JavaScript的垃圾回收机制","published":1,"updated":"2021-11-08T06:35:23.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62cw000mrifyahg2avwt","content":"<h2 id=\"垃圾回收机制介绍\"><a href=\"#垃圾回收机制介绍\" class=\"headerlink\" title=\"垃圾回收机制介绍\"></a>垃圾回收机制介绍</h2><p>下面这段话引自《JavaScript权威指南（第四版）》：</p>\n<blockquote>\n<p>由于字符串、对象和数组没有固定大小，所以当它们大小已知时，才能对它们进行动态的存储分配。JavaScript程序每次创建字符串、对象或数组时，解释器都必须分配内存来存储那个实体。只要像这样动态地分配了内存。最终都要释放这些内存以便它们能够被再用，否则，JavaScript的解释器将会消耗完系统的内存，造成系统崩溃。</p>\n</blockquote>\n<p>​        这段话解释了为什么需要系统垃圾回收，JS不详C语言或者C++，它有自己的一套垃圾回收机制（Garbage Collection）。JavaScript的解释器可以检测到何时程序不再使用一个对象了，当它确定了一个对象没用了以后，它就会把这个对象占用的内存释放掉。</p>\n<p>​        JS的垃圾回收机制是为了防止内存泄漏，内存泄漏的含义就是当已经不需要某块内存时这块内存还存在着，造成内存的浪费。垃圾回收机制就是间歇的不定期的寻找到不再使用的变量，并释放掉它们所指向的内存。C#、Java、JavaScript有自动垃圾回收机制，但c++和c就没有垃圾回收机制，也许是因为垃圾回收机制必须由一种平台来实现。在JS中，JS的执行环境会负责管理代码执行过程中使用的内存。</p>\n<p>​        不再使用的变量也就是生命周期结束的变量，是局部变量，局部变量只在函数的执行过程中存在，当函数运行结束，没有其他引用(闭包)，那么该变量会被标记回收。</p>\n<p>全局变量的生命周期直至浏览器卸载页面才会结束，也就是说<strong>全局变量不会被当成垃圾回收</strong>。</p>\n<h3 id=\"内存的生命周期\"><a href=\"#内存的生命周期\" class=\"headerlink\" title=\"内存的生命周期\"></a>内存的生命周期</h3><ol>\n<li><p>分配你所需要的内存：<br>由于字符串、对象等没有固定的大小，js程序在每次创建字符串、对象的时候，程序都回分配内存来存储那个实体。</p>\n</li>\n<li><p>使用分配到的内存做点什么</p>\n</li>\n<li><p>不需要时将其释放回归：</p>\n<p>在不需要字符串、对象的时候，需要释放其所在的内存，否则将会消耗完系统中所有可用的内存，造成系统崩溃。这就是<strong>垃圾回收机制所存在的意义</strong>。</p>\n</li>\n</ol>\n<h2 id=\"垃圾回收原理浅析\"><a href=\"#垃圾回收原理浅析\" class=\"headerlink\" title=\"垃圾回收原理浅析\"></a>垃圾回收原理浅析</h2><p>现在各大浏览器通常用采用的垃圾回收有两种方法：标记清除（mark and sweep）、引用计数(reference counting)。</p>\n<ol>\n<li><h3 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h3><p><strong>工作原理</strong>：</p>\n<p>​        假定设置一个叫做根（root）的对象（在JavaScript里，根是全局对象）。垃圾回收器将定期从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象……从根开始，垃圾回收器将找到所有可以获得的对象和收集所有不能获得的对象。</p>\n<p>​        当变量进入环境时（例如局部声明一个变量），将这个变量标记为“进入环境”，当变量离开环境时，标记为“离开环境”。标记为“离开环境”的变量就会被回收内存。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func3</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> b = <span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"comment\">// 函数执行时，a b 分别被标记 进入环境</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func3() <span class=\"comment\">// 函数执行结束，a b 被标记 离开环境，被回收</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>工作流程</strong>：</p>\n<ol>\n<li>垃圾收集器会在运行的时候会给存储在内存中的<strong>所有变量都加上标记</strong>。</li>\n<li><strong>去掉环境中的变量</strong>以及被环境中的变量引用的变量的标记。</li>\n<li>那些<strong>还存在标记的变量被视为准备删除的变量</strong>。</li>\n<li>最后垃圾收集器会执行最后一步内存清除的工作，<strong>销毁那些带标记的值并回收它们所占用的内存空间</strong>。</li>\n</ol>\n</li>\n<li><h3 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h3><p>统计引用类型变量声明后被引用的次数，当次数为 0 时，该变量将被回收</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func4</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> c = &#123;&#125; <span class=\"comment\">// 引用类型变量 c的引用计数为 0</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> d = c <span class=\"comment\">// c 被 d 引用 c的引用计数为 1</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> e = c <span class=\"comment\">// c 被 e 引用 c的引用计数为 2</span></span><br><span class=\"line\">      d = &#123;&#125; <span class=\"comment\">// d 不再引用c c的引用计数减为 1</span></span><br><span class=\"line\">      e = <span class=\"literal\">null</span> <span class=\"comment\">// e 不再引用 c c的引用计数减为 0 将被回收</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是引用计数的方式，有一个相对明显的缺点——循环引用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func5</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> f = &#123;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> g = &#123;&#125;</span><br><span class=\"line\">      f.prop = g</span><br><span class=\"line\">      g.prop = f</span><br><span class=\"line\">      <span class=\"comment\">// 由于 f 和 g 互相引用，计数永远不可能为 0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决方式是，当我们不使用它们的时候，手动切断链接：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f.prop = <span class=\"literal\">null</span></span><br><span class=\"line\">g.prop = <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>淘汰</strong>：</p>\n<p>从2012年起，所有现代浏览器都使用了标记清除垃圾回收算法。所有对JavaScript垃圾回收算法的改进都是基于标记清除算法的改进。</p>\n</li>\n</ol>\n<h2 id=\"哪些情况会引起内存泄漏？\"><a href=\"#哪些情况会引起内存泄漏？\" class=\"headerlink\" title=\"哪些情况会引起内存泄漏？\"></a>哪些情况会引起内存泄漏？</h2><ol>\n<li><h4 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h4><p>顾名思义，全局变量一直在全局环境中，所以它不会被垃圾回收机制标记“离开环境”。自定义的还好，但是有时候意外的全局变量就会导致内存泄漏。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  name = <span class=\"string\">&#x27;全局变量1&#x27;</span>； <span class=\"comment\">// 没有声明的变量，实际上会指向window.name</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = <span class=\"string\">&#x27;全局变量2&#x27;</span>； <span class=\"comment\">// this会向上找 如果找不到对象，就会指向window</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure>\n\n<p><strong>解决方法</strong>：使用严格模式或者细心一点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  &quot;use strict&quot;</span>;</span><br><span class=\"line\">  name = <span class=\"string\">&#x27;全局变量1&#x27;</span>； <span class=\"comment\">// 此时会直接报错</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = <span class=\"string\">&#x27;全局变量2&#x27;</span>； <span class=\"comment\">// 严格模式下，this向上如果找不到对象，就会指向undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure>\n\n<p><strong>手动释放变量</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"built_in\">window</span>.age</span><br></pre></td></tr></table></figure></li>\n<li><h4 id=\"未销毁的定时器和回调函数\"><a href=\"#未销毁的定时器和回调函数\" class=\"headerlink\" title=\"未销毁的定时器和回调函数\"></a>未销毁的定时器和回调函数</h4><p>​        当<strong>不需要</strong><code>setInterval</code>或者<code>setTimeout</code>时，<strong>定时器没有被clear</strong>，定时器的<strong>回调函数以及内部依赖的变量都不能被回收</strong>，造成内存泄漏。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someResource = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> node = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node) &#123;</span><br><span class=\"line\">        node.innerHTML = <span class=\"built_in\">JSON</span>.stringify(someResource));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如果后续 <strong>test</strong> 元素被移除, 整个定时器实际上没有任何作用. 但如果你没有回收定时器, 整个定时器依然有效, 不但定时器无法被内存回收, 定时器函数中的依赖也无法回收. 在这个案例中的 <strong>someResource</strong> 也无法被回收.</p>\n</li>\n<li><h4 id=\"DOM引用\"><a href=\"#DOM引用\" class=\"headerlink\" title=\"DOM引用\"></a>DOM引用</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;test1&#x27;</span>&gt;</span>213<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> test1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test1&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.body.removeChild(test1); <span class=\"comment\">// dom删除了</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(test1, <span class=\"string\">&quot;test1&quot;</span>);  <span class=\"comment\">// 但是还存在引用</span></span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>控制台输出：</p>\n<img src=\"https://img.showydream.com/img/g92zJK-image-20210408115109640.png\" alt=\"image-20210408115109640\" style=\"zoom:50%;\" />\n\n<p><strong>解决办法</strong>：test1 = null;</p>\n</li>\n</ol>\n<h2 id=\"注意：闭包不会引起内存泄漏\"><a href=\"#注意：闭包不会引起内存泄漏\" class=\"headerlink\" title=\"注意：闭包不会引起内存泄漏\"></a>注意：闭包不会引起内存泄漏</h2><p>老浏览器（主要是IE6）有bug，闭包会造成内存泄漏，这个现在已经无须考虑了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"垃圾回收机制介绍\"><a href=\"#垃圾回收机制介绍\" class=\"headerlink\" title=\"垃圾回收机制介绍\"></a>垃圾回收机制介绍</h2><p>下面这段话引自《JavaScript权威指南（第四版）》：</p>\n<blockquote>\n<p>由于字符串、对象和数组没有固定大小，所以当它们大小已知时，才能对它们进行动态的存储分配。JavaScript程序每次创建字符串、对象或数组时，解释器都必须分配内存来存储那个实体。只要像这样动态地分配了内存。最终都要释放这些内存以便它们能够被再用，否则，JavaScript的解释器将会消耗完系统的内存，造成系统崩溃。</p>\n</blockquote>\n<p>​        这段话解释了为什么需要系统垃圾回收，JS不详C语言或者C++，它有自己的一套垃圾回收机制（Garbage Collection）。JavaScript的解释器可以检测到何时程序不再使用一个对象了，当它确定了一个对象没用了以后，它就会把这个对象占用的内存释放掉。</p>\n<p>​        JS的垃圾回收机制是为了防止内存泄漏，内存泄漏的含义就是当已经不需要某块内存时这块内存还存在着，造成内存的浪费。垃圾回收机制就是间歇的不定期的寻找到不再使用的变量，并释放掉它们所指向的内存。C#、Java、JavaScript有自动垃圾回收机制，但c++和c就没有垃圾回收机制，也许是因为垃圾回收机制必须由一种平台来实现。在JS中，JS的执行环境会负责管理代码执行过程中使用的内存。</p>\n<p>​        不再使用的变量也就是生命周期结束的变量，是局部变量，局部变量只在函数的执行过程中存在，当函数运行结束，没有其他引用(闭包)，那么该变量会被标记回收。</p>\n<p>全局变量的生命周期直至浏览器卸载页面才会结束，也就是说<strong>全局变量不会被当成垃圾回收</strong>。</p>\n<h3 id=\"内存的生命周期\"><a href=\"#内存的生命周期\" class=\"headerlink\" title=\"内存的生命周期\"></a>内存的生命周期</h3><ol>\n<li><p>分配你所需要的内存：<br>由于字符串、对象等没有固定的大小，js程序在每次创建字符串、对象的时候，程序都回分配内存来存储那个实体。</p>\n</li>\n<li><p>使用分配到的内存做点什么</p>\n</li>\n<li><p>不需要时将其释放回归：</p>\n<p>在不需要字符串、对象的时候，需要释放其所在的内存，否则将会消耗完系统中所有可用的内存，造成系统崩溃。这就是<strong>垃圾回收机制所存在的意义</strong>。</p>\n</li>\n</ol>\n<h2 id=\"垃圾回收原理浅析\"><a href=\"#垃圾回收原理浅析\" class=\"headerlink\" title=\"垃圾回收原理浅析\"></a>垃圾回收原理浅析</h2><p>现在各大浏览器通常用采用的垃圾回收有两种方法：标记清除（mark and sweep）、引用计数(reference counting)。</p>\n<ol>\n<li><h3 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h3><p><strong>工作原理</strong>：</p>\n<p>​        假定设置一个叫做根（root）的对象（在JavaScript里，根是全局对象）。垃圾回收器将定期从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象……从根开始，垃圾回收器将找到所有可以获得的对象和收集所有不能获得的对象。</p>\n<p>​        当变量进入环境时（例如局部声明一个变量），将这个变量标记为“进入环境”，当变量离开环境时，标记为“离开环境”。标记为“离开环境”的变量就会被回收内存。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func3</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> b = <span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"comment\">// 函数执行时，a b 分别被标记 进入环境</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func3() <span class=\"comment\">// 函数执行结束，a b 被标记 离开环境，被回收</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>工作流程</strong>：</p>\n<ol>\n<li>垃圾收集器会在运行的时候会给存储在内存中的<strong>所有变量都加上标记</strong>。</li>\n<li><strong>去掉环境中的变量</strong>以及被环境中的变量引用的变量的标记。</li>\n<li>那些<strong>还存在标记的变量被视为准备删除的变量</strong>。</li>\n<li>最后垃圾收集器会执行最后一步内存清除的工作，<strong>销毁那些带标记的值并回收它们所占用的内存空间</strong>。</li>\n</ol>\n</li>\n<li><h3 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h3><p>统计引用类型变量声明后被引用的次数，当次数为 0 时，该变量将被回收</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func4</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> c = &#123;&#125; <span class=\"comment\">// 引用类型变量 c的引用计数为 0</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> d = c <span class=\"comment\">// c 被 d 引用 c的引用计数为 1</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> e = c <span class=\"comment\">// c 被 e 引用 c的引用计数为 2</span></span><br><span class=\"line\">      d = &#123;&#125; <span class=\"comment\">// d 不再引用c c的引用计数减为 1</span></span><br><span class=\"line\">      e = <span class=\"literal\">null</span> <span class=\"comment\">// e 不再引用 c c的引用计数减为 0 将被回收</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是引用计数的方式，有一个相对明显的缺点——循环引用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func5</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> f = &#123;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> g = &#123;&#125;</span><br><span class=\"line\">      f.prop = g</span><br><span class=\"line\">      g.prop = f</span><br><span class=\"line\">      <span class=\"comment\">// 由于 f 和 g 互相引用，计数永远不可能为 0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决方式是，当我们不使用它们的时候，手动切断链接：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f.prop = <span class=\"literal\">null</span></span><br><span class=\"line\">g.prop = <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>淘汰</strong>：</p>\n<p>从2012年起，所有现代浏览器都使用了标记清除垃圾回收算法。所有对JavaScript垃圾回收算法的改进都是基于标记清除算法的改进。</p>\n</li>\n</ol>\n<h2 id=\"哪些情况会引起内存泄漏？\"><a href=\"#哪些情况会引起内存泄漏？\" class=\"headerlink\" title=\"哪些情况会引起内存泄漏？\"></a>哪些情况会引起内存泄漏？</h2><ol>\n<li><h4 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h4><p>顾名思义，全局变量一直在全局环境中，所以它不会被垃圾回收机制标记“离开环境”。自定义的还好，但是有时候意外的全局变量就会导致内存泄漏。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  name = <span class=\"string\">&#x27;全局变量1&#x27;</span>； <span class=\"comment\">// 没有声明的变量，实际上会指向window.name</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = <span class=\"string\">&#x27;全局变量2&#x27;</span>； <span class=\"comment\">// this会向上找 如果找不到对象，就会指向window</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure>\n\n<p><strong>解决方法</strong>：使用严格模式或者细心一点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  &quot;use strict&quot;</span>;</span><br><span class=\"line\">  name = <span class=\"string\">&#x27;全局变量1&#x27;</span>； <span class=\"comment\">// 此时会直接报错</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = <span class=\"string\">&#x27;全局变量2&#x27;</span>； <span class=\"comment\">// 严格模式下，this向上如果找不到对象，就会指向undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure>\n\n<p><strong>手动释放变量</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"built_in\">window</span>.age</span><br></pre></td></tr></table></figure></li>\n<li><h4 id=\"未销毁的定时器和回调函数\"><a href=\"#未销毁的定时器和回调函数\" class=\"headerlink\" title=\"未销毁的定时器和回调函数\"></a>未销毁的定时器和回调函数</h4><p>​        当<strong>不需要</strong><code>setInterval</code>或者<code>setTimeout</code>时，<strong>定时器没有被clear</strong>，定时器的<strong>回调函数以及内部依赖的变量都不能被回收</strong>，造成内存泄漏。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someResource = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> node = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node) &#123;</span><br><span class=\"line\">        node.innerHTML = <span class=\"built_in\">JSON</span>.stringify(someResource));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如果后续 <strong>test</strong> 元素被移除, 整个定时器实际上没有任何作用. 但如果你没有回收定时器, 整个定时器依然有效, 不但定时器无法被内存回收, 定时器函数中的依赖也无法回收. 在这个案例中的 <strong>someResource</strong> 也无法被回收.</p>\n</li>\n<li><h4 id=\"DOM引用\"><a href=\"#DOM引用\" class=\"headerlink\" title=\"DOM引用\"></a>DOM引用</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;test1&#x27;</span>&gt;</span>213<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> test1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test1&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.body.removeChild(test1); <span class=\"comment\">// dom删除了</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(test1, <span class=\"string\">&quot;test1&quot;</span>);  <span class=\"comment\">// 但是还存在引用</span></span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>控制台输出：</p>\n<img src=\"https://img.showydream.com/img/g92zJK-image-20210408115109640.png\" alt=\"image-20210408115109640\" style=\"zoom:50%;\" />\n\n<p><strong>解决办法</strong>：test1 = null;</p>\n</li>\n</ol>\n<h2 id=\"注意：闭包不会引起内存泄漏\"><a href=\"#注意：闭包不会引起内存泄漏\" class=\"headerlink\" title=\"注意：闭包不会引起内存泄漏\"></a>注意：闭包不会引起内存泄漏</h2><p>老浏览器（主要是IE6）有bug，闭包会造成内存泄漏，这个现在已经无须考虑了。</p>\n"},{"title":"Vue+TypeScript使用记录","date":"2020-12-17T04:43:34.000Z","cover":"https://img.showydream.com/img/iZX9MU-picography-food-platters-beach-restaurant-small-768x512.jpg","description":"最近参与开发了一个新项目，想着新项目就用用自己不熟悉的技术，一边学习一边进步，于是把目光瞄向了TypeScript。","keywords":"Vue2，TS","_content":"\n\n\n最近参与开发了一个新项目，想着新项目就用用自己不熟悉的技术，一边学习一边进步，于是把目光瞄向了TypeScript，话不多说，直接开干。\n\n\n## 一、创建项目\n\n项目搭建选择的是VueCli搭建的，写的时候试了一下发现Element-ui对vue3还没做支持，于是用的vue2+vue-property-decorator扩展（cli创建项目的时候自动引入了）配合TypeScript写的，css样式用scss写的。\n\n\n\n## 二、项目结构\n\n### 1、挂载全局方法\n\n封装Vue的原因是我想把api接口挂载到原型链上\n\n```javascript\nVue.prototype.$XXX = XXX;\n```\n\n这样就不用在每个文件里手动引一次了，但是TS会报下面的错：\n\n```javascript\nProperty '$XXX' does not exist on type 'XXX'.\n```\n\n这时候不管这个错误能正常发送请求，能拿到请求的数据，但是打包的时候就GG了，build不成功，因为有代码逻辑有error (￣▽￣)\" ，上网查Vue官方的解决方案如下：\n\n```javascript\n增强类型以配合插件使用\n\n插件可以增加 Vue 的全局/实例 property 和组件选项。在这些情况下，在 TypeScript 中制作插件需要类型声明。庆幸的是，TypeScript 有一个特性来补充现有的类型，叫做模块补充 (module augmentation)。\n\n例如，声明一个 string 类型的实例 property $myProperty：\n\n// 1. 确保在声明补充的类型之前导入 'vue'\nimport Vue from 'vue'\n\n// 2. 定制一个文件，设置你想要补充的类型\n//    在 types/vue.d.ts 里 Vue 有构造函数类型\ndeclare module 'vue/types/vue' {\n// 3. 声明为 Vue 补充的东西\n  interface Vue {\n    $myProperty: string\n  }\n}\n在你的项目中包含了上述作为声明文件的代码之后 (像 my-property.d.ts)，你就可以在 Vue 实例上使用 $myProperty 了。\n\nvar vm = new Vue()\nconsole.log(vm.$myProperty) // 将会顺利编译通过\n你也可以声明额外的 property 和组件选项：\n\nimport Vue from 'vue'\n\ndeclare module 'vue/types/vue' {\n  // 可以使用 `VueConstructor` 接口\n  // 来声明全局 property\n  interface VueConstructor {\n    $myGlobal: string\n  }\n}\n\n// ComponentOptions 声明于 types/options.d.ts 之中\ndeclare module 'vue/types/options' {\n  interface ComponentOptions<V extends Vue> {\n    myOption?: string\n  }\n}\n上述的声明允许下面的代码顺利编译通过：\n\n// 全局 property\nconsole.log(Vue.$myGlobal)\n\n// 额外的组件选项\nvar vm = new Vue({\n  myOption: 'Hello'\n})\n```\n\n这种解决方案应该是最合理的解决方案，在vue-router的组件的vue.d.ts文件中也见到如下：\n\n```javascript\n/**\n * Augment the typings of Vue.js\n */\n\nimport Vue from 'vue'\nimport VueRouter, { Route, RawLocation, NavigationGuard } from './index'\n\ndeclare module 'vue/types/vue' {\n  interface Vue {\n    $router: VueRouter\n    $route: Route\n  }\n}\n\ndeclare module 'vue/types/options' {\n  interface ComponentOptions<V extends Vue> {\n    router?: VueRouter\n    beforeRouteEnter?: NavigationGuard<V>\n    beforeRouteLeave?: NavigationGuard<V>\n    beforeRouteUpdate?: NavigationGuard<V>\n  }\n}\n```\n\n当时写的时候没有找到这种方案，所以采用了封装vue的方式解决，代码如下\n\n```javascript\nimport { Vue } from 'vue-property-decorator'\nimport services from '@/services'\n\nexport default class VueBase extends Vue {\n  public services = services\n\n  private lockStack: Array<number> = [] // 锁栈\n  private loading: any\n  loadingStart() {\n    if (!this.lockStack.length) {\n      this.loading = this.$loading({\n        background: 'rgba(0,0,0,0)',\n      })\n    }\n    this.lockStack.push(1)\n  }\n  loadingDone() {\n    if (this.lockStack.length <= 1) {\n      this.loading.close()\n    }\n    this.lockStack.pop()\n  }\n}\n```\n\n然后每次新建vue文件的时候就不从`vue-property-decorator`中引vue了，而是extends自己封装的VueBase类。\n\n### 2、Vuex使用\n\nvuex也是由于打包问题，必须严格按照TS语法写，上网查资料看到好多vuex封装的组件，例如`vuex-class`，但是在写的时候看vuex的源码发现vuex已经对ts做了兼容。再加上新项目的业务线比较简单，于是没用其他组件，最终实现如下：\n\n```\n// user.ts\nimport { Commit } from 'vuex'\nimport createUserServices from '@/services/user'\nimport { Message } from 'element-ui'\n\nconst userServices = createUserServices()\n\nconst state: any = {\n  userInfo: null,\n}\n\nconst mutations: any = {\n  UPDATE_USER_INFO(state: any, userInfo: any) {\n    state.userInfo = userInfo\n  },\n}\n\nconst actions: any = {\n  async getUserInfo(context: { commit: Commit }) {\n    const { status, msg, data } = await userServices.getUserInfo()\n    if (status !== 201) {\n      Message.error(msg)\n    }\n    context.commit('UPDATE_USER_INFO', data)\n  },\n  async logOut(context: { commit: Commit }) {\n    const { status, msg } = await userServices.logout()\n    if (status !== 201) {\n      Message.error(msg)\n    }\n    context.commit('UPDATE_USER_INFO', null)\n  },\n  clearInfo(context: { commit: Commit }) {\n    context.commit('UPDATE_USER_INFO', null)\n  },\n}\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n}\n```\n\n```\n// index.ts\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nimport user from './modules/user'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  modules: {\n    user,\n  },\n  getters: {\n    userInfo: (state: any) => state.user.userInfo,\n  },\n})\n\n// main.ts\nnew Vue({\n  router,\n  store,\n  i18n,\n  render: (h) => h(App),\n}).$mount('#app')\n\n```\n\n使用的时候可以在文件中引入store使用，在vue文件中可以直接调用this.$store使用\n\n### 3、EsLint配置\n\npackage.json\n\n```\n\"scripts\": {\n    \"lint\": \"eslint --ext .js,.vue src --fix\"\n  },\n\"devDependencies\": {\n    \"@typescript-eslint/eslint-plugin\": \"^4.9.0\",\n    \"@typescript-eslint/parser\": \"^4.9.0\",\n    \"babel-eslint\": \"10.1.0\",\n    \"eslint\": \"7.13.0\",\n    \"eslint-config-prettier\": \"^6.15.0\",\n    \"eslint-friendly-formatter\": \"4.0.1\",\n    \"eslint-plugin-import\": \"2.22.1\",\n    \"eslint-plugin-node\": \"11.1.0\",\n    \"eslint-plugin-prettier\": \"^3.2.0\",\n    \"eslint-plugin-promise\": \"4.2.1\",\n    \"eslint-plugin-vue\": \"7.1.0\",\n    \"prettier\": \"^2.2.1\",\n  }\n```\n\n.eslintrc\n\n```\nmodule.exports = {\n  root: true,\n  env: {\n    es6: true,\n    node: true\n  },\n  parserOptions: {\n    ecmaVersion: 2020,\n    parser: \"@typescript-eslint/parser\"\n  },\n  extends: [\n    'plugin:@typescript-eslint/recommended',\n    'prettier/@typescript-eslint',\n    'plugin:vue/recommended',\n    'plugin:prettier/recommended',\n    \"prettier/babel\",\n    \"prettier/standard\",\n    \"prettier/vue\"\n  ],\n  rules: {\n    'no-console': process.env.NODE_ENV === 'production' ? 'warn' : 'off',\n    'no-debugger': process.env.NODE_ENV === 'production' ? 'warn' : 'off',\n    \"@typescript-eslint/explicit-module-boundary-types\": 0,\n    \"@typescript-eslint/no-explicit-any\": 0,\n  }\n}\n```\n\n.pretterrc.js\n\n```\nmodule.exports = {\n  // tab缩进大小,默认为2\n  tabWidth: 2,\n// 使用tab缩进，默认false\n// useTabs: true,\n// 使用分号, 默认true\n  semi: false,\n// 使用单引号, 默认false(在jsx中配置无效, 默认都是双引号)\n  singleQuote: true,\n// 行尾逗号,默认none,可选 none|es5|all\n// es5 包括es5中的数组、对象\n// all 包括函数对象等所有可选\n  TrailingCooma: \"none\",\n// 对象中的空格 默认true\n// true: { foo: bar }\n// false: {foo: bar}\n  bracketSpacing: true,\n// JSX标签闭合位置 默认false\n// false: <div\n//          className=\"\"\n//          style={{}}\n//       >\n// true: <div\n//          className=\"\"\n//          style={{}} >\n  jsxBracketSameLine: false,\n// 箭头函数参数括号 默认avoid 可选 avoid| always\n// avoid 能省略括号的时候就省略 例如x => x\n// always 总是有括号\n  arrowParens: 'always',\n  endOfLine: \"auto\"\n};\n```\n\n## 三、TS使用到的特性\n\ninterface、函数返回、声明文件等，其他跟es6差不多\n\n\n\n## 四、总结\n\n总体用下来感觉，技术只是技术，ts并没有比es6高档很多，更多的还是自己的选择。\n","source":"_posts/Vue+TypeScript使用记录.md","raw":"---\ntitle: Vue+TypeScript使用记录\ndate: 2020-12-17 12:43:34\ncover: https://img.showydream.com/img/iZX9MU-picography-food-platters-beach-restaurant-small-768x512.jpg\ndescription: 最近参与开发了一个新项目，想着新项目就用用自己不熟悉的技术，一边学习一边进步，于是把目光瞄向了TypeScript。\nkeywords: Vue2，TS\ntags: TS笔记\ncategories:\n  - Vue\n---\n\n\n\n最近参与开发了一个新项目，想着新项目就用用自己不熟悉的技术，一边学习一边进步，于是把目光瞄向了TypeScript，话不多说，直接开干。\n\n\n## 一、创建项目\n\n项目搭建选择的是VueCli搭建的，写的时候试了一下发现Element-ui对vue3还没做支持，于是用的vue2+vue-property-decorator扩展（cli创建项目的时候自动引入了）配合TypeScript写的，css样式用scss写的。\n\n\n\n## 二、项目结构\n\n### 1、挂载全局方法\n\n封装Vue的原因是我想把api接口挂载到原型链上\n\n```javascript\nVue.prototype.$XXX = XXX;\n```\n\n这样就不用在每个文件里手动引一次了，但是TS会报下面的错：\n\n```javascript\nProperty '$XXX' does not exist on type 'XXX'.\n```\n\n这时候不管这个错误能正常发送请求，能拿到请求的数据，但是打包的时候就GG了，build不成功，因为有代码逻辑有error (￣▽￣)\" ，上网查Vue官方的解决方案如下：\n\n```javascript\n增强类型以配合插件使用\n\n插件可以增加 Vue 的全局/实例 property 和组件选项。在这些情况下，在 TypeScript 中制作插件需要类型声明。庆幸的是，TypeScript 有一个特性来补充现有的类型，叫做模块补充 (module augmentation)。\n\n例如，声明一个 string 类型的实例 property $myProperty：\n\n// 1. 确保在声明补充的类型之前导入 'vue'\nimport Vue from 'vue'\n\n// 2. 定制一个文件，设置你想要补充的类型\n//    在 types/vue.d.ts 里 Vue 有构造函数类型\ndeclare module 'vue/types/vue' {\n// 3. 声明为 Vue 补充的东西\n  interface Vue {\n    $myProperty: string\n  }\n}\n在你的项目中包含了上述作为声明文件的代码之后 (像 my-property.d.ts)，你就可以在 Vue 实例上使用 $myProperty 了。\n\nvar vm = new Vue()\nconsole.log(vm.$myProperty) // 将会顺利编译通过\n你也可以声明额外的 property 和组件选项：\n\nimport Vue from 'vue'\n\ndeclare module 'vue/types/vue' {\n  // 可以使用 `VueConstructor` 接口\n  // 来声明全局 property\n  interface VueConstructor {\n    $myGlobal: string\n  }\n}\n\n// ComponentOptions 声明于 types/options.d.ts 之中\ndeclare module 'vue/types/options' {\n  interface ComponentOptions<V extends Vue> {\n    myOption?: string\n  }\n}\n上述的声明允许下面的代码顺利编译通过：\n\n// 全局 property\nconsole.log(Vue.$myGlobal)\n\n// 额外的组件选项\nvar vm = new Vue({\n  myOption: 'Hello'\n})\n```\n\n这种解决方案应该是最合理的解决方案，在vue-router的组件的vue.d.ts文件中也见到如下：\n\n```javascript\n/**\n * Augment the typings of Vue.js\n */\n\nimport Vue from 'vue'\nimport VueRouter, { Route, RawLocation, NavigationGuard } from './index'\n\ndeclare module 'vue/types/vue' {\n  interface Vue {\n    $router: VueRouter\n    $route: Route\n  }\n}\n\ndeclare module 'vue/types/options' {\n  interface ComponentOptions<V extends Vue> {\n    router?: VueRouter\n    beforeRouteEnter?: NavigationGuard<V>\n    beforeRouteLeave?: NavigationGuard<V>\n    beforeRouteUpdate?: NavigationGuard<V>\n  }\n}\n```\n\n当时写的时候没有找到这种方案，所以采用了封装vue的方式解决，代码如下\n\n```javascript\nimport { Vue } from 'vue-property-decorator'\nimport services from '@/services'\n\nexport default class VueBase extends Vue {\n  public services = services\n\n  private lockStack: Array<number> = [] // 锁栈\n  private loading: any\n  loadingStart() {\n    if (!this.lockStack.length) {\n      this.loading = this.$loading({\n        background: 'rgba(0,0,0,0)',\n      })\n    }\n    this.lockStack.push(1)\n  }\n  loadingDone() {\n    if (this.lockStack.length <= 1) {\n      this.loading.close()\n    }\n    this.lockStack.pop()\n  }\n}\n```\n\n然后每次新建vue文件的时候就不从`vue-property-decorator`中引vue了，而是extends自己封装的VueBase类。\n\n### 2、Vuex使用\n\nvuex也是由于打包问题，必须严格按照TS语法写，上网查资料看到好多vuex封装的组件，例如`vuex-class`，但是在写的时候看vuex的源码发现vuex已经对ts做了兼容。再加上新项目的业务线比较简单，于是没用其他组件，最终实现如下：\n\n```\n// user.ts\nimport { Commit } from 'vuex'\nimport createUserServices from '@/services/user'\nimport { Message } from 'element-ui'\n\nconst userServices = createUserServices()\n\nconst state: any = {\n  userInfo: null,\n}\n\nconst mutations: any = {\n  UPDATE_USER_INFO(state: any, userInfo: any) {\n    state.userInfo = userInfo\n  },\n}\n\nconst actions: any = {\n  async getUserInfo(context: { commit: Commit }) {\n    const { status, msg, data } = await userServices.getUserInfo()\n    if (status !== 201) {\n      Message.error(msg)\n    }\n    context.commit('UPDATE_USER_INFO', data)\n  },\n  async logOut(context: { commit: Commit }) {\n    const { status, msg } = await userServices.logout()\n    if (status !== 201) {\n      Message.error(msg)\n    }\n    context.commit('UPDATE_USER_INFO', null)\n  },\n  clearInfo(context: { commit: Commit }) {\n    context.commit('UPDATE_USER_INFO', null)\n  },\n}\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n}\n```\n\n```\n// index.ts\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nimport user from './modules/user'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  modules: {\n    user,\n  },\n  getters: {\n    userInfo: (state: any) => state.user.userInfo,\n  },\n})\n\n// main.ts\nnew Vue({\n  router,\n  store,\n  i18n,\n  render: (h) => h(App),\n}).$mount('#app')\n\n```\n\n使用的时候可以在文件中引入store使用，在vue文件中可以直接调用this.$store使用\n\n### 3、EsLint配置\n\npackage.json\n\n```\n\"scripts\": {\n    \"lint\": \"eslint --ext .js,.vue src --fix\"\n  },\n\"devDependencies\": {\n    \"@typescript-eslint/eslint-plugin\": \"^4.9.0\",\n    \"@typescript-eslint/parser\": \"^4.9.0\",\n    \"babel-eslint\": \"10.1.0\",\n    \"eslint\": \"7.13.0\",\n    \"eslint-config-prettier\": \"^6.15.0\",\n    \"eslint-friendly-formatter\": \"4.0.1\",\n    \"eslint-plugin-import\": \"2.22.1\",\n    \"eslint-plugin-node\": \"11.1.0\",\n    \"eslint-plugin-prettier\": \"^3.2.0\",\n    \"eslint-plugin-promise\": \"4.2.1\",\n    \"eslint-plugin-vue\": \"7.1.0\",\n    \"prettier\": \"^2.2.1\",\n  }\n```\n\n.eslintrc\n\n```\nmodule.exports = {\n  root: true,\n  env: {\n    es6: true,\n    node: true\n  },\n  parserOptions: {\n    ecmaVersion: 2020,\n    parser: \"@typescript-eslint/parser\"\n  },\n  extends: [\n    'plugin:@typescript-eslint/recommended',\n    'prettier/@typescript-eslint',\n    'plugin:vue/recommended',\n    'plugin:prettier/recommended',\n    \"prettier/babel\",\n    \"prettier/standard\",\n    \"prettier/vue\"\n  ],\n  rules: {\n    'no-console': process.env.NODE_ENV === 'production' ? 'warn' : 'off',\n    'no-debugger': process.env.NODE_ENV === 'production' ? 'warn' : 'off',\n    \"@typescript-eslint/explicit-module-boundary-types\": 0,\n    \"@typescript-eslint/no-explicit-any\": 0,\n  }\n}\n```\n\n.pretterrc.js\n\n```\nmodule.exports = {\n  // tab缩进大小,默认为2\n  tabWidth: 2,\n// 使用tab缩进，默认false\n// useTabs: true,\n// 使用分号, 默认true\n  semi: false,\n// 使用单引号, 默认false(在jsx中配置无效, 默认都是双引号)\n  singleQuote: true,\n// 行尾逗号,默认none,可选 none|es5|all\n// es5 包括es5中的数组、对象\n// all 包括函数对象等所有可选\n  TrailingCooma: \"none\",\n// 对象中的空格 默认true\n// true: { foo: bar }\n// false: {foo: bar}\n  bracketSpacing: true,\n// JSX标签闭合位置 默认false\n// false: <div\n//          className=\"\"\n//          style={{}}\n//       >\n// true: <div\n//          className=\"\"\n//          style={{}} >\n  jsxBracketSameLine: false,\n// 箭头函数参数括号 默认avoid 可选 avoid| always\n// avoid 能省略括号的时候就省略 例如x => x\n// always 总是有括号\n  arrowParens: 'always',\n  endOfLine: \"auto\"\n};\n```\n\n## 三、TS使用到的特性\n\ninterface、函数返回、声明文件等，其他跟es6差不多\n\n\n\n## 四、总结\n\n总体用下来感觉，技术只是技术，ts并没有比es6高档很多，更多的还是自己的选择。\n","slug":"Vue+TypeScript使用记录","published":1,"updated":"2021-11-08T06:41:35.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62cx000rrifyh8pm4col","content":"<p>最近参与开发了一个新项目，想着新项目就用用自己不熟悉的技术，一边学习一边进步，于是把目光瞄向了TypeScript，话不多说，直接开干。</p>\n<h2 id=\"一、创建项目\"><a href=\"#一、创建项目\" class=\"headerlink\" title=\"一、创建项目\"></a>一、创建项目</h2><p>项目搭建选择的是VueCli搭建的，写的时候试了一下发现Element-ui对vue3还没做支持，于是用的vue2+vue-property-decorator扩展（cli创建项目的时候自动引入了）配合TypeScript写的，css样式用scss写的。</p>\n<h2 id=\"二、项目结构\"><a href=\"#二、项目结构\" class=\"headerlink\" title=\"二、项目结构\"></a>二、项目结构</h2><h3 id=\"1、挂载全局方法\"><a href=\"#1、挂载全局方法\" class=\"headerlink\" title=\"1、挂载全局方法\"></a>1、挂载全局方法</h3><p>封装Vue的原因是我想把api接口挂载到原型链上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$XXX = XXX;</span><br></pre></td></tr></table></figure>\n\n<p>这样就不用在每个文件里手动引一次了，但是TS会报下面的错：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Property <span class=\"string\">&#x27;$XXX&#x27;</span> does not exist on type <span class=\"string\">&#x27;XXX&#x27;</span>.</span><br></pre></td></tr></table></figure>\n\n<p>这时候不管这个错误能正常发送请求，能拿到请求的数据，但是打包的时候就GG了，build不成功，因为有代码逻辑有error (￣▽￣)” ，上网查Vue官方的解决方案如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">增强类型以配合插件使用</span><br><span class=\"line\"></span><br><span class=\"line\">插件可以增加 Vue 的全局/实例 property 和组件选项。在这些情况下，在 TypeScript 中制作插件需要类型声明。庆幸的是，TypeScript 有一个特性来补充现有的类型，叫做模块补充 (<span class=\"built_in\">module</span> augmentation)。</span><br><span class=\"line\"></span><br><span class=\"line\">例如，声明一个 string 类型的实例 property $myProperty：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 确保在声明补充的类型之前导入 &#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 定制一个文件，设置你想要补充的类型</span></span><br><span class=\"line\"><span class=\"comment\">//    在 types/vue.d.ts 里 Vue 有构造函数类型</span></span><br><span class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">&#x27;vue/types/vue&#x27;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 3. 声明为 Vue 补充的东西</span></span><br><span class=\"line\">  interface Vue &#123;</span><br><span class=\"line\">    <span class=\"attr\">$myProperty</span>: string</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">在你的项目中包含了上述作为声明文件的代码之后 (像 my-property.d.ts)，你就可以在 Vue 实例上使用 $myProperty 了。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.$myProperty) <span class=\"comment\">// 将会顺利编译通过</span></span><br><span class=\"line\">你也可以声明额外的 property 和组件选项：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">&#x27;vue/types/vue&#x27;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 可以使用 `VueConstructor` 接口</span></span><br><span class=\"line\">  <span class=\"comment\">// 来声明全局 property</span></span><br><span class=\"line\">  interface VueConstructor &#123;</span><br><span class=\"line\">    <span class=\"attr\">$myGlobal</span>: string</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ComponentOptions 声明于 types/options.d.ts 之中</span></span><br><span class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">&#x27;vue/types/options&#x27;</span> &#123;</span><br><span class=\"line\">  interface ComponentOptions&lt;V <span class=\"keyword\">extends</span> Vue&gt; &#123;</span><br><span class=\"line\">    myOption?: string</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">上述的声明允许下面的代码顺利编译通过：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 全局 property</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Vue.$myGlobal)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 额外的组件选项</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">myOption</span>: <span class=\"string\">&#x27;Hello&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这种解决方案应该是最合理的解决方案，在vue-router的组件的vue.d.ts文件中也见到如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Augment the typings of Vue.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter, &#123; Route, RawLocation, NavigationGuard &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./index&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">&#x27;vue/types/vue&#x27;</span> &#123;</span><br><span class=\"line\">  interface Vue &#123;</span><br><span class=\"line\">    <span class=\"attr\">$router</span>: VueRouter</span><br><span class=\"line\">    <span class=\"attr\">$route</span>: Route</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">&#x27;vue/types/options&#x27;</span> &#123;</span><br><span class=\"line\">  interface ComponentOptions&lt;V <span class=\"keyword\">extends</span> Vue&gt; &#123;</span><br><span class=\"line\">    router?: VueRouter</span><br><span class=\"line\">    beforeRouteEnter?: NavigationGuard&lt;V&gt;</span><br><span class=\"line\">    beforeRouteLeave?: NavigationGuard&lt;V&gt;</span><br><span class=\"line\">    beforeRouteUpdate?: NavigationGuard&lt;V&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当时写的时候没有找到这种方案，所以采用了封装vue的方式解决，代码如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Vue &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-property-decorator&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> services <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/services&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VueBase</span> <span class=\"keyword\">extends</span> <span class=\"title\">Vue</span> </span>&#123;</span><br><span class=\"line\">  public services = services</span><br><span class=\"line\"></span><br><span class=\"line\">  private lockStack: <span class=\"built_in\">Array</span>&lt;number&gt; = [] <span class=\"comment\">// 锁栈</span></span><br><span class=\"line\">  private loading: any</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">loadingStart</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.lockStack.length) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.loading = <span class=\"built_in\">this</span>.$loading(&#123;</span><br><span class=\"line\">        <span class=\"attr\">background</span>: <span class=\"string\">&#x27;rgba(0,0,0,0)&#x27;</span>,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.lockStack.push(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">loadingDone</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.lockStack.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.loading.close()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.lockStack.pop()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后每次新建vue文件的时候就不从<code>vue-property-decorator</code>中引vue了，而是extends自己封装的VueBase类。</p>\n<h3 id=\"2、Vuex使用\"><a href=\"#2、Vuex使用\" class=\"headerlink\" title=\"2、Vuex使用\"></a>2、Vuex使用</h3><p>vuex也是由于打包问题，必须严格按照TS语法写，上网查资料看到好多vuex封装的组件，例如<code>vuex-class</code>，但是在写的时候看vuex的源码发现vuex已经对ts做了兼容。再加上新项目的业务线比较简单，于是没用其他组件，最终实现如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// user.ts</span><br><span class=\"line\">import &#123; Commit &#125; from &#x27;vuex&#x27;</span><br><span class=\"line\">import createUserServices from &#x27;@/services/user&#x27;</span><br><span class=\"line\">import &#123; Message &#125; from &#x27;element-ui&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">const userServices = createUserServices()</span><br><span class=\"line\"></span><br><span class=\"line\">const state: any = &#123;</span><br><span class=\"line\">  userInfo: null,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const mutations: any = &#123;</span><br><span class=\"line\">  UPDATE_USER_INFO(state: any, userInfo: any) &#123;</span><br><span class=\"line\">    state.userInfo = userInfo</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const actions: any = &#123;</span><br><span class=\"line\">  async getUserInfo(context: &#123; commit: Commit &#125;) &#123;</span><br><span class=\"line\">    const &#123; status, msg, data &#125; = await userServices.getUserInfo()</span><br><span class=\"line\">    if (status !== 201) &#123;</span><br><span class=\"line\">      Message.error(msg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    context.commit(&#x27;UPDATE_USER_INFO&#x27;, data)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  async logOut(context: &#123; commit: Commit &#125;) &#123;</span><br><span class=\"line\">    const &#123; status, msg &#125; = await userServices.logout()</span><br><span class=\"line\">    if (status !== 201) &#123;</span><br><span class=\"line\">      Message.error(msg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    context.commit(&#x27;UPDATE_USER_INFO&#x27;, null)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  clearInfo(context: &#123; commit: Commit &#125;) &#123;</span><br><span class=\"line\">    context.commit(&#x27;UPDATE_USER_INFO&#x27;, null)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  namespaced: true,</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  actions,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.ts</span><br><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">import Vuex from &#x27;vuex&#x27;</span><br><span class=\"line\">import user from &#x27;./modules/user&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\">export default new Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    user,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    userInfo: (state: any) =&gt; state.user.userInfo,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// main.ts</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  i18n,</span><br><span class=\"line\">  render: (h) =&gt; h(App),</span><br><span class=\"line\">&#125;).$mount(&#x27;#app&#x27;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用的时候可以在文件中引入store使用，在vue文件中可以直接调用this.$store使用</p>\n<h3 id=\"3、EsLint配置\"><a href=\"#3、EsLint配置\" class=\"headerlink\" title=\"3、EsLint配置\"></a>3、EsLint配置</h3><p>package.json</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;lint&quot;: &quot;eslint --ext .js,.vue src --fix&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;@typescript-eslint/eslint-plugin&quot;: &quot;^4.9.0&quot;,</span><br><span class=\"line\">    &quot;@typescript-eslint/parser&quot;: &quot;^4.9.0&quot;,</span><br><span class=\"line\">    &quot;babel-eslint&quot;: &quot;10.1.0&quot;,</span><br><span class=\"line\">    &quot;eslint&quot;: &quot;7.13.0&quot;,</span><br><span class=\"line\">    &quot;eslint-config-prettier&quot;: &quot;^6.15.0&quot;,</span><br><span class=\"line\">    &quot;eslint-friendly-formatter&quot;: &quot;4.0.1&quot;,</span><br><span class=\"line\">    &quot;eslint-plugin-import&quot;: &quot;2.22.1&quot;,</span><br><span class=\"line\">    &quot;eslint-plugin-node&quot;: &quot;11.1.0&quot;,</span><br><span class=\"line\">    &quot;eslint-plugin-prettier&quot;: &quot;^3.2.0&quot;,</span><br><span class=\"line\">    &quot;eslint-plugin-promise&quot;: &quot;4.2.1&quot;,</span><br><span class=\"line\">    &quot;eslint-plugin-vue&quot;: &quot;7.1.0&quot;,</span><br><span class=\"line\">    &quot;prettier&quot;: &quot;^2.2.1&quot;,</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>.eslintrc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  root: true,</span><br><span class=\"line\">  env: &#123;</span><br><span class=\"line\">    es6: true,</span><br><span class=\"line\">    node: true</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  parserOptions: &#123;</span><br><span class=\"line\">    ecmaVersion: 2020,</span><br><span class=\"line\">    parser: &quot;@typescript-eslint/parser&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  extends: [</span><br><span class=\"line\">    &#x27;plugin:@typescript-eslint/recommended&#x27;,</span><br><span class=\"line\">    &#x27;prettier/@typescript-eslint&#x27;,</span><br><span class=\"line\">    &#x27;plugin:vue/recommended&#x27;,</span><br><span class=\"line\">    &#x27;plugin:prettier/recommended&#x27;,</span><br><span class=\"line\">    &quot;prettier/babel&quot;,</span><br><span class=\"line\">    &quot;prettier/standard&quot;,</span><br><span class=\"line\">    &quot;prettier/vue&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    &#x27;no-console&#x27;: process.env.NODE_ENV === &#x27;production&#x27; ? &#x27;warn&#x27; : &#x27;off&#x27;,</span><br><span class=\"line\">    &#x27;no-debugger&#x27;: process.env.NODE_ENV === &#x27;production&#x27; ? &#x27;warn&#x27; : &#x27;off&#x27;,</span><br><span class=\"line\">    &quot;@typescript-eslint/explicit-module-boundary-types&quot;: 0,</span><br><span class=\"line\">    &quot;@typescript-eslint/no-explicit-any&quot;: 0,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>.pretterrc.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  // tab缩进大小,默认为2</span><br><span class=\"line\">  tabWidth: 2,</span><br><span class=\"line\">// 使用tab缩进，默认false</span><br><span class=\"line\">// useTabs: true,</span><br><span class=\"line\">// 使用分号, 默认true</span><br><span class=\"line\">  semi: false,</span><br><span class=\"line\">// 使用单引号, 默认false(在jsx中配置无效, 默认都是双引号)</span><br><span class=\"line\">  singleQuote: true,</span><br><span class=\"line\">// 行尾逗号,默认none,可选 none|es5|all</span><br><span class=\"line\">// es5 包括es5中的数组、对象</span><br><span class=\"line\">// all 包括函数对象等所有可选</span><br><span class=\"line\">  TrailingCooma: &quot;none&quot;,</span><br><span class=\"line\">// 对象中的空格 默认true</span><br><span class=\"line\">// true: &#123; foo: bar &#125;</span><br><span class=\"line\">// false: &#123;foo: bar&#125;</span><br><span class=\"line\">  bracketSpacing: true,</span><br><span class=\"line\">// JSX标签闭合位置 默认false</span><br><span class=\"line\">// false: &lt;div</span><br><span class=\"line\">//          className=&quot;&quot;</span><br><span class=\"line\">//          style=&#123;&#123;&#125;&#125;</span><br><span class=\"line\">//       &gt;</span><br><span class=\"line\">// true: &lt;div</span><br><span class=\"line\">//          className=&quot;&quot;</span><br><span class=\"line\">//          style=&#123;&#123;&#125;&#125; &gt;</span><br><span class=\"line\">  jsxBracketSameLine: false,</span><br><span class=\"line\">// 箭头函数参数括号 默认avoid 可选 avoid| always</span><br><span class=\"line\">// avoid 能省略括号的时候就省略 例如x =&gt; x</span><br><span class=\"line\">// always 总是有括号</span><br><span class=\"line\">  arrowParens: &#x27;always&#x27;,</span><br><span class=\"line\">  endOfLine: &quot;auto&quot;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、TS使用到的特性\"><a href=\"#三、TS使用到的特性\" class=\"headerlink\" title=\"三、TS使用到的特性\"></a>三、TS使用到的特性</h2><p>interface、函数返回、声明文件等，其他跟es6差不多</p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>总体用下来感觉，技术只是技术，ts并没有比es6高档很多，更多的还是自己的选择。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近参与开发了一个新项目，想着新项目就用用自己不熟悉的技术，一边学习一边进步，于是把目光瞄向了TypeScript，话不多说，直接开干。</p>\n<h2 id=\"一、创建项目\"><a href=\"#一、创建项目\" class=\"headerlink\" title=\"一、创建项目\"></a>一、创建项目</h2><p>项目搭建选择的是VueCli搭建的，写的时候试了一下发现Element-ui对vue3还没做支持，于是用的vue2+vue-property-decorator扩展（cli创建项目的时候自动引入了）配合TypeScript写的，css样式用scss写的。</p>\n<h2 id=\"二、项目结构\"><a href=\"#二、项目结构\" class=\"headerlink\" title=\"二、项目结构\"></a>二、项目结构</h2><h3 id=\"1、挂载全局方法\"><a href=\"#1、挂载全局方法\" class=\"headerlink\" title=\"1、挂载全局方法\"></a>1、挂载全局方法</h3><p>封装Vue的原因是我想把api接口挂载到原型链上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$XXX = XXX;</span><br></pre></td></tr></table></figure>\n\n<p>这样就不用在每个文件里手动引一次了，但是TS会报下面的错：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Property <span class=\"string\">&#x27;$XXX&#x27;</span> does not exist on type <span class=\"string\">&#x27;XXX&#x27;</span>.</span><br></pre></td></tr></table></figure>\n\n<p>这时候不管这个错误能正常发送请求，能拿到请求的数据，但是打包的时候就GG了，build不成功，因为有代码逻辑有error (￣▽￣)” ，上网查Vue官方的解决方案如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">增强类型以配合插件使用</span><br><span class=\"line\"></span><br><span class=\"line\">插件可以增加 Vue 的全局/实例 property 和组件选项。在这些情况下，在 TypeScript 中制作插件需要类型声明。庆幸的是，TypeScript 有一个特性来补充现有的类型，叫做模块补充 (<span class=\"built_in\">module</span> augmentation)。</span><br><span class=\"line\"></span><br><span class=\"line\">例如，声明一个 string 类型的实例 property $myProperty：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 确保在声明补充的类型之前导入 &#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 定制一个文件，设置你想要补充的类型</span></span><br><span class=\"line\"><span class=\"comment\">//    在 types/vue.d.ts 里 Vue 有构造函数类型</span></span><br><span class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">&#x27;vue/types/vue&#x27;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 3. 声明为 Vue 补充的东西</span></span><br><span class=\"line\">  interface Vue &#123;</span><br><span class=\"line\">    <span class=\"attr\">$myProperty</span>: string</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">在你的项目中包含了上述作为声明文件的代码之后 (像 my-property.d.ts)，你就可以在 Vue 实例上使用 $myProperty 了。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.$myProperty) <span class=\"comment\">// 将会顺利编译通过</span></span><br><span class=\"line\">你也可以声明额外的 property 和组件选项：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">&#x27;vue/types/vue&#x27;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 可以使用 `VueConstructor` 接口</span></span><br><span class=\"line\">  <span class=\"comment\">// 来声明全局 property</span></span><br><span class=\"line\">  interface VueConstructor &#123;</span><br><span class=\"line\">    <span class=\"attr\">$myGlobal</span>: string</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ComponentOptions 声明于 types/options.d.ts 之中</span></span><br><span class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">&#x27;vue/types/options&#x27;</span> &#123;</span><br><span class=\"line\">  interface ComponentOptions&lt;V <span class=\"keyword\">extends</span> Vue&gt; &#123;</span><br><span class=\"line\">    myOption?: string</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">上述的声明允许下面的代码顺利编译通过：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 全局 property</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Vue.$myGlobal)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 额外的组件选项</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">myOption</span>: <span class=\"string\">&#x27;Hello&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这种解决方案应该是最合理的解决方案，在vue-router的组件的vue.d.ts文件中也见到如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Augment the typings of Vue.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter, &#123; Route, RawLocation, NavigationGuard &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./index&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">&#x27;vue/types/vue&#x27;</span> &#123;</span><br><span class=\"line\">  interface Vue &#123;</span><br><span class=\"line\">    <span class=\"attr\">$router</span>: VueRouter</span><br><span class=\"line\">    <span class=\"attr\">$route</span>: Route</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">&#x27;vue/types/options&#x27;</span> &#123;</span><br><span class=\"line\">  interface ComponentOptions&lt;V <span class=\"keyword\">extends</span> Vue&gt; &#123;</span><br><span class=\"line\">    router?: VueRouter</span><br><span class=\"line\">    beforeRouteEnter?: NavigationGuard&lt;V&gt;</span><br><span class=\"line\">    beforeRouteLeave?: NavigationGuard&lt;V&gt;</span><br><span class=\"line\">    beforeRouteUpdate?: NavigationGuard&lt;V&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当时写的时候没有找到这种方案，所以采用了封装vue的方式解决，代码如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Vue &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-property-decorator&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> services <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/services&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VueBase</span> <span class=\"keyword\">extends</span> <span class=\"title\">Vue</span> </span>&#123;</span><br><span class=\"line\">  public services = services</span><br><span class=\"line\"></span><br><span class=\"line\">  private lockStack: <span class=\"built_in\">Array</span>&lt;number&gt; = [] <span class=\"comment\">// 锁栈</span></span><br><span class=\"line\">  private loading: any</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">loadingStart</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.lockStack.length) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.loading = <span class=\"built_in\">this</span>.$loading(&#123;</span><br><span class=\"line\">        <span class=\"attr\">background</span>: <span class=\"string\">&#x27;rgba(0,0,0,0)&#x27;</span>,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.lockStack.push(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">loadingDone</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.lockStack.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.loading.close()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.lockStack.pop()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后每次新建vue文件的时候就不从<code>vue-property-decorator</code>中引vue了，而是extends自己封装的VueBase类。</p>\n<h3 id=\"2、Vuex使用\"><a href=\"#2、Vuex使用\" class=\"headerlink\" title=\"2、Vuex使用\"></a>2、Vuex使用</h3><p>vuex也是由于打包问题，必须严格按照TS语法写，上网查资料看到好多vuex封装的组件，例如<code>vuex-class</code>，但是在写的时候看vuex的源码发现vuex已经对ts做了兼容。再加上新项目的业务线比较简单，于是没用其他组件，最终实现如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// user.ts</span><br><span class=\"line\">import &#123; Commit &#125; from &#x27;vuex&#x27;</span><br><span class=\"line\">import createUserServices from &#x27;@/services/user&#x27;</span><br><span class=\"line\">import &#123; Message &#125; from &#x27;element-ui&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">const userServices = createUserServices()</span><br><span class=\"line\"></span><br><span class=\"line\">const state: any = &#123;</span><br><span class=\"line\">  userInfo: null,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const mutations: any = &#123;</span><br><span class=\"line\">  UPDATE_USER_INFO(state: any, userInfo: any) &#123;</span><br><span class=\"line\">    state.userInfo = userInfo</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const actions: any = &#123;</span><br><span class=\"line\">  async getUserInfo(context: &#123; commit: Commit &#125;) &#123;</span><br><span class=\"line\">    const &#123; status, msg, data &#125; = await userServices.getUserInfo()</span><br><span class=\"line\">    if (status !== 201) &#123;</span><br><span class=\"line\">      Message.error(msg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    context.commit(&#x27;UPDATE_USER_INFO&#x27;, data)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  async logOut(context: &#123; commit: Commit &#125;) &#123;</span><br><span class=\"line\">    const &#123; status, msg &#125; = await userServices.logout()</span><br><span class=\"line\">    if (status !== 201) &#123;</span><br><span class=\"line\">      Message.error(msg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    context.commit(&#x27;UPDATE_USER_INFO&#x27;, null)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  clearInfo(context: &#123; commit: Commit &#125;) &#123;</span><br><span class=\"line\">    context.commit(&#x27;UPDATE_USER_INFO&#x27;, null)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  namespaced: true,</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  actions,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.ts</span><br><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">import Vuex from &#x27;vuex&#x27;</span><br><span class=\"line\">import user from &#x27;./modules/user&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\">export default new Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    user,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    userInfo: (state: any) =&gt; state.user.userInfo,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// main.ts</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  i18n,</span><br><span class=\"line\">  render: (h) =&gt; h(App),</span><br><span class=\"line\">&#125;).$mount(&#x27;#app&#x27;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用的时候可以在文件中引入store使用，在vue文件中可以直接调用this.$store使用</p>\n<h3 id=\"3、EsLint配置\"><a href=\"#3、EsLint配置\" class=\"headerlink\" title=\"3、EsLint配置\"></a>3、EsLint配置</h3><p>package.json</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;lint&quot;: &quot;eslint --ext .js,.vue src --fix&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;@typescript-eslint/eslint-plugin&quot;: &quot;^4.9.0&quot;,</span><br><span class=\"line\">    &quot;@typescript-eslint/parser&quot;: &quot;^4.9.0&quot;,</span><br><span class=\"line\">    &quot;babel-eslint&quot;: &quot;10.1.0&quot;,</span><br><span class=\"line\">    &quot;eslint&quot;: &quot;7.13.0&quot;,</span><br><span class=\"line\">    &quot;eslint-config-prettier&quot;: &quot;^6.15.0&quot;,</span><br><span class=\"line\">    &quot;eslint-friendly-formatter&quot;: &quot;4.0.1&quot;,</span><br><span class=\"line\">    &quot;eslint-plugin-import&quot;: &quot;2.22.1&quot;,</span><br><span class=\"line\">    &quot;eslint-plugin-node&quot;: &quot;11.1.0&quot;,</span><br><span class=\"line\">    &quot;eslint-plugin-prettier&quot;: &quot;^3.2.0&quot;,</span><br><span class=\"line\">    &quot;eslint-plugin-promise&quot;: &quot;4.2.1&quot;,</span><br><span class=\"line\">    &quot;eslint-plugin-vue&quot;: &quot;7.1.0&quot;,</span><br><span class=\"line\">    &quot;prettier&quot;: &quot;^2.2.1&quot;,</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>.eslintrc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  root: true,</span><br><span class=\"line\">  env: &#123;</span><br><span class=\"line\">    es6: true,</span><br><span class=\"line\">    node: true</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  parserOptions: &#123;</span><br><span class=\"line\">    ecmaVersion: 2020,</span><br><span class=\"line\">    parser: &quot;@typescript-eslint/parser&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  extends: [</span><br><span class=\"line\">    &#x27;plugin:@typescript-eslint/recommended&#x27;,</span><br><span class=\"line\">    &#x27;prettier/@typescript-eslint&#x27;,</span><br><span class=\"line\">    &#x27;plugin:vue/recommended&#x27;,</span><br><span class=\"line\">    &#x27;plugin:prettier/recommended&#x27;,</span><br><span class=\"line\">    &quot;prettier/babel&quot;,</span><br><span class=\"line\">    &quot;prettier/standard&quot;,</span><br><span class=\"line\">    &quot;prettier/vue&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    &#x27;no-console&#x27;: process.env.NODE_ENV === &#x27;production&#x27; ? &#x27;warn&#x27; : &#x27;off&#x27;,</span><br><span class=\"line\">    &#x27;no-debugger&#x27;: process.env.NODE_ENV === &#x27;production&#x27; ? &#x27;warn&#x27; : &#x27;off&#x27;,</span><br><span class=\"line\">    &quot;@typescript-eslint/explicit-module-boundary-types&quot;: 0,</span><br><span class=\"line\">    &quot;@typescript-eslint/no-explicit-any&quot;: 0,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>.pretterrc.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  // tab缩进大小,默认为2</span><br><span class=\"line\">  tabWidth: 2,</span><br><span class=\"line\">// 使用tab缩进，默认false</span><br><span class=\"line\">// useTabs: true,</span><br><span class=\"line\">// 使用分号, 默认true</span><br><span class=\"line\">  semi: false,</span><br><span class=\"line\">// 使用单引号, 默认false(在jsx中配置无效, 默认都是双引号)</span><br><span class=\"line\">  singleQuote: true,</span><br><span class=\"line\">// 行尾逗号,默认none,可选 none|es5|all</span><br><span class=\"line\">// es5 包括es5中的数组、对象</span><br><span class=\"line\">// all 包括函数对象等所有可选</span><br><span class=\"line\">  TrailingCooma: &quot;none&quot;,</span><br><span class=\"line\">// 对象中的空格 默认true</span><br><span class=\"line\">// true: &#123; foo: bar &#125;</span><br><span class=\"line\">// false: &#123;foo: bar&#125;</span><br><span class=\"line\">  bracketSpacing: true,</span><br><span class=\"line\">// JSX标签闭合位置 默认false</span><br><span class=\"line\">// false: &lt;div</span><br><span class=\"line\">//          className=&quot;&quot;</span><br><span class=\"line\">//          style=&#123;&#123;&#125;&#125;</span><br><span class=\"line\">//       &gt;</span><br><span class=\"line\">// true: &lt;div</span><br><span class=\"line\">//          className=&quot;&quot;</span><br><span class=\"line\">//          style=&#123;&#123;&#125;&#125; &gt;</span><br><span class=\"line\">  jsxBracketSameLine: false,</span><br><span class=\"line\">// 箭头函数参数括号 默认avoid 可选 avoid| always</span><br><span class=\"line\">// avoid 能省略括号的时候就省略 例如x =&gt; x</span><br><span class=\"line\">// always 总是有括号</span><br><span class=\"line\">  arrowParens: &#x27;always&#x27;,</span><br><span class=\"line\">  endOfLine: &quot;auto&quot;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、TS使用到的特性\"><a href=\"#三、TS使用到的特性\" class=\"headerlink\" title=\"三、TS使用到的特性\"></a>三、TS使用到的特性</h2><p>interface、函数返回、声明文件等，其他跟es6差不多</p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>总体用下来感觉，技术只是技术，ts并没有比es6高档很多，更多的还是自己的选择。</p>\n"},{"title":"关于SEO","date":"2020-09-21T08:22:15.000Z","cover":"https://img.showydream.com/img/iZX9MU-picography-food-platters-beach-restaurant-small-768x512.jpg","description":"SEO。","keywords":"SEO介绍","_content":"\n\n\n众所周知，Vue SPA单页面应用对SEO不友好，当然也有相应的解决方案。下面列出几种最近在网上找到的几种方案。\n\n1. SSR服务器渲染\n2. 静态化\n3. 预渲染 prerender-spa-plugin + vue-meta-info\n\n### 搜索引擎工作原理\n\n1. #### 爬虫抓取网页内容\n\n   一般爬虫抓取页面内容是从一个页面出发，从中提取其他页面的链接，然后当作下一个请求的对象，一直重复这个过程。所以要有良好的seo，需要你在各大网站上拥有外链，这样子会提高你的网站被搜索引擎爬虫的几率。\n\n2. #### 分析网页内容\n\n   爬虫拿到HTML之后，就会对其内容进行分析。一般要去杂、分词、建立索引数据库等。什么是索引数据库呢？简单的说就是记录一个词在哪些文档中出现、出现次数、出现的位置等等。建立索引数据库可以方便快速查找\n\n3. #### 搜索和排序\n\n   搜索会根据你输入的关键字，分别查询其对应的索引数据库，并对结果进行处理和排序。\n\n4. #### 那么为什么前后端分离不利于SEO呢？\n   1. 搜索引擎的基础爬虫原理就是抓取你的url，然后获取你的html源代码并解析。而你的页面通常用了vue等js的数据绑定机制来展示页面数据，爬虫获取到的html是你的模型页面而不是最终数据的渲染页面，所以说用js来渲染数据对seo不友好。\n   2. seo本质上是一个服务器向另一个服务器发起请求，解析请求内容。但一般来说搜索引擎是不会去执行请求到的js的。也就是说，如果一个单页面应用，html在服务器端还没有渲染部分数据，在浏览器才渲染出数据，这时候搜索引擎请求到的html是没有渲染数据的。这样就很不利于内容被搜索引擎搜索到。\n   3. 一般的数据逻辑操作时放在服务端的，例如一个列表页面，如果有1000条数据，前端要全部请求过来再处理，这显然是不合理的。\n\n### 前端编码的SEO\n\n#### 网站结构\n\n网站结构要清晰。一般网站的结构是树形的，一般分为三个层次：首页 → 频道页（列表页） → 文章页（详情页）。\n\n网站的机构要扁平，结构层数越少越好，一般不要超过三层，搜索引擎一般到了第三层就不想继续深入的爬取了。多数的网站，例如掘金、雪球等，他们的网站结构是两层，他们的首页和频道页是同一个页面。\n\n#### 导航\n\n页面应该要有简明的导航。导航可以让搜索引擎知道网络的结构，也可以让搜索引擎知道当前页面在网站结构中的层次。建议：\n\n- 每一个页面都包含导航。\n- 对于内容较多的网站可以采用面包屑导航。\n- 链接使用文字链接，如果是图片，则通过`alt`属性告诉搜索引擎链接的指向。\n\n#### 规范的URL\n\n规范、简单、易理解的URL能让搜索引擎更好的抓取内容。建议：\n\n- 同一个页面，只对应一个url。多个url可以采用301进行重定向。\n- url可以反应网站内容及网站结构信息。例如www.a.com/blog、www.a.com/blog/123、www.a.com/article。\n- url尽量简短。\n- 尽量减少动态url中包含的变量参数。\n\n#### 提交Sitemap\n\nSitemap可通知搜索引擎他们网站上有哪些可供抓取的网页，以便搜索引擎可以更智能的抓取网站。\n\n#### robot.txt\n\n搜索引擎爬行网站第一个访问的文件就是robot.txt。在这个文件中声明该网站中不想被蜘蛛访问的部分，这样，该网站的部分或全部内容就可以不被搜索引擎访问和收录了，或者可以通过robots.txt指定使搜索引擎只收录指定的内容。\n\n#### 合理的HTTP返回码\n\n不同的返回码，搜索引擎的处理逻辑是不一样的。\n\n- 如果站点临时关闭，当网页不能打开时，建议使用503状态。503可以告知百度spider该页面临时不可访问，请过段时间再重试。\n- 如果百度spider对您的站点抓取压力过大，请尽量不要使用404，同样建议返回503。这样百度spider会过段时间再来尝试抓取这个链接，如果那个时间站点空闲，那它就会被成功抓取了。\n- 有一些网站希望百度只收录部分内容，例如审核后的内容，累积一段时间的新用户页等等。再这种情况，建议新发内容展示返回403，等审核或做好处理之后，再返回正常状态的返回码。\n- 站点迁移，或域名更换时，请使用301返回。\n\n#### 合适的title\n\ntitle是告诉搜索引擎网页的主要内容。\n\n- 每个网页都应该有一个独一无二的标题，切忌所有的页面都使用默认标题\n- 标题要主题明确和精炼，包含这个网页中最重要的内容，且不罗列与网页内容不相关的信息\n- 用户浏览通常是从左到右的，重要的内容应该放在title靠前的位置\n\n百度建议描述：\n\n- 首页：网站名称 或者 网站名称_服务介绍/产品介绍\n- 频道页：频道名称_网站名称\n- 文章页：文章标题_频道名称_网站名称\n\n#### 合适的descriptionription\n\ndescriptionription是对网页内容的精练概括。这个标签存在与否不影响网页权值，只会用做搜索结果摘要的一个选择目标。 百度推荐做法：\n\n- 为每个网页创建不同的descriptionription，避免所有网页都使用同样的描述\n- 网站首页、频道页、产品参数页等没有摘要的网页最适合使用description\n- 准确的描述网页，不要堆砌关键词，长度合理\n\n#### HTML语义化\n\nHTML语义化是用标签和属性来描述内容。所以**HTML语义化是SEO的基石**。一般建议：\n\n- HTML结构要清晰和简洁\n- 跳转使用`<a>`标签，不要使用js跳转\n- 图片加alt说明\n- 文章用`<article>`标签承载\n\n","source":"_posts/SEO介绍.md","raw":"---\ntitle: 关于SEO\ndate: 2020-09-21 16:22:15\ncover: https://img.showydream.com/img/iZX9MU-picography-food-platters-beach-restaurant-small-768x512.jpg\ndescription: SEO。\nkeywords: SEO介绍\ntags: SEO\ncategories: \n  - 前端知识点\n---\n\n\n\n众所周知，Vue SPA单页面应用对SEO不友好，当然也有相应的解决方案。下面列出几种最近在网上找到的几种方案。\n\n1. SSR服务器渲染\n2. 静态化\n3. 预渲染 prerender-spa-plugin + vue-meta-info\n\n### 搜索引擎工作原理\n\n1. #### 爬虫抓取网页内容\n\n   一般爬虫抓取页面内容是从一个页面出发，从中提取其他页面的链接，然后当作下一个请求的对象，一直重复这个过程。所以要有良好的seo，需要你在各大网站上拥有外链，这样子会提高你的网站被搜索引擎爬虫的几率。\n\n2. #### 分析网页内容\n\n   爬虫拿到HTML之后，就会对其内容进行分析。一般要去杂、分词、建立索引数据库等。什么是索引数据库呢？简单的说就是记录一个词在哪些文档中出现、出现次数、出现的位置等等。建立索引数据库可以方便快速查找\n\n3. #### 搜索和排序\n\n   搜索会根据你输入的关键字，分别查询其对应的索引数据库，并对结果进行处理和排序。\n\n4. #### 那么为什么前后端分离不利于SEO呢？\n   1. 搜索引擎的基础爬虫原理就是抓取你的url，然后获取你的html源代码并解析。而你的页面通常用了vue等js的数据绑定机制来展示页面数据，爬虫获取到的html是你的模型页面而不是最终数据的渲染页面，所以说用js来渲染数据对seo不友好。\n   2. seo本质上是一个服务器向另一个服务器发起请求，解析请求内容。但一般来说搜索引擎是不会去执行请求到的js的。也就是说，如果一个单页面应用，html在服务器端还没有渲染部分数据，在浏览器才渲染出数据，这时候搜索引擎请求到的html是没有渲染数据的。这样就很不利于内容被搜索引擎搜索到。\n   3. 一般的数据逻辑操作时放在服务端的，例如一个列表页面，如果有1000条数据，前端要全部请求过来再处理，这显然是不合理的。\n\n### 前端编码的SEO\n\n#### 网站结构\n\n网站结构要清晰。一般网站的结构是树形的，一般分为三个层次：首页 → 频道页（列表页） → 文章页（详情页）。\n\n网站的机构要扁平，结构层数越少越好，一般不要超过三层，搜索引擎一般到了第三层就不想继续深入的爬取了。多数的网站，例如掘金、雪球等，他们的网站结构是两层，他们的首页和频道页是同一个页面。\n\n#### 导航\n\n页面应该要有简明的导航。导航可以让搜索引擎知道网络的结构，也可以让搜索引擎知道当前页面在网站结构中的层次。建议：\n\n- 每一个页面都包含导航。\n- 对于内容较多的网站可以采用面包屑导航。\n- 链接使用文字链接，如果是图片，则通过`alt`属性告诉搜索引擎链接的指向。\n\n#### 规范的URL\n\n规范、简单、易理解的URL能让搜索引擎更好的抓取内容。建议：\n\n- 同一个页面，只对应一个url。多个url可以采用301进行重定向。\n- url可以反应网站内容及网站结构信息。例如www.a.com/blog、www.a.com/blog/123、www.a.com/article。\n- url尽量简短。\n- 尽量减少动态url中包含的变量参数。\n\n#### 提交Sitemap\n\nSitemap可通知搜索引擎他们网站上有哪些可供抓取的网页，以便搜索引擎可以更智能的抓取网站。\n\n#### robot.txt\n\n搜索引擎爬行网站第一个访问的文件就是robot.txt。在这个文件中声明该网站中不想被蜘蛛访问的部分，这样，该网站的部分或全部内容就可以不被搜索引擎访问和收录了，或者可以通过robots.txt指定使搜索引擎只收录指定的内容。\n\n#### 合理的HTTP返回码\n\n不同的返回码，搜索引擎的处理逻辑是不一样的。\n\n- 如果站点临时关闭，当网页不能打开时，建议使用503状态。503可以告知百度spider该页面临时不可访问，请过段时间再重试。\n- 如果百度spider对您的站点抓取压力过大，请尽量不要使用404，同样建议返回503。这样百度spider会过段时间再来尝试抓取这个链接，如果那个时间站点空闲，那它就会被成功抓取了。\n- 有一些网站希望百度只收录部分内容，例如审核后的内容，累积一段时间的新用户页等等。再这种情况，建议新发内容展示返回403，等审核或做好处理之后，再返回正常状态的返回码。\n- 站点迁移，或域名更换时，请使用301返回。\n\n#### 合适的title\n\ntitle是告诉搜索引擎网页的主要内容。\n\n- 每个网页都应该有一个独一无二的标题，切忌所有的页面都使用默认标题\n- 标题要主题明确和精炼，包含这个网页中最重要的内容，且不罗列与网页内容不相关的信息\n- 用户浏览通常是从左到右的，重要的内容应该放在title靠前的位置\n\n百度建议描述：\n\n- 首页：网站名称 或者 网站名称_服务介绍/产品介绍\n- 频道页：频道名称_网站名称\n- 文章页：文章标题_频道名称_网站名称\n\n#### 合适的descriptionription\n\ndescriptionription是对网页内容的精练概括。这个标签存在与否不影响网页权值，只会用做搜索结果摘要的一个选择目标。 百度推荐做法：\n\n- 为每个网页创建不同的descriptionription，避免所有网页都使用同样的描述\n- 网站首页、频道页、产品参数页等没有摘要的网页最适合使用description\n- 准确的描述网页，不要堆砌关键词，长度合理\n\n#### HTML语义化\n\nHTML语义化是用标签和属性来描述内容。所以**HTML语义化是SEO的基石**。一般建议：\n\n- HTML结构要清晰和简洁\n- 跳转使用`<a>`标签，不要使用js跳转\n- 图片加alt说明\n- 文章用`<article>`标签承载\n\n","slug":"SEO介绍","published":1,"updated":"2021-11-08T06:41:07.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62cy000urify4fhtcqqc","content":"<p>众所周知，Vue SPA单页面应用对SEO不友好，当然也有相应的解决方案。下面列出几种最近在网上找到的几种方案。</p>\n<ol>\n<li>SSR服务器渲染</li>\n<li>静态化</li>\n<li>预渲染 prerender-spa-plugin + vue-meta-info</li>\n</ol>\n<h3 id=\"搜索引擎工作原理\"><a href=\"#搜索引擎工作原理\" class=\"headerlink\" title=\"搜索引擎工作原理\"></a>搜索引擎工作原理</h3><ol>\n<li><h4 id=\"爬虫抓取网页内容\"><a href=\"#爬虫抓取网页内容\" class=\"headerlink\" title=\"爬虫抓取网页内容\"></a>爬虫抓取网页内容</h4><p>一般爬虫抓取页面内容是从一个页面出发，从中提取其他页面的链接，然后当作下一个请求的对象，一直重复这个过程。所以要有良好的seo，需要你在各大网站上拥有外链，这样子会提高你的网站被搜索引擎爬虫的几率。</p>\n</li>\n<li><h4 id=\"分析网页内容\"><a href=\"#分析网页内容\" class=\"headerlink\" title=\"分析网页内容\"></a>分析网页内容</h4><p>爬虫拿到HTML之后，就会对其内容进行分析。一般要去杂、分词、建立索引数据库等。什么是索引数据库呢？简单的说就是记录一个词在哪些文档中出现、出现次数、出现的位置等等。建立索引数据库可以方便快速查找</p>\n</li>\n<li><h4 id=\"搜索和排序\"><a href=\"#搜索和排序\" class=\"headerlink\" title=\"搜索和排序\"></a>搜索和排序</h4><p>搜索会根据你输入的关键字，分别查询其对应的索引数据库，并对结果进行处理和排序。</p>\n</li>\n<li><h4 id=\"那么为什么前后端分离不利于SEO呢？\"><a href=\"#那么为什么前后端分离不利于SEO呢？\" class=\"headerlink\" title=\"那么为什么前后端分离不利于SEO呢？\"></a>那么为什么前后端分离不利于SEO呢？</h4><ol>\n<li>搜索引擎的基础爬虫原理就是抓取你的url，然后获取你的html源代码并解析。而你的页面通常用了vue等js的数据绑定机制来展示页面数据，爬虫获取到的html是你的模型页面而不是最终数据的渲染页面，所以说用js来渲染数据对seo不友好。</li>\n<li>seo本质上是一个服务器向另一个服务器发起请求，解析请求内容。但一般来说搜索引擎是不会去执行请求到的js的。也就是说，如果一个单页面应用，html在服务器端还没有渲染部分数据，在浏览器才渲染出数据，这时候搜索引擎请求到的html是没有渲染数据的。这样就很不利于内容被搜索引擎搜索到。</li>\n<li>一般的数据逻辑操作时放在服务端的，例如一个列表页面，如果有1000条数据，前端要全部请求过来再处理，这显然是不合理的。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"前端编码的SEO\"><a href=\"#前端编码的SEO\" class=\"headerlink\" title=\"前端编码的SEO\"></a>前端编码的SEO</h3><h4 id=\"网站结构\"><a href=\"#网站结构\" class=\"headerlink\" title=\"网站结构\"></a>网站结构</h4><p>网站结构要清晰。一般网站的结构是树形的，一般分为三个层次：首页 → 频道页（列表页） → 文章页（详情页）。</p>\n<p>网站的机构要扁平，结构层数越少越好，一般不要超过三层，搜索引擎一般到了第三层就不想继续深入的爬取了。多数的网站，例如掘金、雪球等，他们的网站结构是两层，他们的首页和频道页是同一个页面。</p>\n<h4 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h4><p>页面应该要有简明的导航。导航可以让搜索引擎知道网络的结构，也可以让搜索引擎知道当前页面在网站结构中的层次。建议：</p>\n<ul>\n<li>每一个页面都包含导航。</li>\n<li>对于内容较多的网站可以采用面包屑导航。</li>\n<li>链接使用文字链接，如果是图片，则通过<code>alt</code>属性告诉搜索引擎链接的指向。</li>\n</ul>\n<h4 id=\"规范的URL\"><a href=\"#规范的URL\" class=\"headerlink\" title=\"规范的URL\"></a>规范的URL</h4><p>规范、简单、易理解的URL能让搜索引擎更好的抓取内容。建议：</p>\n<ul>\n<li>同一个页面，只对应一个url。多个url可以采用301进行重定向。</li>\n<li>url可以反应网站内容及网站结构信息。例如<a href=\"http://www.a.com/blog%E3%80%81www.a.com/blog/123%E3%80%81www.a.com/article%E3%80%82\">www.a.com/blog、www.a.com/blog/123、www.a.com/article。</a></li>\n<li>url尽量简短。</li>\n<li>尽量减少动态url中包含的变量参数。</li>\n</ul>\n<h4 id=\"提交Sitemap\"><a href=\"#提交Sitemap\" class=\"headerlink\" title=\"提交Sitemap\"></a>提交Sitemap</h4><p>Sitemap可通知搜索引擎他们网站上有哪些可供抓取的网页，以便搜索引擎可以更智能的抓取网站。</p>\n<h4 id=\"robot-txt\"><a href=\"#robot-txt\" class=\"headerlink\" title=\"robot.txt\"></a>robot.txt</h4><p>搜索引擎爬行网站第一个访问的文件就是robot.txt。在这个文件中声明该网站中不想被蜘蛛访问的部分，这样，该网站的部分或全部内容就可以不被搜索引擎访问和收录了，或者可以通过robots.txt指定使搜索引擎只收录指定的内容。</p>\n<h4 id=\"合理的HTTP返回码\"><a href=\"#合理的HTTP返回码\" class=\"headerlink\" title=\"合理的HTTP返回码\"></a>合理的HTTP返回码</h4><p>不同的返回码，搜索引擎的处理逻辑是不一样的。</p>\n<ul>\n<li>如果站点临时关闭，当网页不能打开时，建议使用503状态。503可以告知百度spider该页面临时不可访问，请过段时间再重试。</li>\n<li>如果百度spider对您的站点抓取压力过大，请尽量不要使用404，同样建议返回503。这样百度spider会过段时间再来尝试抓取这个链接，如果那个时间站点空闲，那它就会被成功抓取了。</li>\n<li>有一些网站希望百度只收录部分内容，例如审核后的内容，累积一段时间的新用户页等等。再这种情况，建议新发内容展示返回403，等审核或做好处理之后，再返回正常状态的返回码。</li>\n<li>站点迁移，或域名更换时，请使用301返回。</li>\n</ul>\n<h4 id=\"合适的title\"><a href=\"#合适的title\" class=\"headerlink\" title=\"合适的title\"></a>合适的title</h4><p>title是告诉搜索引擎网页的主要内容。</p>\n<ul>\n<li>每个网页都应该有一个独一无二的标题，切忌所有的页面都使用默认标题</li>\n<li>标题要主题明确和精炼，包含这个网页中最重要的内容，且不罗列与网页内容不相关的信息</li>\n<li>用户浏览通常是从左到右的，重要的内容应该放在title靠前的位置</li>\n</ul>\n<p>百度建议描述：</p>\n<ul>\n<li>首页：网站名称 或者 网站名称_服务介绍/产品介绍</li>\n<li>频道页：频道名称_网站名称</li>\n<li>文章页：文章标题_频道名称_网站名称</li>\n</ul>\n<h4 id=\"合适的descriptionription\"><a href=\"#合适的descriptionription\" class=\"headerlink\" title=\"合适的descriptionription\"></a>合适的descriptionription</h4><p>descriptionription是对网页内容的精练概括。这个标签存在与否不影响网页权值，只会用做搜索结果摘要的一个选择目标。 百度推荐做法：</p>\n<ul>\n<li>为每个网页创建不同的descriptionription，避免所有网页都使用同样的描述</li>\n<li>网站首页、频道页、产品参数页等没有摘要的网页最适合使用description</li>\n<li>准确的描述网页，不要堆砌关键词，长度合理</li>\n</ul>\n<h4 id=\"HTML语义化\"><a href=\"#HTML语义化\" class=\"headerlink\" title=\"HTML语义化\"></a>HTML语义化</h4><p>HTML语义化是用标签和属性来描述内容。所以<strong>HTML语义化是SEO的基石</strong>。一般建议：</p>\n<ul>\n<li>HTML结构要清晰和简洁</li>\n<li>跳转使用<code>&lt;a&gt;</code>标签，不要使用js跳转</li>\n<li>图片加alt说明</li>\n<li>文章用<code>&lt;article&gt;</code>标签承载</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>众所周知，Vue SPA单页面应用对SEO不友好，当然也有相应的解决方案。下面列出几种最近在网上找到的几种方案。</p>\n<ol>\n<li>SSR服务器渲染</li>\n<li>静态化</li>\n<li>预渲染 prerender-spa-plugin + vue-meta-info</li>\n</ol>\n<h3 id=\"搜索引擎工作原理\"><a href=\"#搜索引擎工作原理\" class=\"headerlink\" title=\"搜索引擎工作原理\"></a>搜索引擎工作原理</h3><ol>\n<li><h4 id=\"爬虫抓取网页内容\"><a href=\"#爬虫抓取网页内容\" class=\"headerlink\" title=\"爬虫抓取网页内容\"></a>爬虫抓取网页内容</h4><p>一般爬虫抓取页面内容是从一个页面出发，从中提取其他页面的链接，然后当作下一个请求的对象，一直重复这个过程。所以要有良好的seo，需要你在各大网站上拥有外链，这样子会提高你的网站被搜索引擎爬虫的几率。</p>\n</li>\n<li><h4 id=\"分析网页内容\"><a href=\"#分析网页内容\" class=\"headerlink\" title=\"分析网页内容\"></a>分析网页内容</h4><p>爬虫拿到HTML之后，就会对其内容进行分析。一般要去杂、分词、建立索引数据库等。什么是索引数据库呢？简单的说就是记录一个词在哪些文档中出现、出现次数、出现的位置等等。建立索引数据库可以方便快速查找</p>\n</li>\n<li><h4 id=\"搜索和排序\"><a href=\"#搜索和排序\" class=\"headerlink\" title=\"搜索和排序\"></a>搜索和排序</h4><p>搜索会根据你输入的关键字，分别查询其对应的索引数据库，并对结果进行处理和排序。</p>\n</li>\n<li><h4 id=\"那么为什么前后端分离不利于SEO呢？\"><a href=\"#那么为什么前后端分离不利于SEO呢？\" class=\"headerlink\" title=\"那么为什么前后端分离不利于SEO呢？\"></a>那么为什么前后端分离不利于SEO呢？</h4><ol>\n<li>搜索引擎的基础爬虫原理就是抓取你的url，然后获取你的html源代码并解析。而你的页面通常用了vue等js的数据绑定机制来展示页面数据，爬虫获取到的html是你的模型页面而不是最终数据的渲染页面，所以说用js来渲染数据对seo不友好。</li>\n<li>seo本质上是一个服务器向另一个服务器发起请求，解析请求内容。但一般来说搜索引擎是不会去执行请求到的js的。也就是说，如果一个单页面应用，html在服务器端还没有渲染部分数据，在浏览器才渲染出数据，这时候搜索引擎请求到的html是没有渲染数据的。这样就很不利于内容被搜索引擎搜索到。</li>\n<li>一般的数据逻辑操作时放在服务端的，例如一个列表页面，如果有1000条数据，前端要全部请求过来再处理，这显然是不合理的。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"前端编码的SEO\"><a href=\"#前端编码的SEO\" class=\"headerlink\" title=\"前端编码的SEO\"></a>前端编码的SEO</h3><h4 id=\"网站结构\"><a href=\"#网站结构\" class=\"headerlink\" title=\"网站结构\"></a>网站结构</h4><p>网站结构要清晰。一般网站的结构是树形的，一般分为三个层次：首页 → 频道页（列表页） → 文章页（详情页）。</p>\n<p>网站的机构要扁平，结构层数越少越好，一般不要超过三层，搜索引擎一般到了第三层就不想继续深入的爬取了。多数的网站，例如掘金、雪球等，他们的网站结构是两层，他们的首页和频道页是同一个页面。</p>\n<h4 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h4><p>页面应该要有简明的导航。导航可以让搜索引擎知道网络的结构，也可以让搜索引擎知道当前页面在网站结构中的层次。建议：</p>\n<ul>\n<li>每一个页面都包含导航。</li>\n<li>对于内容较多的网站可以采用面包屑导航。</li>\n<li>链接使用文字链接，如果是图片，则通过<code>alt</code>属性告诉搜索引擎链接的指向。</li>\n</ul>\n<h4 id=\"规范的URL\"><a href=\"#规范的URL\" class=\"headerlink\" title=\"规范的URL\"></a>规范的URL</h4><p>规范、简单、易理解的URL能让搜索引擎更好的抓取内容。建议：</p>\n<ul>\n<li>同一个页面，只对应一个url。多个url可以采用301进行重定向。</li>\n<li>url可以反应网站内容及网站结构信息。例如<a href=\"http://www.a.com/blog%E3%80%81www.a.com/blog/123%E3%80%81www.a.com/article%E3%80%82\">www.a.com/blog、www.a.com/blog/123、www.a.com/article。</a></li>\n<li>url尽量简短。</li>\n<li>尽量减少动态url中包含的变量参数。</li>\n</ul>\n<h4 id=\"提交Sitemap\"><a href=\"#提交Sitemap\" class=\"headerlink\" title=\"提交Sitemap\"></a>提交Sitemap</h4><p>Sitemap可通知搜索引擎他们网站上有哪些可供抓取的网页，以便搜索引擎可以更智能的抓取网站。</p>\n<h4 id=\"robot-txt\"><a href=\"#robot-txt\" class=\"headerlink\" title=\"robot.txt\"></a>robot.txt</h4><p>搜索引擎爬行网站第一个访问的文件就是robot.txt。在这个文件中声明该网站中不想被蜘蛛访问的部分，这样，该网站的部分或全部内容就可以不被搜索引擎访问和收录了，或者可以通过robots.txt指定使搜索引擎只收录指定的内容。</p>\n<h4 id=\"合理的HTTP返回码\"><a href=\"#合理的HTTP返回码\" class=\"headerlink\" title=\"合理的HTTP返回码\"></a>合理的HTTP返回码</h4><p>不同的返回码，搜索引擎的处理逻辑是不一样的。</p>\n<ul>\n<li>如果站点临时关闭，当网页不能打开时，建议使用503状态。503可以告知百度spider该页面临时不可访问，请过段时间再重试。</li>\n<li>如果百度spider对您的站点抓取压力过大，请尽量不要使用404，同样建议返回503。这样百度spider会过段时间再来尝试抓取这个链接，如果那个时间站点空闲，那它就会被成功抓取了。</li>\n<li>有一些网站希望百度只收录部分内容，例如审核后的内容，累积一段时间的新用户页等等。再这种情况，建议新发内容展示返回403，等审核或做好处理之后，再返回正常状态的返回码。</li>\n<li>站点迁移，或域名更换时，请使用301返回。</li>\n</ul>\n<h4 id=\"合适的title\"><a href=\"#合适的title\" class=\"headerlink\" title=\"合适的title\"></a>合适的title</h4><p>title是告诉搜索引擎网页的主要内容。</p>\n<ul>\n<li>每个网页都应该有一个独一无二的标题，切忌所有的页面都使用默认标题</li>\n<li>标题要主题明确和精炼，包含这个网页中最重要的内容，且不罗列与网页内容不相关的信息</li>\n<li>用户浏览通常是从左到右的，重要的内容应该放在title靠前的位置</li>\n</ul>\n<p>百度建议描述：</p>\n<ul>\n<li>首页：网站名称 或者 网站名称_服务介绍/产品介绍</li>\n<li>频道页：频道名称_网站名称</li>\n<li>文章页：文章标题_频道名称_网站名称</li>\n</ul>\n<h4 id=\"合适的descriptionription\"><a href=\"#合适的descriptionription\" class=\"headerlink\" title=\"合适的descriptionription\"></a>合适的descriptionription</h4><p>descriptionription是对网页内容的精练概括。这个标签存在与否不影响网页权值，只会用做搜索结果摘要的一个选择目标。 百度推荐做法：</p>\n<ul>\n<li>为每个网页创建不同的descriptionription，避免所有网页都使用同样的描述</li>\n<li>网站首页、频道页、产品参数页等没有摘要的网页最适合使用description</li>\n<li>准确的描述网页，不要堆砌关键词，长度合理</li>\n</ul>\n<h4 id=\"HTML语义化\"><a href=\"#HTML语义化\" class=\"headerlink\" title=\"HTML语义化\"></a>HTML语义化</h4><p>HTML语义化是用标签和属性来描述内容。所以<strong>HTML语义化是SEO的基石</strong>。一般建议：</p>\n<ul>\n<li>HTML结构要清晰和简洁</li>\n<li>跳转使用<code>&lt;a&gt;</code>标签，不要使用js跳转</li>\n<li>图片加alt说明</li>\n<li>文章用<code>&lt;article&gt;</code>标签承载</li>\n</ul>\n"},{"title":"Webstorm 按内容自动检测文件类型","date":"2021-08-03T02:54:58.000Z","cover":"https://img.showydream.com/img/6kWop6-iShot2021-08-03%2014.31.23.png","description":"Webstorm 按内容自动检测文件类型","keywords":"Webstorm 按内容自动检测文件类型","_content":"\n在使用webstorm新建文件的时候，有时候不小心把文件类型格式改变了\n\n![image-20210803105550642](https://img.showydream.com/img/6QjWtT-image-20210803105550642.png)\n\n这时候如果想回复文件格式，只需要找到下面\n\n![image-20210803105705223](https://img.showydream.com/img/ZWOA5t-image-20210803105705223.png)\n\n选中文件格式，删掉就好了\n","source":"_posts/Webstorm 按内容自动检测文件类型.md","raw":"---\ntitle: Webstorm 按内容自动检测文件类型\ndate: 2021-08-3 10:54:58\ncover: https://img.showydream.com/img/6kWop6-iShot2021-08-03%2014.31.23.png\ndescription: Webstorm 按内容自动检测文件类型\nkeywords: Webstorm 按内容自动检测文件类型\ntags: WebStorm技巧\ncategories: \n  - WebStorm\n---\n\n在使用webstorm新建文件的时候，有时候不小心把文件类型格式改变了\n\n![image-20210803105550642](https://img.showydream.com/img/6QjWtT-image-20210803105550642.png)\n\n这时候如果想回复文件格式，只需要找到下面\n\n![image-20210803105705223](https://img.showydream.com/img/ZWOA5t-image-20210803105705223.png)\n\n选中文件格式，删掉就好了\n","slug":"Webstorm 按内容自动检测文件类型","published":1,"updated":"2021-11-08T06:42:28.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62cz000zrify2ikzfuxn","content":"<p>在使用webstorm新建文件的时候，有时候不小心把文件类型格式改变了</p>\n<p><img src=\"https://img.showydream.com/img/6QjWtT-image-20210803105550642.png\" alt=\"image-20210803105550642\"></p>\n<p>这时候如果想回复文件格式，只需要找到下面</p>\n<p><img src=\"https://img.showydream.com/img/ZWOA5t-image-20210803105705223.png\" alt=\"image-20210803105705223\"></p>\n<p>选中文件格式，删掉就好了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在使用webstorm新建文件的时候，有时候不小心把文件类型格式改变了</p>\n<p><img src=\"https://img.showydream.com/img/6QjWtT-image-20210803105550642.png\" alt=\"image-20210803105550642\"></p>\n<p>这时候如果想回复文件格式，只需要找到下面</p>\n<p><img src=\"https://img.showydream.com/img/ZWOA5t-image-20210803105705223.png\" alt=\"image-20210803105705223\"></p>\n<p>选中文件格式，删掉就好了</p>\n"},{"title":"JavaScript踩坑之parseInt","date":"2021-05-05T16:00:00.000Z","cover":"https://img.showydream.com/img/ZrtTjb-javascript.jpg","description":"今天在群里看到一个奇怪的问题，parseInt(0.00000005)输出是5，这个一看不会，引发了我的好奇心。","keywords":"parseInt(0.0000005),parseInt,JavaScript,js","_content":"\n\n\n先看效果：\n\n<img src=\"http://img.showydream.com/img/2tGWv2-image-20210429190541592.png\" alt=\"image-20210429190541592\" style=\"zoom:40%;\" />\n\n## MDN复习知识点：\n\n> #### [语法](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt#语法)\n>\n> ```\n> parseInt(string, radix);\n> ```\n>\n> #### [参数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt#参数)\n>\n> - `string`\n>\n>   要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用  `ToString `抽象操作)。字符串开头的空白符将会被忽略。\n>\n> - `radix` 可选\n>\n>   从 `2` 到 `36`，表示字符串的基数。例如指定 16 表示被解析值是十六进制数。请注意，10不是默认值！\n>\n>   文章后面的[描述](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt#描述)解释了当参数 `radix` 不传时该函数的具体行为。\n>\n> #### [返回值](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt#返回值)\n>\n> 从给定的字符串中解析出的一个整数。\n>\n> 或者 [`NaN`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN)，当\n>\n> - `radix` 小于 `2` 或大于 `36` ，或\n> - 第一个非空格字符不能转换为数字。\n>\n> ```\n> parseInt('123', 5) // 将'123'看作5进制数，返回十进制数38 => 1*5^2 + 2*5^1 + 3*5^0 = 38\n> ```\n\n### 提示和注释\n\n- 只有字符串中的第一个数字会被返回。\n\n\n- 开头和结尾的空格是允许的。\n\n\n- 如果字符串的第一个字符不能被转换为数字，那么 parseFloat() 会返回 NaN。\n\n\n- 在字符串以\"0\"为开始时旧的浏览器默认使用八进制基数。ECMAScript 5，默认的是十进制的基数。\n\n#### 特殊情况\n\n​\t\t如果 `radix` 是 `undefined`、`0`或未指定的，JavaScript会假定以下情况：\n\n1. 如果输入的 `string`以 \"`0x`\"或 \"`0x`\"（一个0，后面是小写或大写的X）开头，那么radix被假定为16，字符串的其余部分被当做十六进制数去解析。\n2. 如果输入的 `string`以 \"`0`\"（0）开头， `radix`被假定为`8`（八进制）或`10`（十进制）。具体选择哪一个radix取决于实现。ECMAScript 5 澄清了应该使用 10 (十进制)，但不是所有的浏览器都支持。**因此，在使用 `parseInt` 时，一定要指定一个 radix**。\n3. 如果输入的 `string` 以任何其他值开头， `radix` 是 `10` (十进制)。\n\n**具体示例：**\n\n```javascript\nconsole.log(parseInt(\"   12\", 10)); // 12\nconsole.log(parseInt(\"12  \", 10)); // 12\nconsole.log(parseInt(\"12*******\", 10)); // 12\nconsole.log(parseInt(\"d12*******\", 10)); // NaN\nconsole.log(parseInt(\"012\")); // 12\nconsole.log(parseInt(\"12.34\", 10)); // 12\nconsole.log(parseInt(12.34, 10)); // 12\n\n// 特殊情况\nconsole.log(parseInt(011)); // 9\nconsole.log(011.toString()); // 9\nconsole.log(parseInt(0x1a)); // 26\nconsole.log(0x1a.toString()); // 26\n```\n\n**坑来了：**\n\n```javascript\nconsole.log(parseInt(0.000005, 10)) // 0，小数点后有5个0\nconsole.log(parseInt(0.0010005, 10)) // 0，小数点后不能直接用科学计数法表示\nconsole.log(parseInt(0.0000005, 10)) // 5，小数点后有6个0\n\nconsole.log(parseInt(500000000000000000000, 10)) // 500000000000000000000\nconsole.log(parseInt(5000000000000000000000, 10)) // 5，小数点前有22位数\nconsole.log(parseInt(5000000000000100000000, 10)) // 5，小数点前有22位数,科学计数法以后的表达式就不被解析了\n```\n\n\n​\t\t其实是这样的，当小数点后的0的个数小于等于5个时，会采用字面量形式直接表示，当小数点后0的个数大于5个时，会采用科学计数法来表示，即：0.000005不会采用科学计数法，而0.0000005则会转换为5e-7，parseInt方法不会将\"e\"视为数字，因此只是将5转换为10进制，还是5。**parseInt**不应替代**Math.floor()**。\n\n　　同理，当小数点前数字位数为21及以下的时候，会采用字面量形式直接表示，而当小数点前数字位数大于21的时候。会采用科学计数法，因此6000000000000000000000会转换为科学计数法，为6e+21，将6转换为10进制还是6\n","source":"_posts/JavaScript踩坑之parseInt.md","raw":"---\ntitle: JavaScript踩坑之parseInt\ndate: 2021-5-6 00:00:00\ncover: https://img.showydream.com/img/ZrtTjb-javascript.jpg\ndescription: 今天在群里看到一个奇怪的问题，parseInt(0.00000005)输出是5，这个一看不会，引发了我的好奇心。\nkeywords: parseInt(0.0000005),parseInt,JavaScript,js\ntags: 面经\ncategories: \n - JavaScript\n---\n\n\n\n先看效果：\n\n<img src=\"http://img.showydream.com/img/2tGWv2-image-20210429190541592.png\" alt=\"image-20210429190541592\" style=\"zoom:40%;\" />\n\n## MDN复习知识点：\n\n> #### [语法](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt#语法)\n>\n> ```\n> parseInt(string, radix);\n> ```\n>\n> #### [参数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt#参数)\n>\n> - `string`\n>\n>   要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用  `ToString `抽象操作)。字符串开头的空白符将会被忽略。\n>\n> - `radix` 可选\n>\n>   从 `2` 到 `36`，表示字符串的基数。例如指定 16 表示被解析值是十六进制数。请注意，10不是默认值！\n>\n>   文章后面的[描述](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt#描述)解释了当参数 `radix` 不传时该函数的具体行为。\n>\n> #### [返回值](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt#返回值)\n>\n> 从给定的字符串中解析出的一个整数。\n>\n> 或者 [`NaN`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN)，当\n>\n> - `radix` 小于 `2` 或大于 `36` ，或\n> - 第一个非空格字符不能转换为数字。\n>\n> ```\n> parseInt('123', 5) // 将'123'看作5进制数，返回十进制数38 => 1*5^2 + 2*5^1 + 3*5^0 = 38\n> ```\n\n### 提示和注释\n\n- 只有字符串中的第一个数字会被返回。\n\n\n- 开头和结尾的空格是允许的。\n\n\n- 如果字符串的第一个字符不能被转换为数字，那么 parseFloat() 会返回 NaN。\n\n\n- 在字符串以\"0\"为开始时旧的浏览器默认使用八进制基数。ECMAScript 5，默认的是十进制的基数。\n\n#### 特殊情况\n\n​\t\t如果 `radix` 是 `undefined`、`0`或未指定的，JavaScript会假定以下情况：\n\n1. 如果输入的 `string`以 \"`0x`\"或 \"`0x`\"（一个0，后面是小写或大写的X）开头，那么radix被假定为16，字符串的其余部分被当做十六进制数去解析。\n2. 如果输入的 `string`以 \"`0`\"（0）开头， `radix`被假定为`8`（八进制）或`10`（十进制）。具体选择哪一个radix取决于实现。ECMAScript 5 澄清了应该使用 10 (十进制)，但不是所有的浏览器都支持。**因此，在使用 `parseInt` 时，一定要指定一个 radix**。\n3. 如果输入的 `string` 以任何其他值开头， `radix` 是 `10` (十进制)。\n\n**具体示例：**\n\n```javascript\nconsole.log(parseInt(\"   12\", 10)); // 12\nconsole.log(parseInt(\"12  \", 10)); // 12\nconsole.log(parseInt(\"12*******\", 10)); // 12\nconsole.log(parseInt(\"d12*******\", 10)); // NaN\nconsole.log(parseInt(\"012\")); // 12\nconsole.log(parseInt(\"12.34\", 10)); // 12\nconsole.log(parseInt(12.34, 10)); // 12\n\n// 特殊情况\nconsole.log(parseInt(011)); // 9\nconsole.log(011.toString()); // 9\nconsole.log(parseInt(0x1a)); // 26\nconsole.log(0x1a.toString()); // 26\n```\n\n**坑来了：**\n\n```javascript\nconsole.log(parseInt(0.000005, 10)) // 0，小数点后有5个0\nconsole.log(parseInt(0.0010005, 10)) // 0，小数点后不能直接用科学计数法表示\nconsole.log(parseInt(0.0000005, 10)) // 5，小数点后有6个0\n\nconsole.log(parseInt(500000000000000000000, 10)) // 500000000000000000000\nconsole.log(parseInt(5000000000000000000000, 10)) // 5，小数点前有22位数\nconsole.log(parseInt(5000000000000100000000, 10)) // 5，小数点前有22位数,科学计数法以后的表达式就不被解析了\n```\n\n\n​\t\t其实是这样的，当小数点后的0的个数小于等于5个时，会采用字面量形式直接表示，当小数点后0的个数大于5个时，会采用科学计数法来表示，即：0.000005不会采用科学计数法，而0.0000005则会转换为5e-7，parseInt方法不会将\"e\"视为数字，因此只是将5转换为10进制，还是5。**parseInt**不应替代**Math.floor()**。\n\n　　同理，当小数点前数字位数为21及以下的时候，会采用字面量形式直接表示，而当小数点前数字位数大于21的时候。会采用科学计数法，因此6000000000000000000000会转换为科学计数法，为6e+21，将6转换为10进制还是6\n","slug":"JavaScript踩坑之parseInt","published":1,"updated":"2021-11-08T06:35:04.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62cz0011rify9euof6r5","content":"<p>先看效果：</p>\n<img src=\"http://img.showydream.com/img/2tGWv2-image-20210429190541592.png\" alt=\"image-20210429190541592\" style=\"zoom:40%;\" />\n\n<h2 id=\"MDN复习知识点：\"><a href=\"#MDN复习知识点：\" class=\"headerlink\" title=\"MDN复习知识点：\"></a>MDN复习知识点：</h2><blockquote>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt#%E8%AF%AD%E6%B3%95\">语法</a></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt(string, radix);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt#%E5%8F%82%E6%95%B0\">参数</a></h4><ul>\n<li><p><code>string</code></p>\n<p>要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用  <code>ToString </code>抽象操作)。字符串开头的空白符将会被忽略。</p>\n</li>\n<li><p><code>radix</code> 可选</p>\n<p>从 <code>2</code> 到 <code>36</code>，表示字符串的基数。例如指定 16 表示被解析值是十六进制数。请注意，10不是默认值！</p>\n<p>文章后面的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt#%E6%8F%8F%E8%BF%B0\">描述</a>解释了当参数 <code>radix</code> 不传时该函数的具体行为。</p>\n</li>\n</ul>\n<h4 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt#%E8%BF%94%E5%9B%9E%E5%80%BC\">返回值</a></h4><p>从给定的字符串中解析出的一个整数。</p>\n<p>或者 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>，当</p>\n<ul>\n<li><code>radix</code> 小于 <code>2</code> 或大于 <code>36</code> ，或</li>\n<li>第一个非空格字符不能转换为数字。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt(&#x27;123&#x27;, 5) // 将&#x27;123&#x27;看作5进制数，返回十进制数38 =&gt; 1*5^2 + 2*5^1 + 3*5^0 = 38</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"提示和注释\"><a href=\"#提示和注释\" class=\"headerlink\" title=\"提示和注释\"></a>提示和注释</h3><ul>\n<li>只有字符串中的第一个数字会被返回。</li>\n</ul>\n<ul>\n<li>开头和结尾的空格是允许的。</li>\n</ul>\n<ul>\n<li>如果字符串的第一个字符不能被转换为数字，那么 parseFloat() 会返回 NaN。</li>\n</ul>\n<ul>\n<li>在字符串以”0”为开始时旧的浏览器默认使用八进制基数。ECMAScript 5，默认的是十进制的基数。</li>\n</ul>\n<h4 id=\"特殊情况\"><a href=\"#特殊情况\" class=\"headerlink\" title=\"特殊情况\"></a>特殊情况</h4><p>​        如果 <code>radix</code> 是 <code>undefined</code>、<code>0</code>或未指定的，JavaScript会假定以下情况：</p>\n<ol>\n<li>如果输入的 <code>string</code>以 “<code>0x</code>“或 “<code>0x</code>“（一个0，后面是小写或大写的X）开头，那么radix被假定为16，字符串的其余部分被当做十六进制数去解析。</li>\n<li>如果输入的 <code>string</code>以 “<code>0</code>“（0）开头， <code>radix</code>被假定为<code>8</code>（八进制）或<code>10</code>（十进制）。具体选择哪一个radix取决于实现。ECMAScript 5 澄清了应该使用 10 (十进制)，但不是所有的浏览器都支持。<strong>因此，在使用 <code>parseInt</code> 时，一定要指定一个 radix</strong>。</li>\n<li>如果输入的 <code>string</code> 以任何其他值开头， <code>radix</code> 是 <code>10</code> (十进制)。</li>\n</ol>\n<p><strong>具体示例：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;   12&quot;</span>, <span class=\"number\">10</span>)); <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;12  &quot;</span>, <span class=\"number\">10</span>)); <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;12*******&quot;</span>, <span class=\"number\">10</span>)); <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;d12*******&quot;</span>, <span class=\"number\">10</span>)); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;012&quot;</span>)); <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;12.34&quot;</span>, <span class=\"number\">10</span>)); <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"number\">12.34</span>, <span class=\"number\">10</span>)); <span class=\"comment\">// 12</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 特殊情况</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"number\">011</span>)); <span class=\"comment\">// 9</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">011</span>.toString()); <span class=\"comment\">// 9</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"number\">0x1a</span>)); <span class=\"comment\">// 26</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0x1a</span>.toString()); <span class=\"comment\">// 26</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>坑来了：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"number\">0.000005</span>, <span class=\"number\">10</span>)) <span class=\"comment\">// 0，小数点后有5个0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"number\">0.0010005</span>, <span class=\"number\">10</span>)) <span class=\"comment\">// 0，小数点后不能直接用科学计数法表示</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"number\">0.0000005</span>, <span class=\"number\">10</span>)) <span class=\"comment\">// 5，小数点后有6个0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"number\">500000000000000000000</span>, <span class=\"number\">10</span>)) <span class=\"comment\">// 500000000000000000000</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"number\">5000000000000000000000</span>, <span class=\"number\">10</span>)) <span class=\"comment\">// 5，小数点前有22位数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"number\">5000000000000100000000</span>, <span class=\"number\">10</span>)) <span class=\"comment\">// 5，小数点前有22位数,科学计数法以后的表达式就不被解析了</span></span><br></pre></td></tr></table></figure>\n\n\n<p>​        其实是这样的，当小数点后的0的个数小于等于5个时，会采用字面量形式直接表示，当小数点后0的个数大于5个时，会采用科学计数法来表示，即：0.000005不会采用科学计数法，而0.0000005则会转换为5e-7，parseInt方法不会将”e”视为数字，因此只是将5转换为10进制，还是5。<strong>parseInt</strong>不应替代**Math.floor()**。</p>\n<p>　　同理，当小数点前数字位数为21及以下的时候，会采用字面量形式直接表示，而当小数点前数字位数大于21的时候。会采用科学计数法，因此6000000000000000000000会转换为科学计数法，为6e+21，将6转换为10进制还是6</p>\n","site":{"data":{}},"excerpt":"","more":"<p>先看效果：</p>\n<img src=\"http://img.showydream.com/img/2tGWv2-image-20210429190541592.png\" alt=\"image-20210429190541592\" style=\"zoom:40%;\" />\n\n<h2 id=\"MDN复习知识点：\"><a href=\"#MDN复习知识点：\" class=\"headerlink\" title=\"MDN复习知识点：\"></a>MDN复习知识点：</h2><blockquote>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt#%E8%AF%AD%E6%B3%95\">语法</a></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt(string, radix);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt#%E5%8F%82%E6%95%B0\">参数</a></h4><ul>\n<li><p><code>string</code></p>\n<p>要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用  <code>ToString </code>抽象操作)。字符串开头的空白符将会被忽略。</p>\n</li>\n<li><p><code>radix</code> 可选</p>\n<p>从 <code>2</code> 到 <code>36</code>，表示字符串的基数。例如指定 16 表示被解析值是十六进制数。请注意，10不是默认值！</p>\n<p>文章后面的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt#%E6%8F%8F%E8%BF%B0\">描述</a>解释了当参数 <code>radix</code> 不传时该函数的具体行为。</p>\n</li>\n</ul>\n<h4 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt#%E8%BF%94%E5%9B%9E%E5%80%BC\">返回值</a></h4><p>从给定的字符串中解析出的一个整数。</p>\n<p>或者 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>，当</p>\n<ul>\n<li><code>radix</code> 小于 <code>2</code> 或大于 <code>36</code> ，或</li>\n<li>第一个非空格字符不能转换为数字。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt(&#x27;123&#x27;, 5) // 将&#x27;123&#x27;看作5进制数，返回十进制数38 =&gt; 1*5^2 + 2*5^1 + 3*5^0 = 38</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"提示和注释\"><a href=\"#提示和注释\" class=\"headerlink\" title=\"提示和注释\"></a>提示和注释</h3><ul>\n<li>只有字符串中的第一个数字会被返回。</li>\n</ul>\n<ul>\n<li>开头和结尾的空格是允许的。</li>\n</ul>\n<ul>\n<li>如果字符串的第一个字符不能被转换为数字，那么 parseFloat() 会返回 NaN。</li>\n</ul>\n<ul>\n<li>在字符串以”0”为开始时旧的浏览器默认使用八进制基数。ECMAScript 5，默认的是十进制的基数。</li>\n</ul>\n<h4 id=\"特殊情况\"><a href=\"#特殊情况\" class=\"headerlink\" title=\"特殊情况\"></a>特殊情况</h4><p>​        如果 <code>radix</code> 是 <code>undefined</code>、<code>0</code>或未指定的，JavaScript会假定以下情况：</p>\n<ol>\n<li>如果输入的 <code>string</code>以 “<code>0x</code>“或 “<code>0x</code>“（一个0，后面是小写或大写的X）开头，那么radix被假定为16，字符串的其余部分被当做十六进制数去解析。</li>\n<li>如果输入的 <code>string</code>以 “<code>0</code>“（0）开头， <code>radix</code>被假定为<code>8</code>（八进制）或<code>10</code>（十进制）。具体选择哪一个radix取决于实现。ECMAScript 5 澄清了应该使用 10 (十进制)，但不是所有的浏览器都支持。<strong>因此，在使用 <code>parseInt</code> 时，一定要指定一个 radix</strong>。</li>\n<li>如果输入的 <code>string</code> 以任何其他值开头， <code>radix</code> 是 <code>10</code> (十进制)。</li>\n</ol>\n<p><strong>具体示例：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;   12&quot;</span>, <span class=\"number\">10</span>)); <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;12  &quot;</span>, <span class=\"number\">10</span>)); <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;12*******&quot;</span>, <span class=\"number\">10</span>)); <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;d12*******&quot;</span>, <span class=\"number\">10</span>)); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;012&quot;</span>)); <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;12.34&quot;</span>, <span class=\"number\">10</span>)); <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"number\">12.34</span>, <span class=\"number\">10</span>)); <span class=\"comment\">// 12</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 特殊情况</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"number\">011</span>)); <span class=\"comment\">// 9</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">011</span>.toString()); <span class=\"comment\">// 9</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"number\">0x1a</span>)); <span class=\"comment\">// 26</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0x1a</span>.toString()); <span class=\"comment\">// 26</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>坑来了：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"number\">0.000005</span>, <span class=\"number\">10</span>)) <span class=\"comment\">// 0，小数点后有5个0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"number\">0.0010005</span>, <span class=\"number\">10</span>)) <span class=\"comment\">// 0，小数点后不能直接用科学计数法表示</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"number\">0.0000005</span>, <span class=\"number\">10</span>)) <span class=\"comment\">// 5，小数点后有6个0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"number\">500000000000000000000</span>, <span class=\"number\">10</span>)) <span class=\"comment\">// 500000000000000000000</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"number\">5000000000000000000000</span>, <span class=\"number\">10</span>)) <span class=\"comment\">// 5，小数点前有22位数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"number\">5000000000000100000000</span>, <span class=\"number\">10</span>)) <span class=\"comment\">// 5，小数点前有22位数,科学计数法以后的表达式就不被解析了</span></span><br></pre></td></tr></table></figure>\n\n\n<p>​        其实是这样的，当小数点后的0的个数小于等于5个时，会采用字面量形式直接表示，当小数点后0的个数大于5个时，会采用科学计数法来表示，即：0.000005不会采用科学计数法，而0.0000005则会转换为5e-7，parseInt方法不会将”e”视为数字，因此只是将5转换为10进制，还是5。<strong>parseInt</strong>不应替代**Math.floor()**。</p>\n<p>　　同理，当小数点前数字位数为21及以下的时候，会采用字面量形式直接表示，而当小数点前数字位数大于21的时候。会采用科学计数法，因此6000000000000000000000会转换为科学计数法，为6e+21，将6转换为10进制还是6</p>\n"},{"title":"gin中文文档","date":"2021-08-17T04:00:00.000Z","cover":"https://img.showydream.com/img/OtxkRZ-how-to-build-a-rest-api-with-golang-using-gin-and-gorm.png","description":"gin中文文档","keywords":"gin中文文档,go","_content":"\n\n\n本文原文链接`https://github.com/skyhee/gin-doc-cn`，放在自己的博客是因为github打开比较慢，侵删。\n\n### 安装与配置\n\n安装：\n\n```bash\n$ go get gopkg.in/gin-gonic/gin.v1\n```\n\n**注意：确保 GOPATH GOROOT 已经配置**\n\n导入：\n\n```go\nimport \"gopkg.in/gin-gonic/gin.v1\"\n```\n\n### 框架架构\n\n- HTTP 服务器\n\n**1.默认服务器**\n\n```go\nrouter.Run()\n```\n\n**2.HTTP 服务器**\n\n除了默认服务器中 **router.Run()** 的方式外，还可以用 **http.ListenAndServe()**，比如\n\n```go\nfunc main() {\n\trouter := gin.Default()\n\thttp.ListenAndServe(\":8080\", router)\n}\n```\n\n或者自定义 HTTP 服务器的配置：\n\n```go\nfunc main() {\n\trouter := gin.Default()\n\n\ts := &http.Server{\n\t\tAddr:           \":8080\",\n\t\tHandler:        router,\n\t\tReadTimeout:    10 * time.Second,\n\t\tWriteTimeout:   10 * time.Second,\n\t\tMaxHeaderBytes: 1 << 20,\n\t}\n\ts.ListenAndServe()\n}\n```\n\n**3.HTTP 服务器替换方案**\n想无缝重启、停机吗? 以下有几种方式：\n\n我们可以使用 [fvbock/endless](https://github.com/fvbock/endless) 来替换默认的 **ListenAndServe**。但是 windows 不能使用。\n\n```go\nrouter := gin.Default()\nrouter.GET(\"/\", handler)\n// [...]\nendless.ListenAndServe(\":4242\", router)\n```\n\n除了 endless 还可以用manners:\n\n[manners](https://github.com/braintree/manners) 兼容windows\n\n```go\nmanners.ListenAndServe(\":8888\", r)\n```\n\n如果你使用的 golang 版本大于 1.8 版本, 那么可以用 http.Server 内置的 Shutdown 方法来实现优雅的关闭服务, 一个简单的示例代码如下:\n\n```go\nsrv := http.Server{\n    Addr: \":8080\",\n    Handler: router,\n}\n\ngo func() {\n    if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n        log.Fatalf(\"listen: %s\\n\", err)\n    }\n}\n\n// 其他代码, 等待关闭信号\n...\n\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\ndefer cancel()\nif err := srv.Shutdown(ctx); err != nil {\n    log.Fatal(\"Server Shutdown: \", err)\n}\nlog.Println(\"Server exiting\")\n```\n\n完整的代码见 [graceful-shutdown](https://github.com/gin-gonic/gin/blob/master/examples/graceful-shutdown/graceful-shutdown/server.go).\n\n- 生命周期\n\n- Context\n\n### 路由\n\n- 基本路由\n  gin 框架中采用的路由库是 httprouter。\n\n\n```go\n\t// 创建带有默认中间件的路由:\n\t// 日志与恢复中间件\n\trouter := gin.Default()\n\t//创建不带中间件的路由：\n\t//r := gin.New()\n\n\trouter.GET(\"/someGet\", getting)\n\trouter.POST(\"/somePost\", posting)\n\trouter.PUT(\"/somePut\", putting)\n\trouter.DELETE(\"/someDelete\", deleting)\n\trouter.PATCH(\"/somePatch\", patching)\n\trouter.HEAD(\"/someHead\", head)\n\trouter.OPTIONS(\"/someOptions\", options)\n```\n\n- 路由参数\n\napi 参数通过Context的Param方法来获取\n\n```go\nrouter.GET(\"/string/:name\", func(c *gin.Context) {    \n  name := c.Param(\"name\")   \n  fmt.Println(\"Hello %s\", name)    \n})\n```\n\nURL 参数通过 DefaultQuery 或 Query 方法获取\n\n```go\n// url 为 http://localhost:8080/welcome?name=ningskyer时\n// 输出 Hello ningskyer\n// url 为 http://localhost:8080/welcome时\n// 输出 Hello Guest\nrouter.GET(\"/welcome\", func(c *gin.Context) {\t\n\t\tname := c.DefaultQuery(\"name\", \"Guest\") // 可设置默认值\t\n\t\t// 是 c.Request.URL.Query().Get(\"lastname\") 的简写\n    lastname := c.Query(\"lastname\") \n    fmt.Println(\"Hello %s\", name)})\n```\n\n表单参数通过 PostForm 方法获取\n\n```go\n//form\nrouter.POST(\"/form\", func(c *gin.Context) {\t\n  type := c.DefaultPostForm(\"type\", \"alert\")//可设置默认值\t\n  msg := c.PostForm(\"msg\")\t\n  title := c.PostForm(\"title\")\t\n  fmt.Println(\"type is %s, msg is %s, title is %s\", type, msg, title)})\n```\n\n- 路由群组\n\n```go\n\tsomeGroup := router.Group(\"/someGroup\")   \n{        \n  someGroup.GET(\"/someGet\", getting)\t\t\n  someGroup.POST(\"/somePost\", posting)\t\n}\n```\n\n### 控制器\n\n- 数据解析绑定\n\n模型绑定可以将请求体绑定给一个类型，目前支持绑定的类型有 JSON, XML 和标准表单数据 (foo=bar&boo=baz)。\n要注意的是绑定时需要给字段设置绑定类型的标签。比如绑定 JSON 数据时，设置 **json:\"fieldname\"**。\n使用绑定方法时，Gin 会根据请求头中  Content-Type  来自动判断需要解析的类型。如果你明确绑定的类型，你可以不用自动推断，而用 BindWith 方法。\n你也可以指定某字段是必需的。如果一个字段被 **binding:\"required\"** 修饰而值却是空的，请求会失败并返回错误。\n\n```go\n// Binding from JSON\ntype Login struct {\t\n  User     string `form:\"user\" json:\"user\" binding:\"required\"`\t\n  Password string `form:\"password\" json:\"password\" binding:\"required\"`\n}\n\nfunc main() {\n  router := gin.Default()\n  // 绑定JSON的例子 ({\"user\": \"manu\", \"password\": \"123\"})\t\n  router.POST(\"/loginJSON\", func(c *gin.Context) {\n    var json Login\t\t\n    if c.BindJSON(&json) == nil {\t\t\t\n      if json.User == \"manu\" && json.Password == \"123\" {\t\t\t\t\t\n        c.JSON(http.StatusOK, gin.H{\"status\": \"you are logged in\"})                                      \n      } else {\t\t\n        c.JSON(http.StatusUnauthorized, gin.H{\"status\": \"unauthorized\"})\t\t\n      }\t\n    }\n  })\n  \n  // 绑定普通表单的例子 (user=manu&password=123)\t\n  router.POST(\"/loginForm\", func(c *gin.Context) {\t\t\n    var form Login\t\t\n    // 根据请求头中 content-type 自动推断.\t\t\n    if c.Bind(&form) == nil {\t\t\t\n      if form.User == \"manu\" && form.Password == \"123\" {\t\n        c.JSON(http.StatusOK, gin.H{\"status\": \"you are logged in\"})\n      } else {\t\t\t\n        c.JSON(http.StatusUnauthorized, gin.H{\"status\": \"unauthorized\"})\t\n      }\t\n    }\t\n  })\t\n  \n  // 绑定多媒体表单的例子 (user=manu&password=123)\t\n  router.POST(\"/login\", func(c *gin.Context) {\t\n    var form LoginForm\t\n    // 你可以显式声明来绑定多媒体表单：\t\n    // c.BindWith(&form, binding.Form)\t\n    // 或者使用自动推断:\t\t\n    if c.Bind(&form) == nil {\t\t\t\n      if form.User == \"user\" && form.Password == \"password\" {\t\t\n        c.JSON(200, gin.H{\"status\": \"you are logged in\"})\t\t\n      } else {\t\t\t\n        c.JSON(401, gin.H{\"status\": \"unauthorized\"})\t\t\n      }\t\n    }\t\n  })\t\n  \n  // Listen and serve on 0.0.0.0:8080\t\n  router.Run(\":8080\")}\n```\n\n### 请求\n\n- 请求头\n\n- 请求参数\n\n- Cookies\n\n- 上传文件\n\n```go\nrouter.POST(\"/upload\", func(c *gin.Context) {\n  \n  file, header , err := c.Request.FormFile(\"upload\")  \n  filename := header.Filename \n  fmt.Println(header.Filename)  \n  out, err := os.Create(\"./tmp/\"+filename+\".png\") \n  \n  if err != nil {      \n    log.Fatal(err)    \n  }  \n  \n  defer out.Close()  \n  _, err = io.Copy(out, file)  \n  if err != nil {     \n    log.Fatal(err) \n  }  \n})\n```\n\n### 响应\n\n- 响应头\n\n- 附加Cookie\n\n- 字符串响应\n\n**c.String(http.StatusOK, \"some string\")**\n\n\n- JSON/XML/YAML响应\n\n```go\n\nr.GET(\"/moreJSON\", func(c *gin.Context) {\t\n  // You also can use a struct\n  var msg struct {\t\n    Name    string `json:\"user\" xml:\"user\"`\n    Message string\t\t\n    Number  int\t\n  }\n  \n  msg.Name = \"Lena\"\t\n  msg.Message = \"hey\"\n  msg.Number = 123\t\n  \n  // 注意 msg.Name 变成了 \"user\" 字段\t\n  // 以下方式都会输出 :   {\"user\": \"Lena\", \"Message\": \"hey\", \"Number\": 123}\t\n  \n  c.JSON(http.StatusOK, gin.H{\"user\": \"Lena\", \"Message\": \"hey\", \"Number\": 123})\n  c.XML(http.StatusOK, gin.H{\"user\": \"Lena\", \"Message\": \"hey\", \"Number\": 123})\t\n  c.YAML(http.StatusOK, gin.H{\"user\": \"Lena\", \"Message\": \"hey\", \"Number\": 123})\t\n  \n  c.JSON(http.StatusOK, msg)\t\n  c.XML(http.StatusOK, msg)\t\n  c.YAML(http.StatusOK, msg)})\t\n  \n```\n\n- 视图响应\n\n先要使用 LoadHTMLTemplates() 方法来加载模板文件\n\n```go\nfunc main() {\t\n  router := gin.Default()\t\n  \n  //加载模板\t\n  router.LoadHTMLGlob(\"templates/*\")\t\n  //router.LoadHTMLFiles(\"templates/template1.html\", \"templates/template2.html\")\t\n  //定义路由\t\n  router.GET(\"/index\", func(c *gin.Context) {\t\t\n  //根据完整文件名渲染模板，并传递参数\t\t\n  c.HTML(http.StatusOK, \"index.tmpl\", gin.H{\t\t\n      \"title\": \"Main website\",\t\n    })\t\n  })\t\n\n  router.Run(\":8080\")\n}\n```\n\n模板结构定义\n\n```go\n<html>\n  <h1>\t\n    {{ .title }}\n  </h1>\n</html>\n```\n\n不同文件夹下模板名字可以相同，此时需要 LoadHTMLGlob() 加载两层模板路径\n\n```go\nrouter.LoadHTMLGlob(\"templates/**/*\")\nrouter.GET(\"/posts/index\", func(c *gin.Context) {\t\n  c.HTML(http.StatusOK, \"posts/index.tmpl\", gin.H{\t\n    \"title\": \"Posts\",\t\n  })\n  c.HTML(http.StatusOK, \"users/index.tmpl\", gin.H{\t\n    \"title\": \"Users\",\n  })\n}\n```\n\ntemplates/posts/index.tmpl\n\n```go\n<!-- 注意开头 define 与结尾 end 不可少 -->\n{{ define \"posts/index.tmpl\" }}\n<html>\n  <h1>\n  {{ .title }}\n  </h1>\n</html>\n{{ end }}\n\ngin也可以使用自定义的模板引擎，如下\nimport \"html/template\"\nfunc main() {\n    router := gin.Default()\n    html := template.Must(template.ParseFiles(\"file1\", \"file2\"))\t\n    router.SetHTMLTemplate(html)\t\n    router.Run(\":8080\")\n}\n```\n\n- 文件响应\n\n```go\n//获取当前文件的相对路径\nrouter.Static(\"/assets\", \"./assets\")\n//\nrouter.StaticFS(\"/more_static\", http.Dir(\"my_file_system\"))\n//获取相对路径下的文件\nrouter.StaticFile(\"/favicon.ico\", \"./resources/favicon.ico\")\n```\n\n- 重定向\n\n```go\nr.GET(\"/redirect\", func(c *gin.Context) {\t\n  //支持内部和外部的重定向    \n  c.Redirect(http.StatusMovedPermanently, \"http://www.baidu.com/\")\n})\n```\n\n- 同步异步\n\ngoroutine 机制可以方便地实现异步处理\n\n```go\nfunc main() {\n  r := gin.Default()\t\n  //1. 异步\n  r.GET(\"/long_async\", func(c *gin.Context) {\t\n    // goroutine 中只能使用只读的上下文 c.Copy()\n    cCp := c.Copy()\t\t\n    go func() {\t\t\n      time.Sleep(5 * time.Second)\t\t\t\n      // 注意使用只读上下文\t\t\n      log.Println(\"Done! in path \" + cCp.Request.URL.Path)\t\n    }()\t\n  })\t\n  //2. 同步\n  r.GET(\"/long_sync\", func(c *gin.Context) {\t\n    time.Sleep(5 * time.Second)\t\n    // 注意可以使用原始上下文\t\n    log.Println(\"Done! in path \" + c.Request.URL.Path)\t\n  })\n  // Listen and serve on 0.0.0.0:8080\t\n  r.Run(\":8080\")}\n```\n\n### 视图\n\n- 传参\n\n- 视图组件\n\n### 中间件\n\n- 分类使用方式\n\n```go\n// 1.全局中间件\nrouter.Use(gin.Logger())\nrouter.Use(gin.Recovery())\n\n// 2.单路由的中间件，可以加任意多个\nrouter.GET(\"/benchmark\", MyMiddelware(), benchEndpoint)\n\n// 3.群组路由的中间件\nauthorized := router.Group(\"/\", MyMiddelware())\n// 或者这样用：\nauthorized := router.Group(\"/\")\nauthorized.Use(MyMiddelware())\n{\t\n  authorized.POST(\"/login\", loginEndpoint)\n}\n```\n\n- 自定义中间件\n\n```go\n//定义\nfunc Logger() gin.HandlerFunc {\t\n  return func(c *gin.Context) {\t\t\n    t := time.Now()\t\n    \n    // 在gin上下文中定义变量\t\t\n    c.Set(\"example\", \"12345\")\t\t\n    \n    // 请求前\t\t\n    \n    c.Next()//处理请求\t\t\n    \n    // 请求后\t\t\n    \n    latency := time.Since(t)\t\t\n    log.Print(latency)\t\t\n    \n    // access the status we are sending\t\t\n    status := c.Writer.Status()\t\t\n    log.Println(status)\t}}\n//使用\nfunc main() {\n  r := gin.New()\t\n  r.Use(Logger())\t\n  \n  r.GET(\"/test\", func(c *gin.Context) {\t\t\n    //获取gin上下文中的变量\t\n    example := c.MustGet(\"example\").(string)\t\t\n    \n    // 会打印: \"12345\"\t\n    log.Println(example)\n  })\t\n  \n  // 监听运行于 0.0.0.0:8080\t\n  r.Run(\":8080\")}\n```\n\n- 中间件参数\n\n- 内置中间件\n  1.简单认证BasicAuth\n\n```go\n// 模拟私有数据\nvar secrets = gin.H{\t\n  \"foo\":    gin.H{\"email\": \"foo@bar.com\", \"phone\": \"123433\"},\t\n  \"austin\": gin.H{\"email\": \"austin@example.com\", \"phone\": \"666\"},\n  \"lena\":   gin.H{\"email\": \"lena@guapa.com\", \"phone\": \"523443\"},\n}\n\nunc main() {\n  r := gin.Default()\t\n  \n  // 使用 gin.BasicAuth 中间件，设置授权用户\t\n  authorized := r.Group(\"/admin\", gin.BasicAuth(gin.Accounts{\t\n    \"foo\":    \"bar\",\t\n    \"austin\": \"1234\",\t\n    \"lena\":   \"hello2\",\t\n    \"manu\":   \"4321\",\t\n  }))\t\n  \n  // 定义路由\n  authorized.GET(\"/secrets\", func(c *gin.Context) {\t\n    // 获取提交的用户名（AuthUserKey）\t\t\n    user := c.MustGet(gin.AuthUserKey).(string)\t\t\n    if secret, ok := secrets[user]; ok {\t\t\n      c.JSON(http.StatusOK, gin.H{\"user\": user, \"secret\": secret})\t\n    } else {\t\t\n      c.JSON(http.StatusOK, gin.H{\"user\": user, \"secret\": \"NO SECRET :(\"})\t\n    }\t\n  })\t\n  \n  // Listen and serve on 0.0.0.0:8080\n  r.Run(\":8080\")}\n```\n\n2.\n\n### 数据库\n\n- Mongodb\n\nGolang常用的Mongodb驱动为 mgo.v2, [查看文档](http://godoc.org/gopkg.in/mgo.v2)\n\nmgo 使用方式如下：\n\n```go\n//定义 Person 结构，字段须为首字母大写\ntype Person struct {\t\n  Name string\n  Phone string\n}\n\nrouter.GET(\"/mongo\", func(context *gin.Context){\t\n  //可本地可远程，不指定协议时默认为http协议访问，此时需要设置 mongodb 的nohttpinterface=false来打开httpinterface。\n  //也可以指定mongodb协议，如 \"mongodb://127.0.0.1:27017\"\n  var MOGODB_URI = \"127.0.0.1:27017\"\t\n  //连接\t\n  session, err := mgo.Dial(MOGODB_URI)\t\n  //连接失败时终止\t\n  if err != nil {      \n    panic(err)    \n  }\t\n  \n  //延迟关闭，释放资源\t\n  defer session.Close()\t\n  \n  //设置模式   \n  session.SetMode(mgo.Monotonic, true)\t\n  \n  //选择数据库与集合    \n  c := session.DB(\"adatabase\").C(\"acollection\")    \n  \n  //插入文档   \n  err = c.Insert(&Person{Name:\"Ale\", Phone:\"+55 53 8116 9639\"},               &Person{Name:\"Cla\",  Phone:\"+55 53 8402 8510\"})\n  \n  //出错判断    \n  if err != nil {       \n    log.Fatal(err)   \n  }\t\n  \n  //查询文档   \n  result := Person{}    \n  \n  //注意mongodb存储后的字段大小写问题  \n  err = c.Find(bson.M{\"name\": \"Ale\"}).One(&result)   \n  \n  //出错判断\n  if err != nil {  \n    log.Fatal(err)   \n  }   \n  \n  fmt.Println(\"Phone:\", result.Phone)\n})\n```\n\n- Mysql\n\n- ORM\n\n### 扩展包\n\n### 常用方法\n\n- gin\n- Context\n","source":"_posts/gin中文文档.md","raw":"---\ntitle: gin中文文档\ndate: 2021-8-17 12:00:00\ncover: https://img.showydream.com/img/OtxkRZ-how-to-build-a-rest-api-with-golang-using-gin-and-gorm.png\ndescription: gin中文文档\nkeywords: gin中文文档,go\ntags: gin中文文档\ncategories:\n  - GO\n---\n\n\n\n本文原文链接`https://github.com/skyhee/gin-doc-cn`，放在自己的博客是因为github打开比较慢，侵删。\n\n### 安装与配置\n\n安装：\n\n```bash\n$ go get gopkg.in/gin-gonic/gin.v1\n```\n\n**注意：确保 GOPATH GOROOT 已经配置**\n\n导入：\n\n```go\nimport \"gopkg.in/gin-gonic/gin.v1\"\n```\n\n### 框架架构\n\n- HTTP 服务器\n\n**1.默认服务器**\n\n```go\nrouter.Run()\n```\n\n**2.HTTP 服务器**\n\n除了默认服务器中 **router.Run()** 的方式外，还可以用 **http.ListenAndServe()**，比如\n\n```go\nfunc main() {\n\trouter := gin.Default()\n\thttp.ListenAndServe(\":8080\", router)\n}\n```\n\n或者自定义 HTTP 服务器的配置：\n\n```go\nfunc main() {\n\trouter := gin.Default()\n\n\ts := &http.Server{\n\t\tAddr:           \":8080\",\n\t\tHandler:        router,\n\t\tReadTimeout:    10 * time.Second,\n\t\tWriteTimeout:   10 * time.Second,\n\t\tMaxHeaderBytes: 1 << 20,\n\t}\n\ts.ListenAndServe()\n}\n```\n\n**3.HTTP 服务器替换方案**\n想无缝重启、停机吗? 以下有几种方式：\n\n我们可以使用 [fvbock/endless](https://github.com/fvbock/endless) 来替换默认的 **ListenAndServe**。但是 windows 不能使用。\n\n```go\nrouter := gin.Default()\nrouter.GET(\"/\", handler)\n// [...]\nendless.ListenAndServe(\":4242\", router)\n```\n\n除了 endless 还可以用manners:\n\n[manners](https://github.com/braintree/manners) 兼容windows\n\n```go\nmanners.ListenAndServe(\":8888\", r)\n```\n\n如果你使用的 golang 版本大于 1.8 版本, 那么可以用 http.Server 内置的 Shutdown 方法来实现优雅的关闭服务, 一个简单的示例代码如下:\n\n```go\nsrv := http.Server{\n    Addr: \":8080\",\n    Handler: router,\n}\n\ngo func() {\n    if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n        log.Fatalf(\"listen: %s\\n\", err)\n    }\n}\n\n// 其他代码, 等待关闭信号\n...\n\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\ndefer cancel()\nif err := srv.Shutdown(ctx); err != nil {\n    log.Fatal(\"Server Shutdown: \", err)\n}\nlog.Println(\"Server exiting\")\n```\n\n完整的代码见 [graceful-shutdown](https://github.com/gin-gonic/gin/blob/master/examples/graceful-shutdown/graceful-shutdown/server.go).\n\n- 生命周期\n\n- Context\n\n### 路由\n\n- 基本路由\n  gin 框架中采用的路由库是 httprouter。\n\n\n```go\n\t// 创建带有默认中间件的路由:\n\t// 日志与恢复中间件\n\trouter := gin.Default()\n\t//创建不带中间件的路由：\n\t//r := gin.New()\n\n\trouter.GET(\"/someGet\", getting)\n\trouter.POST(\"/somePost\", posting)\n\trouter.PUT(\"/somePut\", putting)\n\trouter.DELETE(\"/someDelete\", deleting)\n\trouter.PATCH(\"/somePatch\", patching)\n\trouter.HEAD(\"/someHead\", head)\n\trouter.OPTIONS(\"/someOptions\", options)\n```\n\n- 路由参数\n\napi 参数通过Context的Param方法来获取\n\n```go\nrouter.GET(\"/string/:name\", func(c *gin.Context) {    \n  name := c.Param(\"name\")   \n  fmt.Println(\"Hello %s\", name)    \n})\n```\n\nURL 参数通过 DefaultQuery 或 Query 方法获取\n\n```go\n// url 为 http://localhost:8080/welcome?name=ningskyer时\n// 输出 Hello ningskyer\n// url 为 http://localhost:8080/welcome时\n// 输出 Hello Guest\nrouter.GET(\"/welcome\", func(c *gin.Context) {\t\n\t\tname := c.DefaultQuery(\"name\", \"Guest\") // 可设置默认值\t\n\t\t// 是 c.Request.URL.Query().Get(\"lastname\") 的简写\n    lastname := c.Query(\"lastname\") \n    fmt.Println(\"Hello %s\", name)})\n```\n\n表单参数通过 PostForm 方法获取\n\n```go\n//form\nrouter.POST(\"/form\", func(c *gin.Context) {\t\n  type := c.DefaultPostForm(\"type\", \"alert\")//可设置默认值\t\n  msg := c.PostForm(\"msg\")\t\n  title := c.PostForm(\"title\")\t\n  fmt.Println(\"type is %s, msg is %s, title is %s\", type, msg, title)})\n```\n\n- 路由群组\n\n```go\n\tsomeGroup := router.Group(\"/someGroup\")   \n{        \n  someGroup.GET(\"/someGet\", getting)\t\t\n  someGroup.POST(\"/somePost\", posting)\t\n}\n```\n\n### 控制器\n\n- 数据解析绑定\n\n模型绑定可以将请求体绑定给一个类型，目前支持绑定的类型有 JSON, XML 和标准表单数据 (foo=bar&boo=baz)。\n要注意的是绑定时需要给字段设置绑定类型的标签。比如绑定 JSON 数据时，设置 **json:\"fieldname\"**。\n使用绑定方法时，Gin 会根据请求头中  Content-Type  来自动判断需要解析的类型。如果你明确绑定的类型，你可以不用自动推断，而用 BindWith 方法。\n你也可以指定某字段是必需的。如果一个字段被 **binding:\"required\"** 修饰而值却是空的，请求会失败并返回错误。\n\n```go\n// Binding from JSON\ntype Login struct {\t\n  User     string `form:\"user\" json:\"user\" binding:\"required\"`\t\n  Password string `form:\"password\" json:\"password\" binding:\"required\"`\n}\n\nfunc main() {\n  router := gin.Default()\n  // 绑定JSON的例子 ({\"user\": \"manu\", \"password\": \"123\"})\t\n  router.POST(\"/loginJSON\", func(c *gin.Context) {\n    var json Login\t\t\n    if c.BindJSON(&json) == nil {\t\t\t\n      if json.User == \"manu\" && json.Password == \"123\" {\t\t\t\t\t\n        c.JSON(http.StatusOK, gin.H{\"status\": \"you are logged in\"})                                      \n      } else {\t\t\n        c.JSON(http.StatusUnauthorized, gin.H{\"status\": \"unauthorized\"})\t\t\n      }\t\n    }\n  })\n  \n  // 绑定普通表单的例子 (user=manu&password=123)\t\n  router.POST(\"/loginForm\", func(c *gin.Context) {\t\t\n    var form Login\t\t\n    // 根据请求头中 content-type 自动推断.\t\t\n    if c.Bind(&form) == nil {\t\t\t\n      if form.User == \"manu\" && form.Password == \"123\" {\t\n        c.JSON(http.StatusOK, gin.H{\"status\": \"you are logged in\"})\n      } else {\t\t\t\n        c.JSON(http.StatusUnauthorized, gin.H{\"status\": \"unauthorized\"})\t\n      }\t\n    }\t\n  })\t\n  \n  // 绑定多媒体表单的例子 (user=manu&password=123)\t\n  router.POST(\"/login\", func(c *gin.Context) {\t\n    var form LoginForm\t\n    // 你可以显式声明来绑定多媒体表单：\t\n    // c.BindWith(&form, binding.Form)\t\n    // 或者使用自动推断:\t\t\n    if c.Bind(&form) == nil {\t\t\t\n      if form.User == \"user\" && form.Password == \"password\" {\t\t\n        c.JSON(200, gin.H{\"status\": \"you are logged in\"})\t\t\n      } else {\t\t\t\n        c.JSON(401, gin.H{\"status\": \"unauthorized\"})\t\t\n      }\t\n    }\t\n  })\t\n  \n  // Listen and serve on 0.0.0.0:8080\t\n  router.Run(\":8080\")}\n```\n\n### 请求\n\n- 请求头\n\n- 请求参数\n\n- Cookies\n\n- 上传文件\n\n```go\nrouter.POST(\"/upload\", func(c *gin.Context) {\n  \n  file, header , err := c.Request.FormFile(\"upload\")  \n  filename := header.Filename \n  fmt.Println(header.Filename)  \n  out, err := os.Create(\"./tmp/\"+filename+\".png\") \n  \n  if err != nil {      \n    log.Fatal(err)    \n  }  \n  \n  defer out.Close()  \n  _, err = io.Copy(out, file)  \n  if err != nil {     \n    log.Fatal(err) \n  }  \n})\n```\n\n### 响应\n\n- 响应头\n\n- 附加Cookie\n\n- 字符串响应\n\n**c.String(http.StatusOK, \"some string\")**\n\n\n- JSON/XML/YAML响应\n\n```go\n\nr.GET(\"/moreJSON\", func(c *gin.Context) {\t\n  // You also can use a struct\n  var msg struct {\t\n    Name    string `json:\"user\" xml:\"user\"`\n    Message string\t\t\n    Number  int\t\n  }\n  \n  msg.Name = \"Lena\"\t\n  msg.Message = \"hey\"\n  msg.Number = 123\t\n  \n  // 注意 msg.Name 变成了 \"user\" 字段\t\n  // 以下方式都会输出 :   {\"user\": \"Lena\", \"Message\": \"hey\", \"Number\": 123}\t\n  \n  c.JSON(http.StatusOK, gin.H{\"user\": \"Lena\", \"Message\": \"hey\", \"Number\": 123})\n  c.XML(http.StatusOK, gin.H{\"user\": \"Lena\", \"Message\": \"hey\", \"Number\": 123})\t\n  c.YAML(http.StatusOK, gin.H{\"user\": \"Lena\", \"Message\": \"hey\", \"Number\": 123})\t\n  \n  c.JSON(http.StatusOK, msg)\t\n  c.XML(http.StatusOK, msg)\t\n  c.YAML(http.StatusOK, msg)})\t\n  \n```\n\n- 视图响应\n\n先要使用 LoadHTMLTemplates() 方法来加载模板文件\n\n```go\nfunc main() {\t\n  router := gin.Default()\t\n  \n  //加载模板\t\n  router.LoadHTMLGlob(\"templates/*\")\t\n  //router.LoadHTMLFiles(\"templates/template1.html\", \"templates/template2.html\")\t\n  //定义路由\t\n  router.GET(\"/index\", func(c *gin.Context) {\t\t\n  //根据完整文件名渲染模板，并传递参数\t\t\n  c.HTML(http.StatusOK, \"index.tmpl\", gin.H{\t\t\n      \"title\": \"Main website\",\t\n    })\t\n  })\t\n\n  router.Run(\":8080\")\n}\n```\n\n模板结构定义\n\n```go\n<html>\n  <h1>\t\n    {{ .title }}\n  </h1>\n</html>\n```\n\n不同文件夹下模板名字可以相同，此时需要 LoadHTMLGlob() 加载两层模板路径\n\n```go\nrouter.LoadHTMLGlob(\"templates/**/*\")\nrouter.GET(\"/posts/index\", func(c *gin.Context) {\t\n  c.HTML(http.StatusOK, \"posts/index.tmpl\", gin.H{\t\n    \"title\": \"Posts\",\t\n  })\n  c.HTML(http.StatusOK, \"users/index.tmpl\", gin.H{\t\n    \"title\": \"Users\",\n  })\n}\n```\n\ntemplates/posts/index.tmpl\n\n```go\n<!-- 注意开头 define 与结尾 end 不可少 -->\n{{ define \"posts/index.tmpl\" }}\n<html>\n  <h1>\n  {{ .title }}\n  </h1>\n</html>\n{{ end }}\n\ngin也可以使用自定义的模板引擎，如下\nimport \"html/template\"\nfunc main() {\n    router := gin.Default()\n    html := template.Must(template.ParseFiles(\"file1\", \"file2\"))\t\n    router.SetHTMLTemplate(html)\t\n    router.Run(\":8080\")\n}\n```\n\n- 文件响应\n\n```go\n//获取当前文件的相对路径\nrouter.Static(\"/assets\", \"./assets\")\n//\nrouter.StaticFS(\"/more_static\", http.Dir(\"my_file_system\"))\n//获取相对路径下的文件\nrouter.StaticFile(\"/favicon.ico\", \"./resources/favicon.ico\")\n```\n\n- 重定向\n\n```go\nr.GET(\"/redirect\", func(c *gin.Context) {\t\n  //支持内部和外部的重定向    \n  c.Redirect(http.StatusMovedPermanently, \"http://www.baidu.com/\")\n})\n```\n\n- 同步异步\n\ngoroutine 机制可以方便地实现异步处理\n\n```go\nfunc main() {\n  r := gin.Default()\t\n  //1. 异步\n  r.GET(\"/long_async\", func(c *gin.Context) {\t\n    // goroutine 中只能使用只读的上下文 c.Copy()\n    cCp := c.Copy()\t\t\n    go func() {\t\t\n      time.Sleep(5 * time.Second)\t\t\t\n      // 注意使用只读上下文\t\t\n      log.Println(\"Done! in path \" + cCp.Request.URL.Path)\t\n    }()\t\n  })\t\n  //2. 同步\n  r.GET(\"/long_sync\", func(c *gin.Context) {\t\n    time.Sleep(5 * time.Second)\t\n    // 注意可以使用原始上下文\t\n    log.Println(\"Done! in path \" + c.Request.URL.Path)\t\n  })\n  // Listen and serve on 0.0.0.0:8080\t\n  r.Run(\":8080\")}\n```\n\n### 视图\n\n- 传参\n\n- 视图组件\n\n### 中间件\n\n- 分类使用方式\n\n```go\n// 1.全局中间件\nrouter.Use(gin.Logger())\nrouter.Use(gin.Recovery())\n\n// 2.单路由的中间件，可以加任意多个\nrouter.GET(\"/benchmark\", MyMiddelware(), benchEndpoint)\n\n// 3.群组路由的中间件\nauthorized := router.Group(\"/\", MyMiddelware())\n// 或者这样用：\nauthorized := router.Group(\"/\")\nauthorized.Use(MyMiddelware())\n{\t\n  authorized.POST(\"/login\", loginEndpoint)\n}\n```\n\n- 自定义中间件\n\n```go\n//定义\nfunc Logger() gin.HandlerFunc {\t\n  return func(c *gin.Context) {\t\t\n    t := time.Now()\t\n    \n    // 在gin上下文中定义变量\t\t\n    c.Set(\"example\", \"12345\")\t\t\n    \n    // 请求前\t\t\n    \n    c.Next()//处理请求\t\t\n    \n    // 请求后\t\t\n    \n    latency := time.Since(t)\t\t\n    log.Print(latency)\t\t\n    \n    // access the status we are sending\t\t\n    status := c.Writer.Status()\t\t\n    log.Println(status)\t}}\n//使用\nfunc main() {\n  r := gin.New()\t\n  r.Use(Logger())\t\n  \n  r.GET(\"/test\", func(c *gin.Context) {\t\t\n    //获取gin上下文中的变量\t\n    example := c.MustGet(\"example\").(string)\t\t\n    \n    // 会打印: \"12345\"\t\n    log.Println(example)\n  })\t\n  \n  // 监听运行于 0.0.0.0:8080\t\n  r.Run(\":8080\")}\n```\n\n- 中间件参数\n\n- 内置中间件\n  1.简单认证BasicAuth\n\n```go\n// 模拟私有数据\nvar secrets = gin.H{\t\n  \"foo\":    gin.H{\"email\": \"foo@bar.com\", \"phone\": \"123433\"},\t\n  \"austin\": gin.H{\"email\": \"austin@example.com\", \"phone\": \"666\"},\n  \"lena\":   gin.H{\"email\": \"lena@guapa.com\", \"phone\": \"523443\"},\n}\n\nunc main() {\n  r := gin.Default()\t\n  \n  // 使用 gin.BasicAuth 中间件，设置授权用户\t\n  authorized := r.Group(\"/admin\", gin.BasicAuth(gin.Accounts{\t\n    \"foo\":    \"bar\",\t\n    \"austin\": \"1234\",\t\n    \"lena\":   \"hello2\",\t\n    \"manu\":   \"4321\",\t\n  }))\t\n  \n  // 定义路由\n  authorized.GET(\"/secrets\", func(c *gin.Context) {\t\n    // 获取提交的用户名（AuthUserKey）\t\t\n    user := c.MustGet(gin.AuthUserKey).(string)\t\t\n    if secret, ok := secrets[user]; ok {\t\t\n      c.JSON(http.StatusOK, gin.H{\"user\": user, \"secret\": secret})\t\n    } else {\t\t\n      c.JSON(http.StatusOK, gin.H{\"user\": user, \"secret\": \"NO SECRET :(\"})\t\n    }\t\n  })\t\n  \n  // Listen and serve on 0.0.0.0:8080\n  r.Run(\":8080\")}\n```\n\n2.\n\n### 数据库\n\n- Mongodb\n\nGolang常用的Mongodb驱动为 mgo.v2, [查看文档](http://godoc.org/gopkg.in/mgo.v2)\n\nmgo 使用方式如下：\n\n```go\n//定义 Person 结构，字段须为首字母大写\ntype Person struct {\t\n  Name string\n  Phone string\n}\n\nrouter.GET(\"/mongo\", func(context *gin.Context){\t\n  //可本地可远程，不指定协议时默认为http协议访问，此时需要设置 mongodb 的nohttpinterface=false来打开httpinterface。\n  //也可以指定mongodb协议，如 \"mongodb://127.0.0.1:27017\"\n  var MOGODB_URI = \"127.0.0.1:27017\"\t\n  //连接\t\n  session, err := mgo.Dial(MOGODB_URI)\t\n  //连接失败时终止\t\n  if err != nil {      \n    panic(err)    \n  }\t\n  \n  //延迟关闭，释放资源\t\n  defer session.Close()\t\n  \n  //设置模式   \n  session.SetMode(mgo.Monotonic, true)\t\n  \n  //选择数据库与集合    \n  c := session.DB(\"adatabase\").C(\"acollection\")    \n  \n  //插入文档   \n  err = c.Insert(&Person{Name:\"Ale\", Phone:\"+55 53 8116 9639\"},               &Person{Name:\"Cla\",  Phone:\"+55 53 8402 8510\"})\n  \n  //出错判断    \n  if err != nil {       \n    log.Fatal(err)   \n  }\t\n  \n  //查询文档   \n  result := Person{}    \n  \n  //注意mongodb存储后的字段大小写问题  \n  err = c.Find(bson.M{\"name\": \"Ale\"}).One(&result)   \n  \n  //出错判断\n  if err != nil {  \n    log.Fatal(err)   \n  }   \n  \n  fmt.Println(\"Phone:\", result.Phone)\n})\n```\n\n- Mysql\n\n- ORM\n\n### 扩展包\n\n### 常用方法\n\n- gin\n- Context\n","slug":"gin中文文档","published":1,"updated":"2021-11-08T06:32:24.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62d10015rifygaf29lxx","content":"<p>本文原文链接<code>https://github.com/skyhee/gin-doc-cn</code>，放在自己的博客是因为github打开比较慢，侵删。</p>\n<h3 id=\"安装与配置\"><a href=\"#安装与配置\" class=\"headerlink\" title=\"安装与配置\"></a>安装与配置</h3><p>安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go get gopkg.in/gin-gonic/gin.v1</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：确保 GOPATH GOROOT 已经配置</strong></p>\n<p>导入：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;gopkg.in/gin-gonic/gin.v1&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"框架架构\"><a href=\"#框架架构\" class=\"headerlink\" title=\"框架架构\"></a>框架架构</h3><ul>\n<li>HTTP 服务器</li>\n</ul>\n<p><strong>1.默认服务器</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.Run()</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.HTTP 服务器</strong></p>\n<p>除了默认服务器中 <strong>router.Run()</strong> 的方式外，还可以用 **http.ListenAndServe()**，比如</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := gin.Default()</span><br><span class=\"line\">\thttp.ListenAndServe(<span class=\"string\">&quot;:8080&quot;</span>, router)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者自定义 HTTP 服务器的配置：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">\ts := &amp;http.Server&#123;</span><br><span class=\"line\">\t\tAddr:           <span class=\"string\">&quot;:8080&quot;</span>,</span><br><span class=\"line\">\t\tHandler:        router,</span><br><span class=\"line\">\t\tReadTimeout:    <span class=\"number\">10</span> * time.Second,</span><br><span class=\"line\">\t\tWriteTimeout:   <span class=\"number\">10</span> * time.Second,</span><br><span class=\"line\">\t\tMaxHeaderBytes: <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">20</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts.ListenAndServe()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.HTTP 服务器替换方案</strong><br>想无缝重启、停机吗? 以下有几种方式：</p>\n<p>我们可以使用 <a href=\"https://github.com/fvbock/endless\">fvbock/endless</a> 来替换默认的 <strong>ListenAndServe</strong>。但是 windows 不能使用。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router := gin.Default()</span><br><span class=\"line\">router.GET(<span class=\"string\">&quot;/&quot;</span>, handler)</span><br><span class=\"line\"><span class=\"comment\">// [...]</span></span><br><span class=\"line\">endless.ListenAndServe(<span class=\"string\">&quot;:4242&quot;</span>, router)</span><br></pre></td></tr></table></figure>\n\n<p>除了 endless 还可以用manners:</p>\n<p><a href=\"https://github.com/braintree/manners\">manners</a> 兼容windows</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">manners.ListenAndServe(<span class=\"string\">&quot;:8888&quot;</span>, r)</span><br></pre></td></tr></table></figure>\n\n<p>如果你使用的 golang 版本大于 1.8 版本, 那么可以用 http.Server 内置的 Shutdown 方法来实现优雅的关闭服务, 一个简单的示例代码如下:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">srv := http.Server&#123;</span><br><span class=\"line\">    Addr: <span class=\"string\">&quot;:8080&quot;</span>,</span><br><span class=\"line\">    Handler: router,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := srv.ListenAndServe(); err != <span class=\"literal\">nil</span> &amp;&amp; err != http.ErrServerClosed &#123;</span><br><span class=\"line\">        log.Fatalf(<span class=\"string\">&quot;listen: %s\\n&quot;</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其他代码, 等待关闭信号</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">ctx, cancel := context.WithTimeout(context.Background(), <span class=\"number\">5</span>*time.Second)</span><br><span class=\"line\"><span class=\"keyword\">defer</span> cancel()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err := srv.Shutdown(ctx); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatal(<span class=\"string\">&quot;Server Shutdown: &quot;</span>, err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">log.Println(<span class=\"string\">&quot;Server exiting&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>完整的代码见 <a href=\"https://github.com/gin-gonic/gin/blob/master/examples/graceful-shutdown/graceful-shutdown/server.go\">graceful-shutdown</a>.</p>\n<ul>\n<li><p>生命周期</p>\n</li>\n<li><p>Context</p>\n</li>\n</ul>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><ul>\n<li>基本路由<br>gin 框架中采用的路由库是 httprouter。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建带有默认中间件的路由:</span></span><br><span class=\"line\"><span class=\"comment\">// 日志与恢复中间件</span></span><br><span class=\"line\">router := gin.Default()</span><br><span class=\"line\"><span class=\"comment\">//创建不带中间件的路由：</span></span><br><span class=\"line\"><span class=\"comment\">//r := gin.New()</span></span><br><span class=\"line\"></span><br><span class=\"line\">router.GET(<span class=\"string\">&quot;/someGet&quot;</span>, getting)</span><br><span class=\"line\">router.POST(<span class=\"string\">&quot;/somePost&quot;</span>, posting)</span><br><span class=\"line\">router.PUT(<span class=\"string\">&quot;/somePut&quot;</span>, putting)</span><br><span class=\"line\">router.DELETE(<span class=\"string\">&quot;/someDelete&quot;</span>, deleting)</span><br><span class=\"line\">router.PATCH(<span class=\"string\">&quot;/somePatch&quot;</span>, patching)</span><br><span class=\"line\">router.HEAD(<span class=\"string\">&quot;/someHead&quot;</span>, head)</span><br><span class=\"line\">router.OPTIONS(<span class=\"string\">&quot;/someOptions&quot;</span>, options)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>路由参数</li>\n</ul>\n<p>api 参数通过Context的Param方法来获取</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.GET(<span class=\"string\">&quot;/string/:name&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;    </span><br><span class=\"line\">  name := c.Param(<span class=\"string\">&quot;name&quot;</span>)   </span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;Hello %s&quot;</span>, name)    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>URL 参数通过 DefaultQuery 或 Query 方法获取</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// url 为 http://localhost:8080/welcome?name=ningskyer时</span></span><br><span class=\"line\"><span class=\"comment\">// 输出 Hello ningskyer</span></span><br><span class=\"line\"><span class=\"comment\">// url 为 http://localhost:8080/welcome时</span></span><br><span class=\"line\"><span class=\"comment\">// 输出 Hello Guest</span></span><br><span class=\"line\">router.GET(<span class=\"string\">&quot;/welcome&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t</span><br><span class=\"line\">\t\tname := c.DefaultQuery(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;Guest&quot;</span>) <span class=\"comment\">// 可设置默认值\t</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 是 c.Request.URL.Query().Get(&quot;lastname&quot;) 的简写</span></span><br><span class=\"line\">    lastname := c.Query(<span class=\"string\">&quot;lastname&quot;</span>) </span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Hello %s&quot;</span>, name)&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>表单参数通过 PostForm 方法获取</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//form</span></span><br><span class=\"line\">router.POST(<span class=\"string\">&quot;/form&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t</span><br><span class=\"line\">  <span class=\"keyword\">type</span> := c.DefaultPostForm(<span class=\"string\">&quot;type&quot;</span>, <span class=\"string\">&quot;alert&quot;</span>)<span class=\"comment\">//可设置默认值\t</span></span><br><span class=\"line\">  msg := c.PostForm(<span class=\"string\">&quot;msg&quot;</span>)\t</span><br><span class=\"line\">  title := c.PostForm(<span class=\"string\">&quot;title&quot;</span>)\t</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;type is %s, msg is %s, title is %s&quot;</span>, <span class=\"keyword\">type</span>, msg, title)&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>路由群组</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tsomeGroup := router.Group(<span class=\"string\">&quot;/someGroup&quot;</span>)   </span><br><span class=\"line\">&#123;        </span><br><span class=\"line\">  someGroup.GET(<span class=\"string\">&quot;/someGet&quot;</span>, getting)\t\t</span><br><span class=\"line\">  someGroup.POST(<span class=\"string\">&quot;/somePost&quot;</span>, posting)\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h3><ul>\n<li>数据解析绑定</li>\n</ul>\n<p>模型绑定可以将请求体绑定给一个类型，目前支持绑定的类型有 JSON, XML 和标准表单数据 (foo=bar&amp;boo=baz)。<br>要注意的是绑定时需要给字段设置绑定类型的标签。比如绑定 JSON 数据时，设置 **json:”fieldname”**。<br>使用绑定方法时，Gin 会根据请求头中  Content-Type  来自动判断需要解析的类型。如果你明确绑定的类型，你可以不用自动推断，而用 BindWith 方法。<br>你也可以指定某字段是必需的。如果一个字段被 <strong>binding:”required”</strong> 修饰而值却是空的，请求会失败并返回错误。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Binding from JSON</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Login <span class=\"keyword\">struct</span> &#123;\t</span><br><span class=\"line\">  User     <span class=\"keyword\">string</span> <span class=\"string\">`form:&quot;user&quot; json:&quot;user&quot; binding:&quot;required&quot;`</span>\t</span><br><span class=\"line\">  Password <span class=\"keyword\">string</span> <span class=\"string\">`form:&quot;password&quot; json:&quot;password&quot; binding:&quot;required&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  router := gin.Default()</span><br><span class=\"line\">  <span class=\"comment\">// 绑定JSON的例子 (&#123;&quot;user&quot;: &quot;manu&quot;, &quot;password&quot;: &quot;123&quot;&#125;)\t</span></span><br><span class=\"line\">  router.POST(<span class=\"string\">&quot;/loginJSON&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> json Login\t\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span> c.BindJSON(&amp;json) == <span class=\"literal\">nil</span> &#123;\t\t\t</span><br><span class=\"line\">      <span class=\"keyword\">if</span> json.User == <span class=\"string\">&quot;manu&quot;</span> &amp;&amp; json.Password == <span class=\"string\">&quot;123&quot;</span> &#123;\t\t\t\t\t</span><br><span class=\"line\">        c.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;you are logged in&quot;</span>&#125;)                                      </span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;\t\t</span><br><span class=\"line\">        c.JSON(http.StatusUnauthorized, gin.H&#123;<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;unauthorized&quot;</span>&#125;)\t\t</span><br><span class=\"line\">      &#125;\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 绑定普通表单的例子 (user=manu&amp;password=123)\t</span></span><br><span class=\"line\">  router.POST(<span class=\"string\">&quot;/loginForm&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t\t</span><br><span class=\"line\">    <span class=\"keyword\">var</span> form Login\t\t</span><br><span class=\"line\">    <span class=\"comment\">// 根据请求头中 content-type 自动推断.\t\t</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> c.Bind(&amp;form) == <span class=\"literal\">nil</span> &#123;\t\t\t</span><br><span class=\"line\">      <span class=\"keyword\">if</span> form.User == <span class=\"string\">&quot;manu&quot;</span> &amp;&amp; form.Password == <span class=\"string\">&quot;123&quot;</span> &#123;\t</span><br><span class=\"line\">        c.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;you are logged in&quot;</span>&#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;\t\t\t</span><br><span class=\"line\">        c.JSON(http.StatusUnauthorized, gin.H&#123;<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;unauthorized&quot;</span>&#125;)\t</span><br><span class=\"line\">      &#125;\t</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">  &#125;)\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 绑定多媒体表单的例子 (user=manu&amp;password=123)\t</span></span><br><span class=\"line\">  router.POST(<span class=\"string\">&quot;/login&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t</span><br><span class=\"line\">    <span class=\"keyword\">var</span> form LoginForm\t</span><br><span class=\"line\">    <span class=\"comment\">// 你可以显式声明来绑定多媒体表单：\t</span></span><br><span class=\"line\">    <span class=\"comment\">// c.BindWith(&amp;form, binding.Form)\t</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者使用自动推断:\t\t</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> c.Bind(&amp;form) == <span class=\"literal\">nil</span> &#123;\t\t\t</span><br><span class=\"line\">      <span class=\"keyword\">if</span> form.User == <span class=\"string\">&quot;user&quot;</span> &amp;&amp; form.Password == <span class=\"string\">&quot;password&quot;</span> &#123;\t\t</span><br><span class=\"line\">        c.JSON(<span class=\"number\">200</span>, gin.H&#123;<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;you are logged in&quot;</span>&#125;)\t\t</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;\t\t\t</span><br><span class=\"line\">        c.JSON(<span class=\"number\">401</span>, gin.H&#123;<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;unauthorized&quot;</span>&#125;)\t\t</span><br><span class=\"line\">      &#125;\t</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">  &#125;)\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// Listen and serve on 0.0.0.0:8080\t</span></span><br><span class=\"line\">  router.Run(<span class=\"string\">&quot;:8080&quot;</span>)&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"请求\"><a href=\"#请求\" class=\"headerlink\" title=\"请求\"></a>请求</h3><ul>\n<li><p>请求头</p>\n</li>\n<li><p>请求参数</p>\n</li>\n<li><p>Cookies</p>\n</li>\n<li><p>上传文件</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.POST(<span class=\"string\">&quot;/upload&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  file, header , err := c.Request.FormFile(<span class=\"string\">&quot;upload&quot;</span>)  </span><br><span class=\"line\">  filename := header.Filename </span><br><span class=\"line\">  fmt.Println(header.Filename)  </span><br><span class=\"line\">  out, err := os.Create(<span class=\"string\">&quot;./tmp/&quot;</span>+filename+<span class=\"string\">&quot;.png&quot;</span>) </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;      </span><br><span class=\"line\">    log.Fatal(err)    </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">defer</span> out.Close()  </span><br><span class=\"line\">  _, err = io.Copy(out, file)  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;     </span><br><span class=\"line\">    log.Fatal(err) </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"响应\"><a href=\"#响应\" class=\"headerlink\" title=\"响应\"></a>响应</h3><ul>\n<li><p>响应头</p>\n</li>\n<li><p>附加Cookie</p>\n</li>\n<li><p>字符串响应</p>\n</li>\n</ul>\n<p><strong>c.String(http.StatusOK, “some string”)</strong></p>\n<ul>\n<li>JSON/XML/YAML响应</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">r.GET(<span class=\"string\">&quot;/moreJSON&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t</span><br><span class=\"line\">  <span class=\"comment\">// You also can use a struct</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> msg <span class=\"keyword\">struct</span> &#123;\t</span><br><span class=\"line\">    Name    <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;user&quot; xml:&quot;user&quot;`</span></span><br><span class=\"line\">    Message <span class=\"keyword\">string</span>\t\t</span><br><span class=\"line\">    Number  <span class=\"keyword\">int</span>\t</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  msg.Name = <span class=\"string\">&quot;Lena&quot;</span>\t</span><br><span class=\"line\">  msg.Message = <span class=\"string\">&quot;hey&quot;</span></span><br><span class=\"line\">  msg.Number = <span class=\"number\">123</span>\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 注意 msg.Name 变成了 &quot;user&quot; 字段\t</span></span><br><span class=\"line\">  <span class=\"comment\">// 以下方式都会输出 :   &#123;&quot;user&quot;: &quot;Lena&quot;, &quot;Message&quot;: &quot;hey&quot;, &quot;Number&quot;: 123&#125;\t</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  c.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;user&quot;</span>: <span class=\"string\">&quot;Lena&quot;</span>, <span class=\"string\">&quot;Message&quot;</span>: <span class=\"string\">&quot;hey&quot;</span>, <span class=\"string\">&quot;Number&quot;</span>: <span class=\"number\">123</span>&#125;)</span><br><span class=\"line\">  c.XML(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;user&quot;</span>: <span class=\"string\">&quot;Lena&quot;</span>, <span class=\"string\">&quot;Message&quot;</span>: <span class=\"string\">&quot;hey&quot;</span>, <span class=\"string\">&quot;Number&quot;</span>: <span class=\"number\">123</span>&#125;)\t</span><br><span class=\"line\">  c.YAML(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;user&quot;</span>: <span class=\"string\">&quot;Lena&quot;</span>, <span class=\"string\">&quot;Message&quot;</span>: <span class=\"string\">&quot;hey&quot;</span>, <span class=\"string\">&quot;Number&quot;</span>: <span class=\"number\">123</span>&#125;)\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  c.JSON(http.StatusOK, msg)\t</span><br><span class=\"line\">  c.XML(http.StatusOK, msg)\t</span><br><span class=\"line\">  c.YAML(http.StatusOK, msg)&#125;)\t</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>视图响应</li>\n</ul>\n<p>先要使用 LoadHTMLTemplates() 方法来加载模板文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;\t</span><br><span class=\"line\">  router := gin.Default()\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//加载模板\t</span></span><br><span class=\"line\">  router.LoadHTMLGlob(<span class=\"string\">&quot;templates/*&quot;</span>)\t</span><br><span class=\"line\">  <span class=\"comment\">//router.LoadHTMLFiles(&quot;templates/template1.html&quot;, &quot;templates/template2.html&quot;)\t</span></span><br><span class=\"line\">  <span class=\"comment\">//定义路由\t</span></span><br><span class=\"line\">  router.GET(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t\t</span><br><span class=\"line\">  <span class=\"comment\">//根据完整文件名渲染模板，并传递参数\t\t</span></span><br><span class=\"line\">  c.HTML(http.StatusOK, <span class=\"string\">&quot;index.tmpl&quot;</span>, gin.H&#123;\t\t</span><br><span class=\"line\">      <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;Main website&quot;</span>,\t</span><br><span class=\"line\">    &#125;)\t</span><br><span class=\"line\">  &#125;)\t</span><br><span class=\"line\"></span><br><span class=\"line\">  router.Run(<span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>模板结构定义</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;h1&gt;\t</span><br><span class=\"line\">    &#123;&#123; .title &#125;&#125;</span><br><span class=\"line\">  &lt;/h1&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>不同文件夹下模板名字可以相同，此时需要 LoadHTMLGlob() 加载两层模板路径</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.LoadHTMLGlob(<span class=\"string\">&quot;templates/**/*&quot;</span>)</span><br><span class=\"line\">router.GET(<span class=\"string\">&quot;/posts/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t</span><br><span class=\"line\">  c.HTML(http.StatusOK, <span class=\"string\">&quot;posts/index.tmpl&quot;</span>, gin.H&#123;\t</span><br><span class=\"line\">    <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;Posts&quot;</span>,\t</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  c.HTML(http.StatusOK, <span class=\"string\">&quot;users/index.tmpl&quot;</span>, gin.H&#123;\t</span><br><span class=\"line\">    <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;Users&quot;</span>,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>templates/posts/index.tmpl</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 注意开头 define 与结尾 end 不可少 --&gt;</span><br><span class=\"line\">&#123;&#123; define <span class=\"string\">&quot;posts/index.tmpl&quot;</span> &#125;&#125;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;h1&gt;</span><br><span class=\"line\">  &#123;&#123; .title &#125;&#125;</span><br><span class=\"line\">  &lt;/h1&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">gin也可以使用自定义的模板引擎，如下</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;html/template&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    router := gin.Default()</span><br><span class=\"line\">    html := template.Must(template.ParseFiles(<span class=\"string\">&quot;file1&quot;</span>, <span class=\"string\">&quot;file2&quot;</span>))\t</span><br><span class=\"line\">    router.SetHTMLTemplate(html)\t</span><br><span class=\"line\">    router.Run(<span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>文件响应</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取当前文件的相对路径</span></span><br><span class=\"line\">router.Static(<span class=\"string\">&quot;/assets&quot;</span>, <span class=\"string\">&quot;./assets&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">router.StaticFS(<span class=\"string\">&quot;/more_static&quot;</span>, http.Dir(<span class=\"string\">&quot;my_file_system&quot;</span>))</span><br><span class=\"line\"><span class=\"comment\">//获取相对路径下的文件</span></span><br><span class=\"line\">router.StaticFile(<span class=\"string\">&quot;/favicon.ico&quot;</span>, <span class=\"string\">&quot;./resources/favicon.ico&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重定向</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.GET(<span class=\"string\">&quot;/redirect&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t</span><br><span class=\"line\">  <span class=\"comment\">//支持内部和外部的重定向    </span></span><br><span class=\"line\">  c.Redirect(http.StatusMovedPermanently, <span class=\"string\">&quot;http://www.baidu.com/&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>同步异步</li>\n</ul>\n<p>goroutine 机制可以方便地实现异步处理</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  r := gin.Default()\t</span><br><span class=\"line\">  <span class=\"comment\">//1. 异步</span></span><br><span class=\"line\">  r.GET(<span class=\"string\">&quot;/long_async&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t</span><br><span class=\"line\">    <span class=\"comment\">// goroutine 中只能使用只读的上下文 c.Copy()</span></span><br><span class=\"line\">    cCp := c.Copy()\t\t</span><br><span class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;\t\t</span><br><span class=\"line\">      time.Sleep(<span class=\"number\">5</span> * time.Second)\t\t\t</span><br><span class=\"line\">      <span class=\"comment\">// 注意使用只读上下文\t\t</span></span><br><span class=\"line\">      log.Println(<span class=\"string\">&quot;Done! in path &quot;</span> + cCp.Request.URL.Path)\t</span><br><span class=\"line\">    &#125;()\t</span><br><span class=\"line\">  &#125;)\t</span><br><span class=\"line\">  <span class=\"comment\">//2. 同步</span></span><br><span class=\"line\">  r.GET(<span class=\"string\">&quot;/long_sync&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t</span><br><span class=\"line\">    time.Sleep(<span class=\"number\">5</span> * time.Second)\t</span><br><span class=\"line\">    <span class=\"comment\">// 注意可以使用原始上下文\t</span></span><br><span class=\"line\">    log.Println(<span class=\"string\">&quot;Done! in path &quot;</span> + c.Request.URL.Path)\t</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// Listen and serve on 0.0.0.0:8080\t</span></span><br><span class=\"line\">  r.Run(<span class=\"string\">&quot;:8080&quot;</span>)&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h3><ul>\n<li><p>传参</p>\n</li>\n<li><p>视图组件</p>\n</li>\n</ul>\n<h3 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h3><ul>\n<li>分类使用方式</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.全局中间件</span></span><br><span class=\"line\">router.Use(gin.Logger())</span><br><span class=\"line\">router.Use(gin.Recovery())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.单路由的中间件，可以加任意多个</span></span><br><span class=\"line\">router.GET(<span class=\"string\">&quot;/benchmark&quot;</span>, MyMiddelware(), benchEndpoint)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.群组路由的中间件</span></span><br><span class=\"line\">authorized := router.Group(<span class=\"string\">&quot;/&quot;</span>, MyMiddelware())</span><br><span class=\"line\"><span class=\"comment\">// 或者这样用：</span></span><br><span class=\"line\">authorized := router.Group(<span class=\"string\">&quot;/&quot;</span>)</span><br><span class=\"line\">authorized.Use(MyMiddelware())</span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">  authorized.POST(<span class=\"string\">&quot;/login&quot;</span>, loginEndpoint)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>自定义中间件</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Logger</span><span class=\"params\">()</span> <span class=\"title\">gin</span>.<span class=\"title\">HandlerFunc</span></span> &#123;\t</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t\t</span><br><span class=\"line\">    t := time.Now()\t</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 在gin上下文中定义变量\t\t</span></span><br><span class=\"line\">    c.Set(<span class=\"string\">&quot;example&quot;</span>, <span class=\"string\">&quot;12345&quot;</span>)\t\t</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 请求前\t\t</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    c.Next()<span class=\"comment\">//处理请求\t\t</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 请求后\t\t</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    latency := time.Since(t)\t\t</span><br><span class=\"line\">    log.Print(latency)\t\t</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// access the status we are sending\t\t</span></span><br><span class=\"line\">    status := c.Writer.Status()\t\t</span><br><span class=\"line\">    log.Println(status)\t&#125;&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  r := gin.New()\t</span><br><span class=\"line\">  r.Use(Logger())\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  r.GET(<span class=\"string\">&quot;/test&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t\t</span><br><span class=\"line\">    <span class=\"comment\">//获取gin上下文中的变量\t</span></span><br><span class=\"line\">    example := c.MustGet(<span class=\"string\">&quot;example&quot;</span>).(<span class=\"keyword\">string</span>)\t\t</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 会打印: &quot;12345&quot;\t</span></span><br><span class=\"line\">    log.Println(example)</span><br><span class=\"line\">  &#125;)\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 监听运行于 0.0.0.0:8080\t</span></span><br><span class=\"line\">  r.Run(<span class=\"string\">&quot;:8080&quot;</span>)&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>中间件参数</p>\n</li>\n<li><p>内置中间件<br>1.简单认证BasicAuth</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模拟私有数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> secrets = gin.H&#123;\t</span><br><span class=\"line\">  <span class=\"string\">&quot;foo&quot;</span>:    gin.H&#123;<span class=\"string\">&quot;email&quot;</span>: <span class=\"string\">&quot;foo@bar.com&quot;</span>, <span class=\"string\">&quot;phone&quot;</span>: <span class=\"string\">&quot;123433&quot;</span>&#125;,\t</span><br><span class=\"line\">  <span class=\"string\">&quot;austin&quot;</span>: gin.H&#123;<span class=\"string\">&quot;email&quot;</span>: <span class=\"string\">&quot;austin@example.com&quot;</span>, <span class=\"string\">&quot;phone&quot;</span>: <span class=\"string\">&quot;666&quot;</span>&#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;lena&quot;</span>:   gin.H&#123;<span class=\"string\">&quot;email&quot;</span>: <span class=\"string\">&quot;lena@guapa.com&quot;</span>, <span class=\"string\">&quot;phone&quot;</span>: <span class=\"string\">&quot;523443&quot;</span>&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">unc main() &#123;</span><br><span class=\"line\">  r := gin.Default()\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 gin.BasicAuth 中间件，设置授权用户\t</span></span><br><span class=\"line\">  authorized := r.Group(<span class=\"string\">&quot;/admin&quot;</span>, gin.BasicAuth(gin.Accounts&#123;\t</span><br><span class=\"line\">    <span class=\"string\">&quot;foo&quot;</span>:    <span class=\"string\">&quot;bar&quot;</span>,\t</span><br><span class=\"line\">    <span class=\"string\">&quot;austin&quot;</span>: <span class=\"string\">&quot;1234&quot;</span>,\t</span><br><span class=\"line\">    <span class=\"string\">&quot;lena&quot;</span>:   <span class=\"string\">&quot;hello2&quot;</span>,\t</span><br><span class=\"line\">    <span class=\"string\">&quot;manu&quot;</span>:   <span class=\"string\">&quot;4321&quot;</span>,\t</span><br><span class=\"line\">  &#125;))\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 定义路由</span></span><br><span class=\"line\">  authorized.GET(<span class=\"string\">&quot;/secrets&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t</span><br><span class=\"line\">    <span class=\"comment\">// 获取提交的用户名（AuthUserKey）\t\t</span></span><br><span class=\"line\">    user := c.MustGet(gin.AuthUserKey).(<span class=\"keyword\">string</span>)\t\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span> secret, ok := secrets[user]; ok &#123;\t\t</span><br><span class=\"line\">      c.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;user&quot;</span>: user, <span class=\"string\">&quot;secret&quot;</span>: secret&#125;)\t</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;\t\t</span><br><span class=\"line\">      c.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;user&quot;</span>: user, <span class=\"string\">&quot;secret&quot;</span>: <span class=\"string\">&quot;NO SECRET :(&quot;</span>&#125;)\t</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">  &#125;)\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// Listen and serve on 0.0.0.0:8080</span></span><br><span class=\"line\">  r.Run(<span class=\"string\">&quot;:8080&quot;</span>)&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.</p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><ul>\n<li>Mongodb</li>\n</ul>\n<p>Golang常用的Mongodb驱动为 mgo.v2, <a href=\"http://godoc.org/gopkg.in/mgo.v2\">查看文档</a></p>\n<p>mgo 使用方式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义 Person 结构，字段须为首字母大写</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;\t</span><br><span class=\"line\">  Name <span class=\"keyword\">string</span></span><br><span class=\"line\">  Phone <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">router.GET(<span class=\"string\">&quot;/mongo&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(context *gin.Context)</span></span>&#123;\t</span><br><span class=\"line\">  <span class=\"comment\">//可本地可远程，不指定协议时默认为http协议访问，此时需要设置 mongodb 的nohttpinterface=false来打开httpinterface。</span></span><br><span class=\"line\">  <span class=\"comment\">//也可以指定mongodb协议，如 &quot;mongodb://127.0.0.1:27017&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> MOGODB_URI = <span class=\"string\">&quot;127.0.0.1:27017&quot;</span>\t</span><br><span class=\"line\">  <span class=\"comment\">//连接\t</span></span><br><span class=\"line\">  session, err := mgo.Dial(MOGODB_URI)\t</span><br><span class=\"line\">  <span class=\"comment\">//连接失败时终止\t</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;      </span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)    </span><br><span class=\"line\">  &#125;\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//延迟关闭，释放资源\t</span></span><br><span class=\"line\">  <span class=\"keyword\">defer</span> session.Close()\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//设置模式   </span></span><br><span class=\"line\">  session.SetMode(mgo.Monotonic, <span class=\"literal\">true</span>)\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//选择数据库与集合    </span></span><br><span class=\"line\">  c := session.DB(<span class=\"string\">&quot;adatabase&quot;</span>).C(<span class=\"string\">&quot;acollection&quot;</span>)    </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//插入文档   </span></span><br><span class=\"line\">  err = c.Insert(&amp;Person&#123;Name:<span class=\"string\">&quot;Ale&quot;</span>, Phone:<span class=\"string\">&quot;+55 53 8116 9639&quot;</span>&#125;,               &amp;Person&#123;Name:<span class=\"string\">&quot;Cla&quot;</span>,  Phone:<span class=\"string\">&quot;+55 53 8402 8510&quot;</span>&#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//出错判断    </span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;       </span><br><span class=\"line\">    log.Fatal(err)   </span><br><span class=\"line\">  &#125;\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//查询文档   </span></span><br><span class=\"line\">  result := Person&#123;&#125;    </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//注意mongodb存储后的字段大小写问题  </span></span><br><span class=\"line\">  err = c.Find(bson.M&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;Ale&quot;</span>&#125;).One(&amp;result)   </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//出错判断</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;  </span><br><span class=\"line\">    log.Fatal(err)   </span><br><span class=\"line\">  &#125;   </span><br><span class=\"line\">  </span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;Phone:&quot;</span>, result.Phone)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Mysql</p>\n</li>\n<li><p>ORM</p>\n</li>\n</ul>\n<h3 id=\"扩展包\"><a href=\"#扩展包\" class=\"headerlink\" title=\"扩展包\"></a>扩展包</h3><h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><ul>\n<li>gin</li>\n<li>Context</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>本文原文链接<code>https://github.com/skyhee/gin-doc-cn</code>，放在自己的博客是因为github打开比较慢，侵删。</p>\n<h3 id=\"安装与配置\"><a href=\"#安装与配置\" class=\"headerlink\" title=\"安装与配置\"></a>安装与配置</h3><p>安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go get gopkg.in/gin-gonic/gin.v1</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：确保 GOPATH GOROOT 已经配置</strong></p>\n<p>导入：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;gopkg.in/gin-gonic/gin.v1&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"框架架构\"><a href=\"#框架架构\" class=\"headerlink\" title=\"框架架构\"></a>框架架构</h3><ul>\n<li>HTTP 服务器</li>\n</ul>\n<p><strong>1.默认服务器</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.Run()</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.HTTP 服务器</strong></p>\n<p>除了默认服务器中 <strong>router.Run()</strong> 的方式外，还可以用 **http.ListenAndServe()**，比如</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := gin.Default()</span><br><span class=\"line\">\thttp.ListenAndServe(<span class=\"string\">&quot;:8080&quot;</span>, router)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者自定义 HTTP 服务器的配置：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">\ts := &amp;http.Server&#123;</span><br><span class=\"line\">\t\tAddr:           <span class=\"string\">&quot;:8080&quot;</span>,</span><br><span class=\"line\">\t\tHandler:        router,</span><br><span class=\"line\">\t\tReadTimeout:    <span class=\"number\">10</span> * time.Second,</span><br><span class=\"line\">\t\tWriteTimeout:   <span class=\"number\">10</span> * time.Second,</span><br><span class=\"line\">\t\tMaxHeaderBytes: <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">20</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts.ListenAndServe()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.HTTP 服务器替换方案</strong><br>想无缝重启、停机吗? 以下有几种方式：</p>\n<p>我们可以使用 <a href=\"https://github.com/fvbock/endless\">fvbock/endless</a> 来替换默认的 <strong>ListenAndServe</strong>。但是 windows 不能使用。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router := gin.Default()</span><br><span class=\"line\">router.GET(<span class=\"string\">&quot;/&quot;</span>, handler)</span><br><span class=\"line\"><span class=\"comment\">// [...]</span></span><br><span class=\"line\">endless.ListenAndServe(<span class=\"string\">&quot;:4242&quot;</span>, router)</span><br></pre></td></tr></table></figure>\n\n<p>除了 endless 还可以用manners:</p>\n<p><a href=\"https://github.com/braintree/manners\">manners</a> 兼容windows</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">manners.ListenAndServe(<span class=\"string\">&quot;:8888&quot;</span>, r)</span><br></pre></td></tr></table></figure>\n\n<p>如果你使用的 golang 版本大于 1.8 版本, 那么可以用 http.Server 内置的 Shutdown 方法来实现优雅的关闭服务, 一个简单的示例代码如下:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">srv := http.Server&#123;</span><br><span class=\"line\">    Addr: <span class=\"string\">&quot;:8080&quot;</span>,</span><br><span class=\"line\">    Handler: router,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := srv.ListenAndServe(); err != <span class=\"literal\">nil</span> &amp;&amp; err != http.ErrServerClosed &#123;</span><br><span class=\"line\">        log.Fatalf(<span class=\"string\">&quot;listen: %s\\n&quot;</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其他代码, 等待关闭信号</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">ctx, cancel := context.WithTimeout(context.Background(), <span class=\"number\">5</span>*time.Second)</span><br><span class=\"line\"><span class=\"keyword\">defer</span> cancel()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err := srv.Shutdown(ctx); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatal(<span class=\"string\">&quot;Server Shutdown: &quot;</span>, err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">log.Println(<span class=\"string\">&quot;Server exiting&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>完整的代码见 <a href=\"https://github.com/gin-gonic/gin/blob/master/examples/graceful-shutdown/graceful-shutdown/server.go\">graceful-shutdown</a>.</p>\n<ul>\n<li><p>生命周期</p>\n</li>\n<li><p>Context</p>\n</li>\n</ul>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><ul>\n<li>基本路由<br>gin 框架中采用的路由库是 httprouter。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建带有默认中间件的路由:</span></span><br><span class=\"line\"><span class=\"comment\">// 日志与恢复中间件</span></span><br><span class=\"line\">router := gin.Default()</span><br><span class=\"line\"><span class=\"comment\">//创建不带中间件的路由：</span></span><br><span class=\"line\"><span class=\"comment\">//r := gin.New()</span></span><br><span class=\"line\"></span><br><span class=\"line\">router.GET(<span class=\"string\">&quot;/someGet&quot;</span>, getting)</span><br><span class=\"line\">router.POST(<span class=\"string\">&quot;/somePost&quot;</span>, posting)</span><br><span class=\"line\">router.PUT(<span class=\"string\">&quot;/somePut&quot;</span>, putting)</span><br><span class=\"line\">router.DELETE(<span class=\"string\">&quot;/someDelete&quot;</span>, deleting)</span><br><span class=\"line\">router.PATCH(<span class=\"string\">&quot;/somePatch&quot;</span>, patching)</span><br><span class=\"line\">router.HEAD(<span class=\"string\">&quot;/someHead&quot;</span>, head)</span><br><span class=\"line\">router.OPTIONS(<span class=\"string\">&quot;/someOptions&quot;</span>, options)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>路由参数</li>\n</ul>\n<p>api 参数通过Context的Param方法来获取</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.GET(<span class=\"string\">&quot;/string/:name&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;    </span><br><span class=\"line\">  name := c.Param(<span class=\"string\">&quot;name&quot;</span>)   </span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;Hello %s&quot;</span>, name)    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>URL 参数通过 DefaultQuery 或 Query 方法获取</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// url 为 http://localhost:8080/welcome?name=ningskyer时</span></span><br><span class=\"line\"><span class=\"comment\">// 输出 Hello ningskyer</span></span><br><span class=\"line\"><span class=\"comment\">// url 为 http://localhost:8080/welcome时</span></span><br><span class=\"line\"><span class=\"comment\">// 输出 Hello Guest</span></span><br><span class=\"line\">router.GET(<span class=\"string\">&quot;/welcome&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t</span><br><span class=\"line\">\t\tname := c.DefaultQuery(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;Guest&quot;</span>) <span class=\"comment\">// 可设置默认值\t</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 是 c.Request.URL.Query().Get(&quot;lastname&quot;) 的简写</span></span><br><span class=\"line\">    lastname := c.Query(<span class=\"string\">&quot;lastname&quot;</span>) </span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Hello %s&quot;</span>, name)&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>表单参数通过 PostForm 方法获取</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//form</span></span><br><span class=\"line\">router.POST(<span class=\"string\">&quot;/form&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t</span><br><span class=\"line\">  <span class=\"keyword\">type</span> := c.DefaultPostForm(<span class=\"string\">&quot;type&quot;</span>, <span class=\"string\">&quot;alert&quot;</span>)<span class=\"comment\">//可设置默认值\t</span></span><br><span class=\"line\">  msg := c.PostForm(<span class=\"string\">&quot;msg&quot;</span>)\t</span><br><span class=\"line\">  title := c.PostForm(<span class=\"string\">&quot;title&quot;</span>)\t</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;type is %s, msg is %s, title is %s&quot;</span>, <span class=\"keyword\">type</span>, msg, title)&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>路由群组</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tsomeGroup := router.Group(<span class=\"string\">&quot;/someGroup&quot;</span>)   </span><br><span class=\"line\">&#123;        </span><br><span class=\"line\">  someGroup.GET(<span class=\"string\">&quot;/someGet&quot;</span>, getting)\t\t</span><br><span class=\"line\">  someGroup.POST(<span class=\"string\">&quot;/somePost&quot;</span>, posting)\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h3><ul>\n<li>数据解析绑定</li>\n</ul>\n<p>模型绑定可以将请求体绑定给一个类型，目前支持绑定的类型有 JSON, XML 和标准表单数据 (foo=bar&amp;boo=baz)。<br>要注意的是绑定时需要给字段设置绑定类型的标签。比如绑定 JSON 数据时，设置 **json:”fieldname”**。<br>使用绑定方法时，Gin 会根据请求头中  Content-Type  来自动判断需要解析的类型。如果你明确绑定的类型，你可以不用自动推断，而用 BindWith 方法。<br>你也可以指定某字段是必需的。如果一个字段被 <strong>binding:”required”</strong> 修饰而值却是空的，请求会失败并返回错误。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Binding from JSON</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Login <span class=\"keyword\">struct</span> &#123;\t</span><br><span class=\"line\">  User     <span class=\"keyword\">string</span> <span class=\"string\">`form:&quot;user&quot; json:&quot;user&quot; binding:&quot;required&quot;`</span>\t</span><br><span class=\"line\">  Password <span class=\"keyword\">string</span> <span class=\"string\">`form:&quot;password&quot; json:&quot;password&quot; binding:&quot;required&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  router := gin.Default()</span><br><span class=\"line\">  <span class=\"comment\">// 绑定JSON的例子 (&#123;&quot;user&quot;: &quot;manu&quot;, &quot;password&quot;: &quot;123&quot;&#125;)\t</span></span><br><span class=\"line\">  router.POST(<span class=\"string\">&quot;/loginJSON&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> json Login\t\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span> c.BindJSON(&amp;json) == <span class=\"literal\">nil</span> &#123;\t\t\t</span><br><span class=\"line\">      <span class=\"keyword\">if</span> json.User == <span class=\"string\">&quot;manu&quot;</span> &amp;&amp; json.Password == <span class=\"string\">&quot;123&quot;</span> &#123;\t\t\t\t\t</span><br><span class=\"line\">        c.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;you are logged in&quot;</span>&#125;)                                      </span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;\t\t</span><br><span class=\"line\">        c.JSON(http.StatusUnauthorized, gin.H&#123;<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;unauthorized&quot;</span>&#125;)\t\t</span><br><span class=\"line\">      &#125;\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 绑定普通表单的例子 (user=manu&amp;password=123)\t</span></span><br><span class=\"line\">  router.POST(<span class=\"string\">&quot;/loginForm&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t\t</span><br><span class=\"line\">    <span class=\"keyword\">var</span> form Login\t\t</span><br><span class=\"line\">    <span class=\"comment\">// 根据请求头中 content-type 自动推断.\t\t</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> c.Bind(&amp;form) == <span class=\"literal\">nil</span> &#123;\t\t\t</span><br><span class=\"line\">      <span class=\"keyword\">if</span> form.User == <span class=\"string\">&quot;manu&quot;</span> &amp;&amp; form.Password == <span class=\"string\">&quot;123&quot;</span> &#123;\t</span><br><span class=\"line\">        c.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;you are logged in&quot;</span>&#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;\t\t\t</span><br><span class=\"line\">        c.JSON(http.StatusUnauthorized, gin.H&#123;<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;unauthorized&quot;</span>&#125;)\t</span><br><span class=\"line\">      &#125;\t</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">  &#125;)\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 绑定多媒体表单的例子 (user=manu&amp;password=123)\t</span></span><br><span class=\"line\">  router.POST(<span class=\"string\">&quot;/login&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t</span><br><span class=\"line\">    <span class=\"keyword\">var</span> form LoginForm\t</span><br><span class=\"line\">    <span class=\"comment\">// 你可以显式声明来绑定多媒体表单：\t</span></span><br><span class=\"line\">    <span class=\"comment\">// c.BindWith(&amp;form, binding.Form)\t</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者使用自动推断:\t\t</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> c.Bind(&amp;form) == <span class=\"literal\">nil</span> &#123;\t\t\t</span><br><span class=\"line\">      <span class=\"keyword\">if</span> form.User == <span class=\"string\">&quot;user&quot;</span> &amp;&amp; form.Password == <span class=\"string\">&quot;password&quot;</span> &#123;\t\t</span><br><span class=\"line\">        c.JSON(<span class=\"number\">200</span>, gin.H&#123;<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;you are logged in&quot;</span>&#125;)\t\t</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;\t\t\t</span><br><span class=\"line\">        c.JSON(<span class=\"number\">401</span>, gin.H&#123;<span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;unauthorized&quot;</span>&#125;)\t\t</span><br><span class=\"line\">      &#125;\t</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">  &#125;)\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// Listen and serve on 0.0.0.0:8080\t</span></span><br><span class=\"line\">  router.Run(<span class=\"string\">&quot;:8080&quot;</span>)&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"请求\"><a href=\"#请求\" class=\"headerlink\" title=\"请求\"></a>请求</h3><ul>\n<li><p>请求头</p>\n</li>\n<li><p>请求参数</p>\n</li>\n<li><p>Cookies</p>\n</li>\n<li><p>上传文件</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.POST(<span class=\"string\">&quot;/upload&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  file, header , err := c.Request.FormFile(<span class=\"string\">&quot;upload&quot;</span>)  </span><br><span class=\"line\">  filename := header.Filename </span><br><span class=\"line\">  fmt.Println(header.Filename)  </span><br><span class=\"line\">  out, err := os.Create(<span class=\"string\">&quot;./tmp/&quot;</span>+filename+<span class=\"string\">&quot;.png&quot;</span>) </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;      </span><br><span class=\"line\">    log.Fatal(err)    </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">defer</span> out.Close()  </span><br><span class=\"line\">  _, err = io.Copy(out, file)  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;     </span><br><span class=\"line\">    log.Fatal(err) </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"响应\"><a href=\"#响应\" class=\"headerlink\" title=\"响应\"></a>响应</h3><ul>\n<li><p>响应头</p>\n</li>\n<li><p>附加Cookie</p>\n</li>\n<li><p>字符串响应</p>\n</li>\n</ul>\n<p><strong>c.String(http.StatusOK, “some string”)</strong></p>\n<ul>\n<li>JSON/XML/YAML响应</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">r.GET(<span class=\"string\">&quot;/moreJSON&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t</span><br><span class=\"line\">  <span class=\"comment\">// You also can use a struct</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> msg <span class=\"keyword\">struct</span> &#123;\t</span><br><span class=\"line\">    Name    <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;user&quot; xml:&quot;user&quot;`</span></span><br><span class=\"line\">    Message <span class=\"keyword\">string</span>\t\t</span><br><span class=\"line\">    Number  <span class=\"keyword\">int</span>\t</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  msg.Name = <span class=\"string\">&quot;Lena&quot;</span>\t</span><br><span class=\"line\">  msg.Message = <span class=\"string\">&quot;hey&quot;</span></span><br><span class=\"line\">  msg.Number = <span class=\"number\">123</span>\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 注意 msg.Name 变成了 &quot;user&quot; 字段\t</span></span><br><span class=\"line\">  <span class=\"comment\">// 以下方式都会输出 :   &#123;&quot;user&quot;: &quot;Lena&quot;, &quot;Message&quot;: &quot;hey&quot;, &quot;Number&quot;: 123&#125;\t</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  c.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;user&quot;</span>: <span class=\"string\">&quot;Lena&quot;</span>, <span class=\"string\">&quot;Message&quot;</span>: <span class=\"string\">&quot;hey&quot;</span>, <span class=\"string\">&quot;Number&quot;</span>: <span class=\"number\">123</span>&#125;)</span><br><span class=\"line\">  c.XML(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;user&quot;</span>: <span class=\"string\">&quot;Lena&quot;</span>, <span class=\"string\">&quot;Message&quot;</span>: <span class=\"string\">&quot;hey&quot;</span>, <span class=\"string\">&quot;Number&quot;</span>: <span class=\"number\">123</span>&#125;)\t</span><br><span class=\"line\">  c.YAML(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;user&quot;</span>: <span class=\"string\">&quot;Lena&quot;</span>, <span class=\"string\">&quot;Message&quot;</span>: <span class=\"string\">&quot;hey&quot;</span>, <span class=\"string\">&quot;Number&quot;</span>: <span class=\"number\">123</span>&#125;)\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  c.JSON(http.StatusOK, msg)\t</span><br><span class=\"line\">  c.XML(http.StatusOK, msg)\t</span><br><span class=\"line\">  c.YAML(http.StatusOK, msg)&#125;)\t</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>视图响应</li>\n</ul>\n<p>先要使用 LoadHTMLTemplates() 方法来加载模板文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;\t</span><br><span class=\"line\">  router := gin.Default()\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//加载模板\t</span></span><br><span class=\"line\">  router.LoadHTMLGlob(<span class=\"string\">&quot;templates/*&quot;</span>)\t</span><br><span class=\"line\">  <span class=\"comment\">//router.LoadHTMLFiles(&quot;templates/template1.html&quot;, &quot;templates/template2.html&quot;)\t</span></span><br><span class=\"line\">  <span class=\"comment\">//定义路由\t</span></span><br><span class=\"line\">  router.GET(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t\t</span><br><span class=\"line\">  <span class=\"comment\">//根据完整文件名渲染模板，并传递参数\t\t</span></span><br><span class=\"line\">  c.HTML(http.StatusOK, <span class=\"string\">&quot;index.tmpl&quot;</span>, gin.H&#123;\t\t</span><br><span class=\"line\">      <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;Main website&quot;</span>,\t</span><br><span class=\"line\">    &#125;)\t</span><br><span class=\"line\">  &#125;)\t</span><br><span class=\"line\"></span><br><span class=\"line\">  router.Run(<span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>模板结构定义</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;h1&gt;\t</span><br><span class=\"line\">    &#123;&#123; .title &#125;&#125;</span><br><span class=\"line\">  &lt;/h1&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>不同文件夹下模板名字可以相同，此时需要 LoadHTMLGlob() 加载两层模板路径</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.LoadHTMLGlob(<span class=\"string\">&quot;templates/**/*&quot;</span>)</span><br><span class=\"line\">router.GET(<span class=\"string\">&quot;/posts/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t</span><br><span class=\"line\">  c.HTML(http.StatusOK, <span class=\"string\">&quot;posts/index.tmpl&quot;</span>, gin.H&#123;\t</span><br><span class=\"line\">    <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;Posts&quot;</span>,\t</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  c.HTML(http.StatusOK, <span class=\"string\">&quot;users/index.tmpl&quot;</span>, gin.H&#123;\t</span><br><span class=\"line\">    <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;Users&quot;</span>,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>templates/posts/index.tmpl</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 注意开头 define 与结尾 end 不可少 --&gt;</span><br><span class=\"line\">&#123;&#123; define <span class=\"string\">&quot;posts/index.tmpl&quot;</span> &#125;&#125;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;h1&gt;</span><br><span class=\"line\">  &#123;&#123; .title &#125;&#125;</span><br><span class=\"line\">  &lt;/h1&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">gin也可以使用自定义的模板引擎，如下</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;html/template&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    router := gin.Default()</span><br><span class=\"line\">    html := template.Must(template.ParseFiles(<span class=\"string\">&quot;file1&quot;</span>, <span class=\"string\">&quot;file2&quot;</span>))\t</span><br><span class=\"line\">    router.SetHTMLTemplate(html)\t</span><br><span class=\"line\">    router.Run(<span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>文件响应</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取当前文件的相对路径</span></span><br><span class=\"line\">router.Static(<span class=\"string\">&quot;/assets&quot;</span>, <span class=\"string\">&quot;./assets&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">router.StaticFS(<span class=\"string\">&quot;/more_static&quot;</span>, http.Dir(<span class=\"string\">&quot;my_file_system&quot;</span>))</span><br><span class=\"line\"><span class=\"comment\">//获取相对路径下的文件</span></span><br><span class=\"line\">router.StaticFile(<span class=\"string\">&quot;/favicon.ico&quot;</span>, <span class=\"string\">&quot;./resources/favicon.ico&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重定向</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.GET(<span class=\"string\">&quot;/redirect&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t</span><br><span class=\"line\">  <span class=\"comment\">//支持内部和外部的重定向    </span></span><br><span class=\"line\">  c.Redirect(http.StatusMovedPermanently, <span class=\"string\">&quot;http://www.baidu.com/&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>同步异步</li>\n</ul>\n<p>goroutine 机制可以方便地实现异步处理</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  r := gin.Default()\t</span><br><span class=\"line\">  <span class=\"comment\">//1. 异步</span></span><br><span class=\"line\">  r.GET(<span class=\"string\">&quot;/long_async&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t</span><br><span class=\"line\">    <span class=\"comment\">// goroutine 中只能使用只读的上下文 c.Copy()</span></span><br><span class=\"line\">    cCp := c.Copy()\t\t</span><br><span class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;\t\t</span><br><span class=\"line\">      time.Sleep(<span class=\"number\">5</span> * time.Second)\t\t\t</span><br><span class=\"line\">      <span class=\"comment\">// 注意使用只读上下文\t\t</span></span><br><span class=\"line\">      log.Println(<span class=\"string\">&quot;Done! in path &quot;</span> + cCp.Request.URL.Path)\t</span><br><span class=\"line\">    &#125;()\t</span><br><span class=\"line\">  &#125;)\t</span><br><span class=\"line\">  <span class=\"comment\">//2. 同步</span></span><br><span class=\"line\">  r.GET(<span class=\"string\">&quot;/long_sync&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t</span><br><span class=\"line\">    time.Sleep(<span class=\"number\">5</span> * time.Second)\t</span><br><span class=\"line\">    <span class=\"comment\">// 注意可以使用原始上下文\t</span></span><br><span class=\"line\">    log.Println(<span class=\"string\">&quot;Done! in path &quot;</span> + c.Request.URL.Path)\t</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// Listen and serve on 0.0.0.0:8080\t</span></span><br><span class=\"line\">  r.Run(<span class=\"string\">&quot;:8080&quot;</span>)&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h3><ul>\n<li><p>传参</p>\n</li>\n<li><p>视图组件</p>\n</li>\n</ul>\n<h3 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h3><ul>\n<li>分类使用方式</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.全局中间件</span></span><br><span class=\"line\">router.Use(gin.Logger())</span><br><span class=\"line\">router.Use(gin.Recovery())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.单路由的中间件，可以加任意多个</span></span><br><span class=\"line\">router.GET(<span class=\"string\">&quot;/benchmark&quot;</span>, MyMiddelware(), benchEndpoint)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.群组路由的中间件</span></span><br><span class=\"line\">authorized := router.Group(<span class=\"string\">&quot;/&quot;</span>, MyMiddelware())</span><br><span class=\"line\"><span class=\"comment\">// 或者这样用：</span></span><br><span class=\"line\">authorized := router.Group(<span class=\"string\">&quot;/&quot;</span>)</span><br><span class=\"line\">authorized.Use(MyMiddelware())</span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">  authorized.POST(<span class=\"string\">&quot;/login&quot;</span>, loginEndpoint)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>自定义中间件</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Logger</span><span class=\"params\">()</span> <span class=\"title\">gin</span>.<span class=\"title\">HandlerFunc</span></span> &#123;\t</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t\t</span><br><span class=\"line\">    t := time.Now()\t</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 在gin上下文中定义变量\t\t</span></span><br><span class=\"line\">    c.Set(<span class=\"string\">&quot;example&quot;</span>, <span class=\"string\">&quot;12345&quot;</span>)\t\t</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 请求前\t\t</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    c.Next()<span class=\"comment\">//处理请求\t\t</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 请求后\t\t</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    latency := time.Since(t)\t\t</span><br><span class=\"line\">    log.Print(latency)\t\t</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// access the status we are sending\t\t</span></span><br><span class=\"line\">    status := c.Writer.Status()\t\t</span><br><span class=\"line\">    log.Println(status)\t&#125;&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  r := gin.New()\t</span><br><span class=\"line\">  r.Use(Logger())\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  r.GET(<span class=\"string\">&quot;/test&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t\t</span><br><span class=\"line\">    <span class=\"comment\">//获取gin上下文中的变量\t</span></span><br><span class=\"line\">    example := c.MustGet(<span class=\"string\">&quot;example&quot;</span>).(<span class=\"keyword\">string</span>)\t\t</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 会打印: &quot;12345&quot;\t</span></span><br><span class=\"line\">    log.Println(example)</span><br><span class=\"line\">  &#125;)\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 监听运行于 0.0.0.0:8080\t</span></span><br><span class=\"line\">  r.Run(<span class=\"string\">&quot;:8080&quot;</span>)&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>中间件参数</p>\n</li>\n<li><p>内置中间件<br>1.简单认证BasicAuth</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模拟私有数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> secrets = gin.H&#123;\t</span><br><span class=\"line\">  <span class=\"string\">&quot;foo&quot;</span>:    gin.H&#123;<span class=\"string\">&quot;email&quot;</span>: <span class=\"string\">&quot;foo@bar.com&quot;</span>, <span class=\"string\">&quot;phone&quot;</span>: <span class=\"string\">&quot;123433&quot;</span>&#125;,\t</span><br><span class=\"line\">  <span class=\"string\">&quot;austin&quot;</span>: gin.H&#123;<span class=\"string\">&quot;email&quot;</span>: <span class=\"string\">&quot;austin@example.com&quot;</span>, <span class=\"string\">&quot;phone&quot;</span>: <span class=\"string\">&quot;666&quot;</span>&#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;lena&quot;</span>:   gin.H&#123;<span class=\"string\">&quot;email&quot;</span>: <span class=\"string\">&quot;lena@guapa.com&quot;</span>, <span class=\"string\">&quot;phone&quot;</span>: <span class=\"string\">&quot;523443&quot;</span>&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">unc main() &#123;</span><br><span class=\"line\">  r := gin.Default()\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 gin.BasicAuth 中间件，设置授权用户\t</span></span><br><span class=\"line\">  authorized := r.Group(<span class=\"string\">&quot;/admin&quot;</span>, gin.BasicAuth(gin.Accounts&#123;\t</span><br><span class=\"line\">    <span class=\"string\">&quot;foo&quot;</span>:    <span class=\"string\">&quot;bar&quot;</span>,\t</span><br><span class=\"line\">    <span class=\"string\">&quot;austin&quot;</span>: <span class=\"string\">&quot;1234&quot;</span>,\t</span><br><span class=\"line\">    <span class=\"string\">&quot;lena&quot;</span>:   <span class=\"string\">&quot;hello2&quot;</span>,\t</span><br><span class=\"line\">    <span class=\"string\">&quot;manu&quot;</span>:   <span class=\"string\">&quot;4321&quot;</span>,\t</span><br><span class=\"line\">  &#125;))\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 定义路由</span></span><br><span class=\"line\">  authorized.GET(<span class=\"string\">&quot;/secrets&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;\t</span><br><span class=\"line\">    <span class=\"comment\">// 获取提交的用户名（AuthUserKey）\t\t</span></span><br><span class=\"line\">    user := c.MustGet(gin.AuthUserKey).(<span class=\"keyword\">string</span>)\t\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span> secret, ok := secrets[user]; ok &#123;\t\t</span><br><span class=\"line\">      c.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;user&quot;</span>: user, <span class=\"string\">&quot;secret&quot;</span>: secret&#125;)\t</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;\t\t</span><br><span class=\"line\">      c.JSON(http.StatusOK, gin.H&#123;<span class=\"string\">&quot;user&quot;</span>: user, <span class=\"string\">&quot;secret&quot;</span>: <span class=\"string\">&quot;NO SECRET :(&quot;</span>&#125;)\t</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">  &#125;)\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// Listen and serve on 0.0.0.0:8080</span></span><br><span class=\"line\">  r.Run(<span class=\"string\">&quot;:8080&quot;</span>)&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.</p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><ul>\n<li>Mongodb</li>\n</ul>\n<p>Golang常用的Mongodb驱动为 mgo.v2, <a href=\"http://godoc.org/gopkg.in/mgo.v2\">查看文档</a></p>\n<p>mgo 使用方式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义 Person 结构，字段须为首字母大写</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;\t</span><br><span class=\"line\">  Name <span class=\"keyword\">string</span></span><br><span class=\"line\">  Phone <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">router.GET(<span class=\"string\">&quot;/mongo&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(context *gin.Context)</span></span>&#123;\t</span><br><span class=\"line\">  <span class=\"comment\">//可本地可远程，不指定协议时默认为http协议访问，此时需要设置 mongodb 的nohttpinterface=false来打开httpinterface。</span></span><br><span class=\"line\">  <span class=\"comment\">//也可以指定mongodb协议，如 &quot;mongodb://127.0.0.1:27017&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> MOGODB_URI = <span class=\"string\">&quot;127.0.0.1:27017&quot;</span>\t</span><br><span class=\"line\">  <span class=\"comment\">//连接\t</span></span><br><span class=\"line\">  session, err := mgo.Dial(MOGODB_URI)\t</span><br><span class=\"line\">  <span class=\"comment\">//连接失败时终止\t</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;      </span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)    </span><br><span class=\"line\">  &#125;\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//延迟关闭，释放资源\t</span></span><br><span class=\"line\">  <span class=\"keyword\">defer</span> session.Close()\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//设置模式   </span></span><br><span class=\"line\">  session.SetMode(mgo.Monotonic, <span class=\"literal\">true</span>)\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//选择数据库与集合    </span></span><br><span class=\"line\">  c := session.DB(<span class=\"string\">&quot;adatabase&quot;</span>).C(<span class=\"string\">&quot;acollection&quot;</span>)    </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//插入文档   </span></span><br><span class=\"line\">  err = c.Insert(&amp;Person&#123;Name:<span class=\"string\">&quot;Ale&quot;</span>, Phone:<span class=\"string\">&quot;+55 53 8116 9639&quot;</span>&#125;,               &amp;Person&#123;Name:<span class=\"string\">&quot;Cla&quot;</span>,  Phone:<span class=\"string\">&quot;+55 53 8402 8510&quot;</span>&#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//出错判断    </span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;       </span><br><span class=\"line\">    log.Fatal(err)   </span><br><span class=\"line\">  &#125;\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//查询文档   </span></span><br><span class=\"line\">  result := Person&#123;&#125;    </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//注意mongodb存储后的字段大小写问题  </span></span><br><span class=\"line\">  err = c.Find(bson.M&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;Ale&quot;</span>&#125;).One(&amp;result)   </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//出错判断</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;  </span><br><span class=\"line\">    log.Fatal(err)   </span><br><span class=\"line\">  &#125;   </span><br><span class=\"line\">  </span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;Phone:&quot;</span>, result.Phone)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Mysql</p>\n</li>\n<li><p>ORM</p>\n</li>\n</ul>\n<h3 id=\"扩展包\"><a href=\"#扩展包\" class=\"headerlink\" title=\"扩展包\"></a>扩展包</h3><h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><ul>\n<li>gin</li>\n<li>Context</li>\n</ul>\n"},{"title":"Nuxt优化笔记","date":"2021-10-09T02:54:58.000Z","cover":"https://img.showydream.com/img/rgz1H3-bryony-elena-ByraPj141bo-unsplash.jpg","description":"Nuxt踩坑、优化笔记","keywords":"Vue，Nuxt，面试题","_content":"\n\n\n# 简介\n\nNuxt 是支持 Vue SSR 的一个框架，底层需要运行 Node 服务。大概描述一下 Vue 的渲染过程，首先每个组件都会被编译生成一个渲染函数（这部分基本 webpack 打包已经做掉），然后渲染函数生成虚拟 dom，最后虚拟 dom 通过 patch 方法将真实 dom 渲染到页面上。Nuxt 其实就是将这部分放到了服务端去做，在服务端拿到渲染页面所需要的 html，从而使得 html 能够直出，`而客户端其实还是会运行整个 Vue 的生命周期`，这就带来了一个问题，`这部分操作放在了服务端其实是非常耗 cpu 的`，创建组件实例和虚拟 DOM 节点的开销，无法与纯基于字符串拼接的模版的性能相当，如果是不加优化的 Nuxt 项目，高并发下是很脆弱的，毕竟 Node 运行在单线程下，不适合 cpu 操作密集型的场景\n\n使用 Nuxt 的项目无非看中了它的两大优点，一是服务端渲染满足 SEO 的需求，二是首屏直出比 SPA 快，再加上如果如果公司是 Vue 系，使用 Nuxt 就更顺理成章。但是不要忘了性能，高并发下 Nuxt 性能确实不乐观，我测试了官网的 hackernews demo 项目，2 核 cpu + 4g 内存，400 并发下它的吞吐量不超过 50，就算是最简的 Nuxt 项目，吞吐量也就 300+，这就说明如果项目不做缓存，300+ 已经是最大的吞吐量了，而最小 express demo 可以轻松到 3000，这就决定了**高流量项目并不会轻易去使用 Nuxt**\n\n## 优化方向\n\n## 缓存\n\n缓存是最重要的方案，针对 Nuxt 项目可以做三级缓存，页面缓存、组件缓存以及 API 缓存。页面缓存是最重量级的缓存方案，能不能做页面缓存可以从以下两个点判断：\n\n- 同一个 URL，对于 登录 / 非登录 用户，服务端渲染的内容是相同的（注意是服务端渲染内容，而非前端）\n- 同一个 URL，对于不同的登录用户，服务端渲染的内容是相同的，即没有一些个性化的渲染（常见的个性化渲染，比如针对不同用户渲染不同的猜你喜欢内容等）\n\n其实也就是返回的 html 代码相同就好，主要关注下返回的全局 store 是否一致，另外也不能做一些服务端才能做的操作，比如 set-cookie 等\n\n### 控制好首屏模块个数\n\n对返回的结果进行精简，最小化，保证吐出到浏览器的内容足够小。这就是前面说的并不要对所有模块都做 ssr，需要首屏呈现的/需要爬虫爬的，我们直出\n\n### 不必要的渲染开销\n\n服务端渲染最主要的作用是 seo，但并不是所有的页面都需要进行 seo。整站式的 ssr 意味着将消耗巨大服务器 cpu 资源，如果只从后端渲染需要 seo 的页面，将极大的节省 cpu 资源，空余出来的 cpu 资源则作用于更大的并发量。例如：[掘金](https://juejin.im/) 就仅仅是在文章的详情页做 ssr 。\n\n在不需要的组件外括上使用[client-only](https://www.nuxtjs.cn/api/components-client-only)  标签\n\n\n\n## 踩坑\n\n![v2-fd985d5463f679262d650a3c9bf1ce03_720w](https://img.showydream.com/img/Nz2HuY-v2-fd985d5463f679262d650a3c9bf1ce03_720w.png)\n\n问题原因：当我们用SSR模式中，组件用v-if=\"API取得的值\"的话，这个组件在一开始在服务器端（SSR）是不会被创建的，然后客户端（CSR）激活的时候由于拿到API数据导致这个组件为true，就产生了错误。（然后还被重复请求了三次，导致之后所有的界面都受牵连）所以用v-show的话，会在服务器端生成一个空的组件来占位，然后等客户端渲染的时候就自然而然出现了。\n\n解决方法：`用的v-if=\"API取得的值\"改成了v-show就可以了。`\n","source":"_posts/Nuxt优化笔记.md","raw":"---\ntitle: Nuxt优化笔记\ndate: 2021-10-9 10:54:58\ncover: https://img.showydream.com/img/rgz1H3-bryony-elena-ByraPj141bo-unsplash.jpg\ndescription: Nuxt踩坑、优化笔记\nkeywords: Vue，Nuxt，面试题\ntags: 面经\ncategories: \n  - Nuxt\n---\n\n\n\n# 简介\n\nNuxt 是支持 Vue SSR 的一个框架，底层需要运行 Node 服务。大概描述一下 Vue 的渲染过程，首先每个组件都会被编译生成一个渲染函数（这部分基本 webpack 打包已经做掉），然后渲染函数生成虚拟 dom，最后虚拟 dom 通过 patch 方法将真实 dom 渲染到页面上。Nuxt 其实就是将这部分放到了服务端去做，在服务端拿到渲染页面所需要的 html，从而使得 html 能够直出，`而客户端其实还是会运行整个 Vue 的生命周期`，这就带来了一个问题，`这部分操作放在了服务端其实是非常耗 cpu 的`，创建组件实例和虚拟 DOM 节点的开销，无法与纯基于字符串拼接的模版的性能相当，如果是不加优化的 Nuxt 项目，高并发下是很脆弱的，毕竟 Node 运行在单线程下，不适合 cpu 操作密集型的场景\n\n使用 Nuxt 的项目无非看中了它的两大优点，一是服务端渲染满足 SEO 的需求，二是首屏直出比 SPA 快，再加上如果如果公司是 Vue 系，使用 Nuxt 就更顺理成章。但是不要忘了性能，高并发下 Nuxt 性能确实不乐观，我测试了官网的 hackernews demo 项目，2 核 cpu + 4g 内存，400 并发下它的吞吐量不超过 50，就算是最简的 Nuxt 项目，吞吐量也就 300+，这就说明如果项目不做缓存，300+ 已经是最大的吞吐量了，而最小 express demo 可以轻松到 3000，这就决定了**高流量项目并不会轻易去使用 Nuxt**\n\n## 优化方向\n\n## 缓存\n\n缓存是最重要的方案，针对 Nuxt 项目可以做三级缓存，页面缓存、组件缓存以及 API 缓存。页面缓存是最重量级的缓存方案，能不能做页面缓存可以从以下两个点判断：\n\n- 同一个 URL，对于 登录 / 非登录 用户，服务端渲染的内容是相同的（注意是服务端渲染内容，而非前端）\n- 同一个 URL，对于不同的登录用户，服务端渲染的内容是相同的，即没有一些个性化的渲染（常见的个性化渲染，比如针对不同用户渲染不同的猜你喜欢内容等）\n\n其实也就是返回的 html 代码相同就好，主要关注下返回的全局 store 是否一致，另外也不能做一些服务端才能做的操作，比如 set-cookie 等\n\n### 控制好首屏模块个数\n\n对返回的结果进行精简，最小化，保证吐出到浏览器的内容足够小。这就是前面说的并不要对所有模块都做 ssr，需要首屏呈现的/需要爬虫爬的，我们直出\n\n### 不必要的渲染开销\n\n服务端渲染最主要的作用是 seo，但并不是所有的页面都需要进行 seo。整站式的 ssr 意味着将消耗巨大服务器 cpu 资源，如果只从后端渲染需要 seo 的页面，将极大的节省 cpu 资源，空余出来的 cpu 资源则作用于更大的并发量。例如：[掘金](https://juejin.im/) 就仅仅是在文章的详情页做 ssr 。\n\n在不需要的组件外括上使用[client-only](https://www.nuxtjs.cn/api/components-client-only)  标签\n\n\n\n## 踩坑\n\n![v2-fd985d5463f679262d650a3c9bf1ce03_720w](https://img.showydream.com/img/Nz2HuY-v2-fd985d5463f679262d650a3c9bf1ce03_720w.png)\n\n问题原因：当我们用SSR模式中，组件用v-if=\"API取得的值\"的话，这个组件在一开始在服务器端（SSR）是不会被创建的，然后客户端（CSR）激活的时候由于拿到API数据导致这个组件为true，就产生了错误。（然后还被重复请求了三次，导致之后所有的界面都受牵连）所以用v-show的话，会在服务器端生成一个空的组件来占位，然后等客户端渲染的时候就自然而然出现了。\n\n解决方法：`用的v-if=\"API取得的值\"改成了v-show就可以了。`\n","slug":"Nuxt优化笔记","published":1,"updated":"2021-11-08T06:40:46.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62d20018rifybzm4ddu0","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Nuxt 是支持 Vue SSR 的一个框架，底层需要运行 Node 服务。大概描述一下 Vue 的渲染过程，首先每个组件都会被编译生成一个渲染函数（这部分基本 webpack 打包已经做掉），然后渲染函数生成虚拟 dom，最后虚拟 dom 通过 patch 方法将真实 dom 渲染到页面上。Nuxt 其实就是将这部分放到了服务端去做，在服务端拿到渲染页面所需要的 html，从而使得 html 能够直出，<code>而客户端其实还是会运行整个 Vue 的生命周期</code>，这就带来了一个问题，<code>这部分操作放在了服务端其实是非常耗 cpu 的</code>，创建组件实例和虚拟 DOM 节点的开销，无法与纯基于字符串拼接的模版的性能相当，如果是不加优化的 Nuxt 项目，高并发下是很脆弱的，毕竟 Node 运行在单线程下，不适合 cpu 操作密集型的场景</p>\n<p>使用 Nuxt 的项目无非看中了它的两大优点，一是服务端渲染满足 SEO 的需求，二是首屏直出比 SPA 快，再加上如果如果公司是 Vue 系，使用 Nuxt 就更顺理成章。但是不要忘了性能，高并发下 Nuxt 性能确实不乐观，我测试了官网的 hackernews demo 项目，2 核 cpu + 4g 内存，400 并发下它的吞吐量不超过 50，就算是最简的 Nuxt 项目，吞吐量也就 300+，这就说明如果项目不做缓存，300+ 已经是最大的吞吐量了，而最小 express demo 可以轻松到 3000，这就决定了<strong>高流量项目并不会轻易去使用 Nuxt</strong></p>\n<h2 id=\"优化方向\"><a href=\"#优化方向\" class=\"headerlink\" title=\"优化方向\"></a>优化方向</h2><h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>缓存是最重要的方案，针对 Nuxt 项目可以做三级缓存，页面缓存、组件缓存以及 API 缓存。页面缓存是最重量级的缓存方案，能不能做页面缓存可以从以下两个点判断：</p>\n<ul>\n<li>同一个 URL，对于 登录 / 非登录 用户，服务端渲染的内容是相同的（注意是服务端渲染内容，而非前端）</li>\n<li>同一个 URL，对于不同的登录用户，服务端渲染的内容是相同的，即没有一些个性化的渲染（常见的个性化渲染，比如针对不同用户渲染不同的猜你喜欢内容等）</li>\n</ul>\n<p>其实也就是返回的 html 代码相同就好，主要关注下返回的全局 store 是否一致，另外也不能做一些服务端才能做的操作，比如 set-cookie 等</p>\n<h3 id=\"控制好首屏模块个数\"><a href=\"#控制好首屏模块个数\" class=\"headerlink\" title=\"控制好首屏模块个数\"></a>控制好首屏模块个数</h3><p>对返回的结果进行精简，最小化，保证吐出到浏览器的内容足够小。这就是前面说的并不要对所有模块都做 ssr，需要首屏呈现的/需要爬虫爬的，我们直出</p>\n<h3 id=\"不必要的渲染开销\"><a href=\"#不必要的渲染开销\" class=\"headerlink\" title=\"不必要的渲染开销\"></a>不必要的渲染开销</h3><p>服务端渲染最主要的作用是 seo，但并不是所有的页面都需要进行 seo。整站式的 ssr 意味着将消耗巨大服务器 cpu 资源，如果只从后端渲染需要 seo 的页面，将极大的节省 cpu 资源，空余出来的 cpu 资源则作用于更大的并发量。例如：<a href=\"https://juejin.im/\">掘金</a> 就仅仅是在文章的详情页做 ssr 。</p>\n<p>在不需要的组件外括上使用<a href=\"https://www.nuxtjs.cn/api/components-client-only\">client-only</a>  标签</p>\n<h2 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h2><p><img src=\"https://img.showydream.com/img/Nz2HuY-v2-fd985d5463f679262d650a3c9bf1ce03_720w.png\" alt=\"v2-fd985d5463f679262d650a3c9bf1ce03_720w\"></p>\n<p>问题原因：当我们用SSR模式中，组件用v-if=”API取得的值”的话，这个组件在一开始在服务器端（SSR）是不会被创建的，然后客户端（CSR）激活的时候由于拿到API数据导致这个组件为true，就产生了错误。（然后还被重复请求了三次，导致之后所有的界面都受牵连）所以用v-show的话，会在服务器端生成一个空的组件来占位，然后等客户端渲染的时候就自然而然出现了。</p>\n<p>解决方法：<code>用的v-if=&quot;API取得的值&quot;改成了v-show就可以了。</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Nuxt 是支持 Vue SSR 的一个框架，底层需要运行 Node 服务。大概描述一下 Vue 的渲染过程，首先每个组件都会被编译生成一个渲染函数（这部分基本 webpack 打包已经做掉），然后渲染函数生成虚拟 dom，最后虚拟 dom 通过 patch 方法将真实 dom 渲染到页面上。Nuxt 其实就是将这部分放到了服务端去做，在服务端拿到渲染页面所需要的 html，从而使得 html 能够直出，<code>而客户端其实还是会运行整个 Vue 的生命周期</code>，这就带来了一个问题，<code>这部分操作放在了服务端其实是非常耗 cpu 的</code>，创建组件实例和虚拟 DOM 节点的开销，无法与纯基于字符串拼接的模版的性能相当，如果是不加优化的 Nuxt 项目，高并发下是很脆弱的，毕竟 Node 运行在单线程下，不适合 cpu 操作密集型的场景</p>\n<p>使用 Nuxt 的项目无非看中了它的两大优点，一是服务端渲染满足 SEO 的需求，二是首屏直出比 SPA 快，再加上如果如果公司是 Vue 系，使用 Nuxt 就更顺理成章。但是不要忘了性能，高并发下 Nuxt 性能确实不乐观，我测试了官网的 hackernews demo 项目，2 核 cpu + 4g 内存，400 并发下它的吞吐量不超过 50，就算是最简的 Nuxt 项目，吞吐量也就 300+，这就说明如果项目不做缓存，300+ 已经是最大的吞吐量了，而最小 express demo 可以轻松到 3000，这就决定了<strong>高流量项目并不会轻易去使用 Nuxt</strong></p>\n<h2 id=\"优化方向\"><a href=\"#优化方向\" class=\"headerlink\" title=\"优化方向\"></a>优化方向</h2><h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>缓存是最重要的方案，针对 Nuxt 项目可以做三级缓存，页面缓存、组件缓存以及 API 缓存。页面缓存是最重量级的缓存方案，能不能做页面缓存可以从以下两个点判断：</p>\n<ul>\n<li>同一个 URL，对于 登录 / 非登录 用户，服务端渲染的内容是相同的（注意是服务端渲染内容，而非前端）</li>\n<li>同一个 URL，对于不同的登录用户，服务端渲染的内容是相同的，即没有一些个性化的渲染（常见的个性化渲染，比如针对不同用户渲染不同的猜你喜欢内容等）</li>\n</ul>\n<p>其实也就是返回的 html 代码相同就好，主要关注下返回的全局 store 是否一致，另外也不能做一些服务端才能做的操作，比如 set-cookie 等</p>\n<h3 id=\"控制好首屏模块个数\"><a href=\"#控制好首屏模块个数\" class=\"headerlink\" title=\"控制好首屏模块个数\"></a>控制好首屏模块个数</h3><p>对返回的结果进行精简，最小化，保证吐出到浏览器的内容足够小。这就是前面说的并不要对所有模块都做 ssr，需要首屏呈现的/需要爬虫爬的，我们直出</p>\n<h3 id=\"不必要的渲染开销\"><a href=\"#不必要的渲染开销\" class=\"headerlink\" title=\"不必要的渲染开销\"></a>不必要的渲染开销</h3><p>服务端渲染最主要的作用是 seo，但并不是所有的页面都需要进行 seo。整站式的 ssr 意味着将消耗巨大服务器 cpu 资源，如果只从后端渲染需要 seo 的页面，将极大的节省 cpu 资源，空余出来的 cpu 资源则作用于更大的并发量。例如：<a href=\"https://juejin.im/\">掘金</a> 就仅仅是在文章的详情页做 ssr 。</p>\n<p>在不需要的组件外括上使用<a href=\"https://www.nuxtjs.cn/api/components-client-only\">client-only</a>  标签</p>\n<h2 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h2><p><img src=\"https://img.showydream.com/img/Nz2HuY-v2-fd985d5463f679262d650a3c9bf1ce03_720w.png\" alt=\"v2-fd985d5463f679262d650a3c9bf1ce03_720w\"></p>\n<p>问题原因：当我们用SSR模式中，组件用v-if=”API取得的值”的话，这个组件在一开始在服务器端（SSR）是不会被创建的，然后客户端（CSR）激活的时候由于拿到API数据导致这个组件为true，就产生了错误。（然后还被重复请求了三次，导致之后所有的界面都受牵连）所以用v-show的话，会在服务器端生成一个空的组件来占位，然后等客户端渲染的时候就自然而然出现了。</p>\n<p>解决方法：<code>用的v-if=&quot;API取得的值&quot;改成了v-show就可以了。</code></p>\n"},{"title":"vue全局水印特效","date":"2021-08-12T03:54:58.000Z","cover":"https://img.showydream.com/img/NSxdnY-post-image2.jpg","description":"vue全局水印特效","keywords":"vue全局水印特效","_content":"\n代码如下\n\n```javascript\n/**  水印添加方法  */\n\nlet setWatermark = (str1) => {\n    let id = '532432.5435435324.543543543'\n\n    if (document.getElementById(id) !== null) {\n        document.body.removeChild(document.getElementById(id))\n    }\n\n    let can = document.createElement('canvas')\n    // 设置canvas画布大小\n    can.width = 300\n    can.height = 200\n\n    let cans = can.getContext('2d')\n    cans.rotate(-20 * Math.PI / 180) // 水印旋转角度\n    cans.font = '14px Vedana'\n    cans.fillStyle = '#b6b3b3'\n    cans.textAlign = 'center'\n    cans.textBaseline = 'middle'\n    cans.fillText(str1, can.width / 2, can.height) // 水印在画布的位置x，y轴\n\n    let div = document.createElement('div')\n    div.id = id\n    div.style.pointerEvents = 'none'\n    div.style.top = '54px'\n    div.style.left = '0px'\n    div.style.opacity = '0.15'\n    div.style.position = 'fixed'\n    div.style.zIndex = '100000'\n    div.style.width = document.documentElement.clientWidth + 'px'\n    div.style.height = document.documentElement.clientHeight  + 'px'\n    div.style.background = 'url(' + can.toDataURL('image/png') + ') left top repeat'\n    document.body.appendChild(div)\n    return id\n}\n\n// 添加水印方法\nexport const setWaterMark = (str1) => {\n    let id = setWatermark(str1)\n    if (document.getElementById(id) === null) {\n        id = setWatermark(str1)\n    }\n}\n\n// 移除水印方法\nexport const removeWatermark = () => {\n    let id = '532432.5435435324.543543543'\n    if (document.getElementById(id) !== null) {\n        document.body.removeChild(document.getElementById(id))\n    }\n}\n```\n\n用法\n\n```javascript\n  mounted () {\n    setWaterMark('测试水印')\n  },\n  destroyed () {\n    removeWatermark()\n  }\n```\n\n效果\n\n<img src=\"https://img.showydream.com/img/MJ68Vz-image-20210812112945707.png\" alt=\"image-20210812112945707\" style=\"zoom:50%;\" />\n","source":"_posts/vue全局水印特效.md","raw":"---\ntitle: vue全局水印特效\ndate: 2021-8-12 11:54:58\ncover: https://img.showydream.com/img/NSxdnY-post-image2.jpg\ndescription: vue全局水印特效\nkeywords: vue全局水印特效\ntags: Vue技巧\ncategories: \n  - Vue\n---\n\n代码如下\n\n```javascript\n/**  水印添加方法  */\n\nlet setWatermark = (str1) => {\n    let id = '532432.5435435324.543543543'\n\n    if (document.getElementById(id) !== null) {\n        document.body.removeChild(document.getElementById(id))\n    }\n\n    let can = document.createElement('canvas')\n    // 设置canvas画布大小\n    can.width = 300\n    can.height = 200\n\n    let cans = can.getContext('2d')\n    cans.rotate(-20 * Math.PI / 180) // 水印旋转角度\n    cans.font = '14px Vedana'\n    cans.fillStyle = '#b6b3b3'\n    cans.textAlign = 'center'\n    cans.textBaseline = 'middle'\n    cans.fillText(str1, can.width / 2, can.height) // 水印在画布的位置x，y轴\n\n    let div = document.createElement('div')\n    div.id = id\n    div.style.pointerEvents = 'none'\n    div.style.top = '54px'\n    div.style.left = '0px'\n    div.style.opacity = '0.15'\n    div.style.position = 'fixed'\n    div.style.zIndex = '100000'\n    div.style.width = document.documentElement.clientWidth + 'px'\n    div.style.height = document.documentElement.clientHeight  + 'px'\n    div.style.background = 'url(' + can.toDataURL('image/png') + ') left top repeat'\n    document.body.appendChild(div)\n    return id\n}\n\n// 添加水印方法\nexport const setWaterMark = (str1) => {\n    let id = setWatermark(str1)\n    if (document.getElementById(id) === null) {\n        id = setWatermark(str1)\n    }\n}\n\n// 移除水印方法\nexport const removeWatermark = () => {\n    let id = '532432.5435435324.543543543'\n    if (document.getElementById(id) !== null) {\n        document.body.removeChild(document.getElementById(id))\n    }\n}\n```\n\n用法\n\n```javascript\n  mounted () {\n    setWaterMark('测试水印')\n  },\n  destroyed () {\n    removeWatermark()\n  }\n```\n\n效果\n\n<img src=\"https://img.showydream.com/img/MJ68Vz-image-20210812112945707.png\" alt=\"image-20210812112945707\" style=\"zoom:50%;\" />\n","slug":"vue全局水印特效","published":1,"updated":"2021-11-08T06:41:58.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62d2001crify3auo2k37","content":"<p>代码如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**  水印添加方法  */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> setWatermark = <span class=\"function\">(<span class=\"params\">str1</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> id = <span class=\"string\">&#x27;532432.5435435324.543543543&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.getElementById(id) !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.removeChild(<span class=\"built_in\">document</span>.getElementById(id))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> can = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 设置canvas画布大小</span></span><br><span class=\"line\">    can.width = <span class=\"number\">300</span></span><br><span class=\"line\">    can.height = <span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cans = can.getContext(<span class=\"string\">&#x27;2d&#x27;</span>)</span><br><span class=\"line\">    cans.rotate(-<span class=\"number\">20</span> * <span class=\"built_in\">Math</span>.PI / <span class=\"number\">180</span>) <span class=\"comment\">// 水印旋转角度</span></span><br><span class=\"line\">    cans.font = <span class=\"string\">&#x27;14px Vedana&#x27;</span></span><br><span class=\"line\">    cans.fillStyle = <span class=\"string\">&#x27;#b6b3b3&#x27;</span></span><br><span class=\"line\">    cans.textAlign = <span class=\"string\">&#x27;center&#x27;</span></span><br><span class=\"line\">    cans.textBaseline = <span class=\"string\">&#x27;middle&#x27;</span></span><br><span class=\"line\">    cans.fillText(str1, can.width / <span class=\"number\">2</span>, can.height) <span class=\"comment\">// 水印在画布的位置x，y轴</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\">    div.id = id</span><br><span class=\"line\">    div.style.pointerEvents = <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\">    div.style.top = <span class=\"string\">&#x27;54px&#x27;</span></span><br><span class=\"line\">    div.style.left = <span class=\"string\">&#x27;0px&#x27;</span></span><br><span class=\"line\">    div.style.opacity = <span class=\"string\">&#x27;0.15&#x27;</span></span><br><span class=\"line\">    div.style.position = <span class=\"string\">&#x27;fixed&#x27;</span></span><br><span class=\"line\">    div.style.zIndex = <span class=\"string\">&#x27;100000&#x27;</span></span><br><span class=\"line\">    div.style.width = <span class=\"built_in\">document</span>.documentElement.clientWidth + <span class=\"string\">&#x27;px&#x27;</span></span><br><span class=\"line\">    div.style.height = <span class=\"built_in\">document</span>.documentElement.clientHeight  + <span class=\"string\">&#x27;px&#x27;</span></span><br><span class=\"line\">    div.style.background = <span class=\"string\">&#x27;url(&#x27;</span> + can.toDataURL(<span class=\"string\">&#x27;image/png&#x27;</span>) + <span class=\"string\">&#x27;) left top repeat&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(div)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> id</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加水印方法</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> setWaterMark = <span class=\"function\">(<span class=\"params\">str1</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> id = setWatermark(str1)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.getElementById(id) === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        id = setWatermark(str1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除水印方法</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> removeWatermark = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> id = <span class=\"string\">&#x27;532432.5435435324.543543543&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.getElementById(id) !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.removeChild(<span class=\"built_in\">document</span>.getElementById(id))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted () &#123;</span><br><span class=\"line\">  setWaterMark(<span class=\"string\">&#x27;测试水印&#x27;</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">destroyed () &#123;</span><br><span class=\"line\">  removeWatermark()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果</p>\n<img src=\"https://img.showydream.com/img/MJ68Vz-image-20210812112945707.png\" alt=\"image-20210812112945707\" style=\"zoom:50%;\" />\n","site":{"data":{}},"excerpt":"","more":"<p>代码如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**  水印添加方法  */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> setWatermark = <span class=\"function\">(<span class=\"params\">str1</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> id = <span class=\"string\">&#x27;532432.5435435324.543543543&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.getElementById(id) !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.removeChild(<span class=\"built_in\">document</span>.getElementById(id))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> can = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 设置canvas画布大小</span></span><br><span class=\"line\">    can.width = <span class=\"number\">300</span></span><br><span class=\"line\">    can.height = <span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cans = can.getContext(<span class=\"string\">&#x27;2d&#x27;</span>)</span><br><span class=\"line\">    cans.rotate(-<span class=\"number\">20</span> * <span class=\"built_in\">Math</span>.PI / <span class=\"number\">180</span>) <span class=\"comment\">// 水印旋转角度</span></span><br><span class=\"line\">    cans.font = <span class=\"string\">&#x27;14px Vedana&#x27;</span></span><br><span class=\"line\">    cans.fillStyle = <span class=\"string\">&#x27;#b6b3b3&#x27;</span></span><br><span class=\"line\">    cans.textAlign = <span class=\"string\">&#x27;center&#x27;</span></span><br><span class=\"line\">    cans.textBaseline = <span class=\"string\">&#x27;middle&#x27;</span></span><br><span class=\"line\">    cans.fillText(str1, can.width / <span class=\"number\">2</span>, can.height) <span class=\"comment\">// 水印在画布的位置x，y轴</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\">    div.id = id</span><br><span class=\"line\">    div.style.pointerEvents = <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\">    div.style.top = <span class=\"string\">&#x27;54px&#x27;</span></span><br><span class=\"line\">    div.style.left = <span class=\"string\">&#x27;0px&#x27;</span></span><br><span class=\"line\">    div.style.opacity = <span class=\"string\">&#x27;0.15&#x27;</span></span><br><span class=\"line\">    div.style.position = <span class=\"string\">&#x27;fixed&#x27;</span></span><br><span class=\"line\">    div.style.zIndex = <span class=\"string\">&#x27;100000&#x27;</span></span><br><span class=\"line\">    div.style.width = <span class=\"built_in\">document</span>.documentElement.clientWidth + <span class=\"string\">&#x27;px&#x27;</span></span><br><span class=\"line\">    div.style.height = <span class=\"built_in\">document</span>.documentElement.clientHeight  + <span class=\"string\">&#x27;px&#x27;</span></span><br><span class=\"line\">    div.style.background = <span class=\"string\">&#x27;url(&#x27;</span> + can.toDataURL(<span class=\"string\">&#x27;image/png&#x27;</span>) + <span class=\"string\">&#x27;) left top repeat&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(div)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> id</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加水印方法</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> setWaterMark = <span class=\"function\">(<span class=\"params\">str1</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> id = setWatermark(str1)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.getElementById(id) === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        id = setWatermark(str1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除水印方法</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> removeWatermark = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> id = <span class=\"string\">&#x27;532432.5435435324.543543543&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.getElementById(id) !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.removeChild(<span class=\"built_in\">document</span>.getElementById(id))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted () &#123;</span><br><span class=\"line\">  setWaterMark(<span class=\"string\">&#x27;测试水印&#x27;</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">destroyed () &#123;</span><br><span class=\"line\">  removeWatermark()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果</p>\n<img src=\"https://img.showydream.com/img/MJ68Vz-image-20210812112945707.png\" alt=\"image-20210812112945707\" style=\"zoom:50%;\" />\n"},{"title":"前端BFC","date":"2021-04-02T04:00:00.000Z","cover":"https://img.showydream.com/img/iZX9MU-picography-food-platters-beach-restaurant-small-768x512.jpg","description":"BFC（Block formatting context）直译为“块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与，它规定了内部的Block-level box如何布局，并且与这个区域外部毫不相干。","keywords":"BFC","_content":"\n\n\n我们在页面布局的时候，经常会出现以下情况：\n\n- 这个元素高度怎么没了？\n- 这两栏布局怎么没法自适应？\n- 这两个元素的间距怎么有点奇怪的样子？\n- 。。。\n\n归根到底是元素之间的互相影响，导致了预期之外的情况的发生。这里就涉及到了BFC的概念\n\n## BFC的概念\n\n BFC（Block formatting context）直译为“块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与，它规定了内部的Block-level box如何布局，并且与这个区域外部毫不相干。\n\n- BFC是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定的规则进行物品摆放，并且不会影响其他环境中的物品。\n- 如果一个元素符合出发BFC的条件，则BFC中的元素布局不受外部影响。\n- 如果浮动元素会创建BFC，则浮动元素内部的子元素都受到该浮动元素的影响，所以浮动元素之间是互不影响的。\n\n## BFC的特性\n\n1. BFC是一个独立的容器，容器内子元素不会影响容器外的元素，反之亦是如此。\n2. 盒子从顶端开始垂直的一个一个的排列，盒子之间垂直的间距是由margin决定的。\n3. 在同一个BFC中，两个相邻的块级盒子的垂直外边距会发生重叠。\n4. BFC区域不会和float box发生重叠。\n5. BFC能够识别并包含浮动元素，当计算其区域的高度时，浮动元素也可以参与计算了。\n6. 计算BFC的高度时，浮动元素也参与计算。\n\n## 触发BFC\n\n只要元素满足以下任意一种条件就可以触发BFC特性：\n\n- body根元素\n- 浮动元素：float除none以外的值\n- 绝对定位元素：position（absolute、fixed）\n- display为inline-block、table-cells、flex、inline-flex、table-caption\n- overflow除了visible以外的值（hidden、auto、scroll）\n\n## BFC的应用\n\n1. #### 防止margin重叠（塌陷）\n\n   **相邻**的两个盒子（可能是兄弟关系也可能是祖先关系）的垂直边距相遇时， 它们将形成一个外边距。这个外边距的高度等于两个发生折叠的外边距的高度中的**较大者**。\n\n   **外边距折叠的条件是 margin 必须相邻!**\n\n   ```html\n   <style type=\"text/css\">\n       .box{\n           color: brown;\n           background: rgb(226, 159, 108);\n           width: 100px;\n           height: 100px;\n           text-align: center;\n           line-height: 100px;\n           margin: 100px;\n       }\n   </style>\n   \n   <body>\n       <div class=\"box\">上面</div>\n       <div class=\"box\">下面</div>\n   </body>\n   ```\n\n   <img src=\"https://img.showydream.com/img/eeQvIh-image-20210406144515012.png\" alt=\"image-20210406144515012\" style=\"zoom:50%;\" />\n\n   两个box之间的距离为100px，发生了margin重叠（塌陷），解决这个问题，只需要把其中一个box变为BFC元素即可\n\n   ```html\n   <style type=\"text/css\">\n       .box {\n           color: brown;\n           background: rgb(226, 159, 108);\n           width: 100px;\n           height: 100px;\n           text-align: center;\n           line-height: 100px;\n           margin: 100px;\n       }\n   </style>\n   \n   <body>\n       <div class=\"box\">上面</div>\n       <div style=\"overflow: hidden;\">\n           <div class=\"box\">下面</div>\n       </div>\n   </body>\n   ```\n\n   <img src=\"https://img.showydream.com/img/sABvEs-image-20210406145329212.png\" alt=\"image-20210406145329212\" style=\"zoom:50%;\" />\n\n   \n\n2. #### 清除内部浮动\n\n   - 浮动元素会脱离文档流(绝对定位元素也会脱离文档流)，导致无法计算准确的高度，这种问题称为**高度塌陷**。\n   - 解决高度塌陷问题的前提是能够识别并包含浮动元素，也就是**清除浮动**。\n\n   ```html\n   <style type=\"text/css\">\n       .parent {\n           width: 300px;\n           border: 2px solid rgb(120, 201, 177);\n       }\n       .box {\n           color: brown;\n           background: rgb(226, 159, 108);\n           width: 100px;\n           height: 100px;\n           text-align: center;\n           line-height: 100px;\n           float: left;\n       }\n   </style>\n   <body>\n       <div class=\"parent\">\n           <div class=\"box\">上面</div>\n           <div class=\"box\">下面</div>\n       </div>\n   </body>\n   ```\n\n   <img src=\"https://img.showydream.com/img/UkhPhY-image-20210406150234363.png\" alt=\"image-20210406150234363\" style=\"zoom:50%;\" />\n\n   如上左图所示，容器（parent）没有高度或者 height = auto ,并且其子元素（box）是浮动元素，所以该容器的高度是不会被撑开的，即高度塌陷。\n\n   解决方法：**在容器（container）中创建 BFC。**\n\n   ```html\n   \n   ```\n<style type=\"text/css\">\n       .parent {\n           width: 300px;\n           border: 2px solid rgb(120, 201, 177);\n           overflow: hidden;\n       }\n       .box {\n           color: brown;\n           background: rgb(226, 159, 108);\n           width: 100px;\n           height: 100px;\n           text-align: center;\n           line-height: 100px;\n           float: left;\n       }\n   </style>\n\n   <body>\n       <div class=\"parent\">\n           <div class=\"box\">上面</div>\n           <div class=\"box\">下面</div>\n       </div>\n   </body>\n   ```\n   \n   <img src=\"https://img.showydream.com/img/dKS7cW-image-20210406150535638.png\" alt=\"image-20210406150535638\" style=\"zoom:50%;\" />\n\n3. #### 自适应多栏布局\n\n   ```html\n   <style type=\"text/css\">\n       body{\n           width: 300px;\n       }\n       .aside {\n           width: 100px;\n           height: 150px;\n           float: left;\n           background: rgb(47, 187, 145);\n       }\n       .main {\n           height: 200px;\n           background: rgb(171, 75, 156);\n       }\n   </style>\n   <body>\n       <div class=\"aside\">aside</div>\n       <div class=\"main\">main</div>\n   </body>\n   ```\n\n   <img src=\"https://img.showydream.com/img/7OF8JS-image-20210406151256736.png\" alt=\"image-20210406151256736\" style=\"zoom:50%;\"/>\n\n   这时候main元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可以通过触发`main`生成`BFC`，以此适应两栏布局\n\n   ```html\n   <style type=\"text/css\">\n       body{\n           width: 300px;\n       }\n       .aside {\n           width: 100px;\n           height: 150px;\n           float: left;\n           background: rgb(47, 187, 145);\n       }\n       .main {\n           height: 200px;\n           overflow: hidden;\n           background: rgb(171, 75, 156);\n       }\n   </style>\n   \n   <body>\n       <div class=\"aside\">aside</div>\n       <div class=\"main\">main</div>\n   </body>\n   ```\n\n<img src=\"https://img.showydream.com/img/z1IwLr-image-20210406151547943.png\" alt=\"image-20210406151547943\" style=\"zoom:50%;\" />\n\n\n\n## 参考链接\n\nhttps://juejin.cn/post/6844903780253696013#heading-5\n\nhttps://zhuanlan.zhihu.com/p/25321647\n\nhttps://segmentfault.com/a/1190000013647777\n\nhttps://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html\n","source":"_posts/前端BFC.md","raw":"---\ntitle: 前端BFC\ndate: 2021-4-2 12:00:00\ncover: https://img.showydream.com/img/iZX9MU-picography-food-platters-beach-restaurant-small-768x512.jpg\ndescription: BFC（Block formatting context）直译为“块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与，它规定了内部的Block-level box如何布局，并且与这个区域外部毫不相干。\nkeywords: BFC\ntags: 面经\ncategories: \n  - 前端知识点\n---\n\n\n\n我们在页面布局的时候，经常会出现以下情况：\n\n- 这个元素高度怎么没了？\n- 这两栏布局怎么没法自适应？\n- 这两个元素的间距怎么有点奇怪的样子？\n- 。。。\n\n归根到底是元素之间的互相影响，导致了预期之外的情况的发生。这里就涉及到了BFC的概念\n\n## BFC的概念\n\n BFC（Block formatting context）直译为“块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与，它规定了内部的Block-level box如何布局，并且与这个区域外部毫不相干。\n\n- BFC是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定的规则进行物品摆放，并且不会影响其他环境中的物品。\n- 如果一个元素符合出发BFC的条件，则BFC中的元素布局不受外部影响。\n- 如果浮动元素会创建BFC，则浮动元素内部的子元素都受到该浮动元素的影响，所以浮动元素之间是互不影响的。\n\n## BFC的特性\n\n1. BFC是一个独立的容器，容器内子元素不会影响容器外的元素，反之亦是如此。\n2. 盒子从顶端开始垂直的一个一个的排列，盒子之间垂直的间距是由margin决定的。\n3. 在同一个BFC中，两个相邻的块级盒子的垂直外边距会发生重叠。\n4. BFC区域不会和float box发生重叠。\n5. BFC能够识别并包含浮动元素，当计算其区域的高度时，浮动元素也可以参与计算了。\n6. 计算BFC的高度时，浮动元素也参与计算。\n\n## 触发BFC\n\n只要元素满足以下任意一种条件就可以触发BFC特性：\n\n- body根元素\n- 浮动元素：float除none以外的值\n- 绝对定位元素：position（absolute、fixed）\n- display为inline-block、table-cells、flex、inline-flex、table-caption\n- overflow除了visible以外的值（hidden、auto、scroll）\n\n## BFC的应用\n\n1. #### 防止margin重叠（塌陷）\n\n   **相邻**的两个盒子（可能是兄弟关系也可能是祖先关系）的垂直边距相遇时， 它们将形成一个外边距。这个外边距的高度等于两个发生折叠的外边距的高度中的**较大者**。\n\n   **外边距折叠的条件是 margin 必须相邻!**\n\n   ```html\n   <style type=\"text/css\">\n       .box{\n           color: brown;\n           background: rgb(226, 159, 108);\n           width: 100px;\n           height: 100px;\n           text-align: center;\n           line-height: 100px;\n           margin: 100px;\n       }\n   </style>\n   \n   <body>\n       <div class=\"box\">上面</div>\n       <div class=\"box\">下面</div>\n   </body>\n   ```\n\n   <img src=\"https://img.showydream.com/img/eeQvIh-image-20210406144515012.png\" alt=\"image-20210406144515012\" style=\"zoom:50%;\" />\n\n   两个box之间的距离为100px，发生了margin重叠（塌陷），解决这个问题，只需要把其中一个box变为BFC元素即可\n\n   ```html\n   <style type=\"text/css\">\n       .box {\n           color: brown;\n           background: rgb(226, 159, 108);\n           width: 100px;\n           height: 100px;\n           text-align: center;\n           line-height: 100px;\n           margin: 100px;\n       }\n   </style>\n   \n   <body>\n       <div class=\"box\">上面</div>\n       <div style=\"overflow: hidden;\">\n           <div class=\"box\">下面</div>\n       </div>\n   </body>\n   ```\n\n   <img src=\"https://img.showydream.com/img/sABvEs-image-20210406145329212.png\" alt=\"image-20210406145329212\" style=\"zoom:50%;\" />\n\n   \n\n2. #### 清除内部浮动\n\n   - 浮动元素会脱离文档流(绝对定位元素也会脱离文档流)，导致无法计算准确的高度，这种问题称为**高度塌陷**。\n   - 解决高度塌陷问题的前提是能够识别并包含浮动元素，也就是**清除浮动**。\n\n   ```html\n   <style type=\"text/css\">\n       .parent {\n           width: 300px;\n           border: 2px solid rgb(120, 201, 177);\n       }\n       .box {\n           color: brown;\n           background: rgb(226, 159, 108);\n           width: 100px;\n           height: 100px;\n           text-align: center;\n           line-height: 100px;\n           float: left;\n       }\n   </style>\n   <body>\n       <div class=\"parent\">\n           <div class=\"box\">上面</div>\n           <div class=\"box\">下面</div>\n       </div>\n   </body>\n   ```\n\n   <img src=\"https://img.showydream.com/img/UkhPhY-image-20210406150234363.png\" alt=\"image-20210406150234363\" style=\"zoom:50%;\" />\n\n   如上左图所示，容器（parent）没有高度或者 height = auto ,并且其子元素（box）是浮动元素，所以该容器的高度是不会被撑开的，即高度塌陷。\n\n   解决方法：**在容器（container）中创建 BFC。**\n\n   ```html\n   \n   ```\n<style type=\"text/css\">\n       .parent {\n           width: 300px;\n           border: 2px solid rgb(120, 201, 177);\n           overflow: hidden;\n       }\n       .box {\n           color: brown;\n           background: rgb(226, 159, 108);\n           width: 100px;\n           height: 100px;\n           text-align: center;\n           line-height: 100px;\n           float: left;\n       }\n   </style>\n\n   <body>\n       <div class=\"parent\">\n           <div class=\"box\">上面</div>\n           <div class=\"box\">下面</div>\n       </div>\n   </body>\n   ```\n   \n   <img src=\"https://img.showydream.com/img/dKS7cW-image-20210406150535638.png\" alt=\"image-20210406150535638\" style=\"zoom:50%;\" />\n\n3. #### 自适应多栏布局\n\n   ```html\n   <style type=\"text/css\">\n       body{\n           width: 300px;\n       }\n       .aside {\n           width: 100px;\n           height: 150px;\n           float: left;\n           background: rgb(47, 187, 145);\n       }\n       .main {\n           height: 200px;\n           background: rgb(171, 75, 156);\n       }\n   </style>\n   <body>\n       <div class=\"aside\">aside</div>\n       <div class=\"main\">main</div>\n   </body>\n   ```\n\n   <img src=\"https://img.showydream.com/img/7OF8JS-image-20210406151256736.png\" alt=\"image-20210406151256736\" style=\"zoom:50%;\"/>\n\n   这时候main元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可以通过触发`main`生成`BFC`，以此适应两栏布局\n\n   ```html\n   <style type=\"text/css\">\n       body{\n           width: 300px;\n       }\n       .aside {\n           width: 100px;\n           height: 150px;\n           float: left;\n           background: rgb(47, 187, 145);\n       }\n       .main {\n           height: 200px;\n           overflow: hidden;\n           background: rgb(171, 75, 156);\n       }\n   </style>\n   \n   <body>\n       <div class=\"aside\">aside</div>\n       <div class=\"main\">main</div>\n   </body>\n   ```\n\n<img src=\"https://img.showydream.com/img/z1IwLr-image-20210406151547943.png\" alt=\"image-20210406151547943\" style=\"zoom:50%;\" />\n\n\n\n## 参考链接\n\nhttps://juejin.cn/post/6844903780253696013#heading-5\n\nhttps://zhuanlan.zhihu.com/p/25321647\n\nhttps://segmentfault.com/a/1190000013647777\n\nhttps://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html\n","slug":"前端BFC","published":1,"updated":"2021-11-08T04:45:21.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62d3001frify5a4bhz2h","content":"<p>我们在页面布局的时候，经常会出现以下情况：</p>\n<ul>\n<li>这个元素高度怎么没了？</li>\n<li>这两栏布局怎么没法自适应？</li>\n<li>这两个元素的间距怎么有点奇怪的样子？</li>\n<li>。。。</li>\n</ul>\n<p>归根到底是元素之间的互相影响，导致了预期之外的情况的发生。这里就涉及到了BFC的概念</p>\n<h2 id=\"BFC的概念\"><a href=\"#BFC的概念\" class=\"headerlink\" title=\"BFC的概念\"></a>BFC的概念</h2><p> BFC（Block formatting context）直译为“块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与，它规定了内部的Block-level box如何布局，并且与这个区域外部毫不相干。</p>\n<ul>\n<li>BFC是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定的规则进行物品摆放，并且不会影响其他环境中的物品。</li>\n<li>如果一个元素符合出发BFC的条件，则BFC中的元素布局不受外部影响。</li>\n<li>如果浮动元素会创建BFC，则浮动元素内部的子元素都受到该浮动元素的影响，所以浮动元素之间是互不影响的。</li>\n</ul>\n<h2 id=\"BFC的特性\"><a href=\"#BFC的特性\" class=\"headerlink\" title=\"BFC的特性\"></a>BFC的特性</h2><ol>\n<li>BFC是一个独立的容器，容器内子元素不会影响容器外的元素，反之亦是如此。</li>\n<li>盒子从顶端开始垂直的一个一个的排列，盒子之间垂直的间距是由margin决定的。</li>\n<li>在同一个BFC中，两个相邻的块级盒子的垂直外边距会发生重叠。</li>\n<li>BFC区域不会和float box发生重叠。</li>\n<li>BFC能够识别并包含浮动元素，当计算其区域的高度时，浮动元素也可以参与计算了。</li>\n<li>计算BFC的高度时，浮动元素也参与计算。</li>\n</ol>\n<h2 id=\"触发BFC\"><a href=\"#触发BFC\" class=\"headerlink\" title=\"触发BFC\"></a>触发BFC</h2><p>只要元素满足以下任意一种条件就可以触发BFC特性：</p>\n<ul>\n<li>body根元素</li>\n<li>浮动元素：float除none以外的值</li>\n<li>绝对定位元素：position（absolute、fixed）</li>\n<li>display为inline-block、table-cells、flex、inline-flex、table-caption</li>\n<li>overflow除了visible以外的值（hidden、auto、scroll）</li>\n</ul>\n<h2 id=\"BFC的应用\"><a href=\"#BFC的应用\" class=\"headerlink\" title=\"BFC的应用\"></a>BFC的应用</h2><ol>\n<li><h4 id=\"防止margin重叠（塌陷）\"><a href=\"#防止margin重叠（塌陷）\" class=\"headerlink\" title=\"防止margin重叠（塌陷）\"></a>防止margin重叠（塌陷）</h4><p><strong>相邻</strong>的两个盒子（可能是兄弟关系也可能是祖先关系）的垂直边距相遇时， 它们将形成一个外边距。这个外边距的高度等于两个发生折叠的外边距的高度中的<strong>较大者</strong>。</p>\n<p><strong>外边距折叠的条件是 margin 必须相邻!</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.box</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">color</span>: brown;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">226</span>, <span class=\"number\">159</span>, <span class=\"number\">108</span>);</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>上面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>下面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/eeQvIh-image-20210406144515012.png\" alt=\"image-20210406144515012\" style=\"zoom:50%;\" />\n\n<p>两个box之间的距离为100px，发生了margin重叠（塌陷），解决这个问题，只需要把其中一个box变为BFC元素即可</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">color</span>: brown;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">226</span>, <span class=\"number\">159</span>, <span class=\"number\">108</span>);</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>上面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;overflow: hidden;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>下面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/sABvEs-image-20210406145329212.png\" alt=\"image-20210406145329212\" style=\"zoom:50%;\" /></li>\n<li><h4 id=\"清除内部浮动\"><a href=\"#清除内部浮动\" class=\"headerlink\" title=\"清除内部浮动\"></a>清除内部浮动</h4><ul>\n<li>浮动元素会脱离文档流(绝对定位元素也会脱离文档流)，导致无法计算准确的高度，这种问题称为<strong>高度塌陷</strong>。</li>\n<li>解决高度塌陷问题的前提是能够识别并包含浮动元素，也就是<strong>清除浮动</strong>。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"built_in\">rgb</span>(<span class=\"number\">120</span>, <span class=\"number\">201</span>, <span class=\"number\">177</span>);</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">color</span>: brown;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">226</span>, <span class=\"number\">159</span>, <span class=\"number\">108</span>);</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">float</span>: left;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>上面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>下面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/UkhPhY-image-20210406150234363.png\" alt=\"image-20210406150234363\" style=\"zoom:50%;\" />\n\n<p>如上左图所示，容器（parent）没有高度或者 height = auto ,并且其子元素（box）是浮动元素，所以该容器的高度是不会被撑开的，即高度塌陷。</p>\n<p>解决方法：<strong>在容器（container）中创建 BFC。</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n<style type=\"text/css\">\n    .parent {\n        width: 300px;\n        border: 2px solid rgb(120, 201, 177);\n        overflow: hidden;\n    }\n    .box {\n        color: brown;\n        background: rgb(226, 159, 108);\n        width: 100px;\n        height: 100px;\n        text-align: center;\n        line-height: 100px;\n        float: left;\n    }\n</style>\n\n<body>\n    <div class=\"parent\">\n        <div class=\"box\">上面</div>\n        <div class=\"box\">下面</div>\n    </div>\n</body>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   </span><br><span class=\"line\">   &lt;img src=&quot;https://img.showydream.com/img/dKS7cW-image-20210406150535638.png&quot; alt=&quot;image-20210406150535638&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">3. #### 自适应多栏布局</span><br><span class=\"line\"></span><br><span class=\"line\">   ```html</span><br><span class=\"line\">   &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">       body&#123;</span><br><span class=\"line\">           width: 300px;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       .aside &#123;</span><br><span class=\"line\">           width: 100px;</span><br><span class=\"line\">           height: 150px;</span><br><span class=\"line\">           float: left;</span><br><span class=\"line\">           background: rgb(47, 187, 145);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       .main &#123;</span><br><span class=\"line\">           height: 200px;</span><br><span class=\"line\">           background: rgb(171, 75, 156);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &lt;/style&gt;</span><br><span class=\"line\">   &lt;body&gt;</span><br><span class=\"line\">       &lt;div class=&quot;aside&quot;&gt;aside&lt;/div&gt;</span><br><span class=\"line\">       &lt;div class=&quot;main&quot;&gt;main&lt;/div&gt;</span><br><span class=\"line\">   &lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/7OF8JS-image-20210406151256736.png\" alt=\"image-20210406151256736\" style=\"zoom:50%;\"/>\n\n<p>这时候main元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可以通过触发<code>main</code>生成<code>BFC</code>，以此适应两栏布局</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">body</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.aside</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">float</span>: left;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">47</span>, <span class=\"number\">187</span>, <span class=\"number\">145</span>);</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.main</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">overflow</span>: hidden;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">171</span>, <span class=\"number\">75</span>, <span class=\"number\">156</span>);</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aside&quot;</span>&gt;</span>aside<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<img src=\"https://img.showydream.com/img/z1IwLr-image-20210406151547943.png\" alt=\"image-20210406151547943\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://juejin.cn/post/6844903780253696013#heading-5\">https://juejin.cn/post/6844903780253696013#heading-5</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/25321647\">https://zhuanlan.zhihu.com/p/25321647</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000013647777\">https://segmentfault.com/a/1190000013647777</a></p>\n<p><a href=\"https://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html\">https://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们在页面布局的时候，经常会出现以下情况：</p>\n<ul>\n<li>这个元素高度怎么没了？</li>\n<li>这两栏布局怎么没法自适应？</li>\n<li>这两个元素的间距怎么有点奇怪的样子？</li>\n<li>。。。</li>\n</ul>\n<p>归根到底是元素之间的互相影响，导致了预期之外的情况的发生。这里就涉及到了BFC的概念</p>\n<h2 id=\"BFC的概念\"><a href=\"#BFC的概念\" class=\"headerlink\" title=\"BFC的概念\"></a>BFC的概念</h2><p> BFC（Block formatting context）直译为“块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与，它规定了内部的Block-level box如何布局，并且与这个区域外部毫不相干。</p>\n<ul>\n<li>BFC是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定的规则进行物品摆放，并且不会影响其他环境中的物品。</li>\n<li>如果一个元素符合出发BFC的条件，则BFC中的元素布局不受外部影响。</li>\n<li>如果浮动元素会创建BFC，则浮动元素内部的子元素都受到该浮动元素的影响，所以浮动元素之间是互不影响的。</li>\n</ul>\n<h2 id=\"BFC的特性\"><a href=\"#BFC的特性\" class=\"headerlink\" title=\"BFC的特性\"></a>BFC的特性</h2><ol>\n<li>BFC是一个独立的容器，容器内子元素不会影响容器外的元素，反之亦是如此。</li>\n<li>盒子从顶端开始垂直的一个一个的排列，盒子之间垂直的间距是由margin决定的。</li>\n<li>在同一个BFC中，两个相邻的块级盒子的垂直外边距会发生重叠。</li>\n<li>BFC区域不会和float box发生重叠。</li>\n<li>BFC能够识别并包含浮动元素，当计算其区域的高度时，浮动元素也可以参与计算了。</li>\n<li>计算BFC的高度时，浮动元素也参与计算。</li>\n</ol>\n<h2 id=\"触发BFC\"><a href=\"#触发BFC\" class=\"headerlink\" title=\"触发BFC\"></a>触发BFC</h2><p>只要元素满足以下任意一种条件就可以触发BFC特性：</p>\n<ul>\n<li>body根元素</li>\n<li>浮动元素：float除none以外的值</li>\n<li>绝对定位元素：position（absolute、fixed）</li>\n<li>display为inline-block、table-cells、flex、inline-flex、table-caption</li>\n<li>overflow除了visible以外的值（hidden、auto、scroll）</li>\n</ul>\n<h2 id=\"BFC的应用\"><a href=\"#BFC的应用\" class=\"headerlink\" title=\"BFC的应用\"></a>BFC的应用</h2><ol>\n<li><h4 id=\"防止margin重叠（塌陷）\"><a href=\"#防止margin重叠（塌陷）\" class=\"headerlink\" title=\"防止margin重叠（塌陷）\"></a>防止margin重叠（塌陷）</h4><p><strong>相邻</strong>的两个盒子（可能是兄弟关系也可能是祖先关系）的垂直边距相遇时， 它们将形成一个外边距。这个外边距的高度等于两个发生折叠的外边距的高度中的<strong>较大者</strong>。</p>\n<p><strong>外边距折叠的条件是 margin 必须相邻!</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.box</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">color</span>: brown;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">226</span>, <span class=\"number\">159</span>, <span class=\"number\">108</span>);</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>上面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>下面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/eeQvIh-image-20210406144515012.png\" alt=\"image-20210406144515012\" style=\"zoom:50%;\" />\n\n<p>两个box之间的距离为100px，发生了margin重叠（塌陷），解决这个问题，只需要把其中一个box变为BFC元素即可</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">color</span>: brown;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">226</span>, <span class=\"number\">159</span>, <span class=\"number\">108</span>);</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>上面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;overflow: hidden;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>下面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/sABvEs-image-20210406145329212.png\" alt=\"image-20210406145329212\" style=\"zoom:50%;\" /></li>\n<li><h4 id=\"清除内部浮动\"><a href=\"#清除内部浮动\" class=\"headerlink\" title=\"清除内部浮动\"></a>清除内部浮动</h4><ul>\n<li>浮动元素会脱离文档流(绝对定位元素也会脱离文档流)，导致无法计算准确的高度，这种问题称为<strong>高度塌陷</strong>。</li>\n<li>解决高度塌陷问题的前提是能够识别并包含浮动元素，也就是<strong>清除浮动</strong>。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"built_in\">rgb</span>(<span class=\"number\">120</span>, <span class=\"number\">201</span>, <span class=\"number\">177</span>);</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">color</span>: brown;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">226</span>, <span class=\"number\">159</span>, <span class=\"number\">108</span>);</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">float</span>: left;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>上面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>下面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/UkhPhY-image-20210406150234363.png\" alt=\"image-20210406150234363\" style=\"zoom:50%;\" />\n\n<p>如上左图所示，容器（parent）没有高度或者 height = auto ,并且其子元素（box）是浮动元素，所以该容器的高度是不会被撑开的，即高度塌陷。</p>\n<p>解决方法：<strong>在容器（container）中创建 BFC。</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n<style type=\"text/css\">\n    .parent {\n        width: 300px;\n        border: 2px solid rgb(120, 201, 177);\n        overflow: hidden;\n    }\n    .box {\n        color: brown;\n        background: rgb(226, 159, 108);\n        width: 100px;\n        height: 100px;\n        text-align: center;\n        line-height: 100px;\n        float: left;\n    }\n</style>\n\n<body>\n    <div class=\"parent\">\n        <div class=\"box\">上面</div>\n        <div class=\"box\">下面</div>\n    </div>\n</body>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   </span><br><span class=\"line\">   &lt;img src=&quot;https://img.showydream.com/img/dKS7cW-image-20210406150535638.png&quot; alt=&quot;image-20210406150535638&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">3. #### 自适应多栏布局</span><br><span class=\"line\"></span><br><span class=\"line\">   ```html</span><br><span class=\"line\">   &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">       body&#123;</span><br><span class=\"line\">           width: 300px;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       .aside &#123;</span><br><span class=\"line\">           width: 100px;</span><br><span class=\"line\">           height: 150px;</span><br><span class=\"line\">           float: left;</span><br><span class=\"line\">           background: rgb(47, 187, 145);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       .main &#123;</span><br><span class=\"line\">           height: 200px;</span><br><span class=\"line\">           background: rgb(171, 75, 156);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &lt;/style&gt;</span><br><span class=\"line\">   &lt;body&gt;</span><br><span class=\"line\">       &lt;div class=&quot;aside&quot;&gt;aside&lt;/div&gt;</span><br><span class=\"line\">       &lt;div class=&quot;main&quot;&gt;main&lt;/div&gt;</span><br><span class=\"line\">   &lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://img.showydream.com/img/7OF8JS-image-20210406151256736.png\" alt=\"image-20210406151256736\" style=\"zoom:50%;\"/>\n\n<p>这时候main元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可以通过触发<code>main</code>生成<code>BFC</code>，以此适应两栏布局</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">body</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.aside</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">float</span>: left;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">47</span>, <span class=\"number\">187</span>, <span class=\"number\">145</span>);</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.main</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">overflow</span>: hidden;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">171</span>, <span class=\"number\">75</span>, <span class=\"number\">156</span>);</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aside&quot;</span>&gt;</span>aside<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<img src=\"https://img.showydream.com/img/z1IwLr-image-20210406151547943.png\" alt=\"image-20210406151547943\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://juejin.cn/post/6844903780253696013#heading-5\">https://juejin.cn/post/6844903780253696013#heading-5</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/25321647\">https://zhuanlan.zhihu.com/p/25321647</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000013647777\">https://segmentfault.com/a/1190000013647777</a></p>\n<p><a href=\"https://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html\">https://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html</a></p>\n"},{"title":"vue添加购物车动效","date":"2021-04-13T09:54:58.000Z","cover":"https://img.showydream.com/img/NSxdnY-post-image2.jpg","description":"用vue实现添加购物车特效。","keywords":"vue实现添加购物车特效","_content":"\n\n今天搞了个好玩儿的功能，添加到购物车特效，话不多说，先上效果\n\n<img src=\"https://img.showydream.com/img/pmcULm-0bwnr-2y73w.gif\" alt=\"0bwnr-2y73w\" style=\"zoom:50%;\" />\n\n实现这个效果有几个要点如下：\n\n- 购物车car在一个固定的位置，我是用`position:fixed`把购物车固定在右边\n- 小球动态的轨迹需要用到贝塞尔曲线，[在这个网站上可以调试](https://cubic-bezier.com/#.4,-0.89,.55,.54)，注意贝塞尔曲线是小球运动的快慢，不是轨迹（看了半天文章才看明白）。\n- 小球的位置跟购物车的位置一样，当抛的时候要算出添加购物车的点到购物车的transform横坐标位移和纵坐标位移，然后把小球拉到当前位置，用transition动画加贝塞尔曲线展示。\n\n核心代码如下\n\n```html\n\n<!--小球-->\n<div>\n   <transition\n     name=\"drop\"\n     @before-enter=\"beforeDrop\"\n     @enter=\"dropping\"\n     @after-enter=\"afterDrop\"\n   >\n     <div\n       v-show=\"ball.show\"\n       class=\"ball\"\n     >\n       <div class=\"inner inner-hook\" />\n     </div>\n   </transition>\n</div>\n\n<!--购物车的位置-->\n<div class=\"rangeIcon\">\n    {{ count }}    \n </div>\n\n<script>\n export default {\n   data(){\n     return{\n       ball: {\n        show: false,\n        el: null \n       },\n       count: 0\n     }\n   },\n   methods:{\n     drop (el) { // 抛物\n      if (!this.ball.show) {\n        this.ball.show = true\n        this.ball.el = el\n      }\n    },\n    beforeDrop (el) { /* 购物车小球动画实现 */\n      const ball = this.ball\n      if (ball.show) {\n        const rect = ball.el.getBoundingClientRect() // 元素相对于视口的位置\n        const x = -(window.innerWidth - rect.left - 10) // 获取x\n        const y = -(window.innerHeight - rect.top - 430) // 获取y\n        el.style.display = ''\n        el.style.webkitTransform = 'translateY(' + y + 'px)' // translateY\n        el.style.transform = 'translateY(' + y + 'px)'\n        const inner = el.getElementsByClassName('inner-hook')[0]\n        inner.style.webkitTransform = 'translateX(' + x + 'px)'\n        inner.style.transform = 'translateX(' + x + 'px)'\n      }\n    },\n    dropping (el, done) { /* 样式重置 */\n      const rf = el.offsetHeight\n      el.style.webkitTransform = 'translate3d(0,0,0)'\n      el.style.transform = 'translate3d(0,0,0)'\n      const inner = el.getElementsByClassName('inner-hook')[0]\n      inner.style.webkitTransform = 'translate3d(0,0,0)'\n      inner.style.transform = 'translate3d(0,0,0)'\n      el.addEventListener('transitionend', done)\n    },\n    afterDrop (el) { /* 初始化小球 */\n      this.ball.show = false\n      el.style.display = 'none'\n    },\n   }\n }\n</script>  \n\n<style scoped lang=\"scss\">\n  .ball {\n  position: fixed;\n  right: 10px;\n  bottom: 430px;\n  z-index: 200;\n  transition: all 1s cubic-bezier(.4, -0.89, .55, .54);\n  /*贝塞尔曲线*/\n}\n\n.inner {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: #FE6E6B;\n  transition: all 1s linear;\n}\n  \n.rangeIcon {\n  position: fixed;\n  right: 10px;\n  bottom: 430px;\n  font-size: 30px;\n  color: #DA3937;\n  cursor: pointer;\n  width: 40px;\n  height: 40px;\n  background: #EFEFEF;\n  box-shadow: 0 3px 7px 0 rgba(107, 107, 107, 0.35);\n  border-radius: 2px;\n  text-align: center;\n  padding-top: 3px;\n}  \n</style>\n```\n\n由于业务原因，我的添加按钮在购物车当前组件的子组件，和子子组件，所以搞了个[emitter](https://www.npmjs.com/package/emitt)去跟购物车组件通信。调用的时候子组件把`event`的`target`传到`drop`方法，小球就可以动起来啦。\n\n\n\n参考：https://www.cnblogs.com/pengfei25/p/11736427.html\n\n","source":"_posts/vue添加购物车动效.md","raw":"---\ntitle: vue添加购物车动效\ndate: 2021-4-13 17:54:58\ncover: https://img.showydream.com/img/NSxdnY-post-image2.jpg\ndescription: 用vue实现添加购物车特效。\nkeywords: vue实现添加购物车特效\ntags: Vue技巧\ncategories: \n  - Vue\n---\n\n\n今天搞了个好玩儿的功能，添加到购物车特效，话不多说，先上效果\n\n<img src=\"https://img.showydream.com/img/pmcULm-0bwnr-2y73w.gif\" alt=\"0bwnr-2y73w\" style=\"zoom:50%;\" />\n\n实现这个效果有几个要点如下：\n\n- 购物车car在一个固定的位置，我是用`position:fixed`把购物车固定在右边\n- 小球动态的轨迹需要用到贝塞尔曲线，[在这个网站上可以调试](https://cubic-bezier.com/#.4,-0.89,.55,.54)，注意贝塞尔曲线是小球运动的快慢，不是轨迹（看了半天文章才看明白）。\n- 小球的位置跟购物车的位置一样，当抛的时候要算出添加购物车的点到购物车的transform横坐标位移和纵坐标位移，然后把小球拉到当前位置，用transition动画加贝塞尔曲线展示。\n\n核心代码如下\n\n```html\n\n<!--小球-->\n<div>\n   <transition\n     name=\"drop\"\n     @before-enter=\"beforeDrop\"\n     @enter=\"dropping\"\n     @after-enter=\"afterDrop\"\n   >\n     <div\n       v-show=\"ball.show\"\n       class=\"ball\"\n     >\n       <div class=\"inner inner-hook\" />\n     </div>\n   </transition>\n</div>\n\n<!--购物车的位置-->\n<div class=\"rangeIcon\">\n    {{ count }}    \n </div>\n\n<script>\n export default {\n   data(){\n     return{\n       ball: {\n        show: false,\n        el: null \n       },\n       count: 0\n     }\n   },\n   methods:{\n     drop (el) { // 抛物\n      if (!this.ball.show) {\n        this.ball.show = true\n        this.ball.el = el\n      }\n    },\n    beforeDrop (el) { /* 购物车小球动画实现 */\n      const ball = this.ball\n      if (ball.show) {\n        const rect = ball.el.getBoundingClientRect() // 元素相对于视口的位置\n        const x = -(window.innerWidth - rect.left - 10) // 获取x\n        const y = -(window.innerHeight - rect.top - 430) // 获取y\n        el.style.display = ''\n        el.style.webkitTransform = 'translateY(' + y + 'px)' // translateY\n        el.style.transform = 'translateY(' + y + 'px)'\n        const inner = el.getElementsByClassName('inner-hook')[0]\n        inner.style.webkitTransform = 'translateX(' + x + 'px)'\n        inner.style.transform = 'translateX(' + x + 'px)'\n      }\n    },\n    dropping (el, done) { /* 样式重置 */\n      const rf = el.offsetHeight\n      el.style.webkitTransform = 'translate3d(0,0,0)'\n      el.style.transform = 'translate3d(0,0,0)'\n      const inner = el.getElementsByClassName('inner-hook')[0]\n      inner.style.webkitTransform = 'translate3d(0,0,0)'\n      inner.style.transform = 'translate3d(0,0,0)'\n      el.addEventListener('transitionend', done)\n    },\n    afterDrop (el) { /* 初始化小球 */\n      this.ball.show = false\n      el.style.display = 'none'\n    },\n   }\n }\n</script>  \n\n<style scoped lang=\"scss\">\n  .ball {\n  position: fixed;\n  right: 10px;\n  bottom: 430px;\n  z-index: 200;\n  transition: all 1s cubic-bezier(.4, -0.89, .55, .54);\n  /*贝塞尔曲线*/\n}\n\n.inner {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: #FE6E6B;\n  transition: all 1s linear;\n}\n  \n.rangeIcon {\n  position: fixed;\n  right: 10px;\n  bottom: 430px;\n  font-size: 30px;\n  color: #DA3937;\n  cursor: pointer;\n  width: 40px;\n  height: 40px;\n  background: #EFEFEF;\n  box-shadow: 0 3px 7px 0 rgba(107, 107, 107, 0.35);\n  border-radius: 2px;\n  text-align: center;\n  padding-top: 3px;\n}  \n</style>\n```\n\n由于业务原因，我的添加按钮在购物车当前组件的子组件，和子子组件，所以搞了个[emitter](https://www.npmjs.com/package/emitt)去跟购物车组件通信。调用的时候子组件把`event`的`target`传到`drop`方法，小球就可以动起来啦。\n\n\n\n参考：https://www.cnblogs.com/pengfei25/p/11736427.html\n\n","slug":"vue添加购物车动效","published":1,"updated":"2021-11-08T06:42:02.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62d4001hrify97l21nsk","content":"<p>今天搞了个好玩儿的功能，添加到购物车特效，话不多说，先上效果</p>\n<img src=\"https://img.showydream.com/img/pmcULm-0bwnr-2y73w.gif\" alt=\"0bwnr-2y73w\" style=\"zoom:50%;\" />\n\n<p>实现这个效果有几个要点如下：</p>\n<ul>\n<li>购物车car在一个固定的位置，我是用<code>position:fixed</code>把购物车固定在右边</li>\n<li>小球动态的轨迹需要用到贝塞尔曲线，<a href=\"https://cubic-bezier.com/#.4,-0.89,.55,.54\">在这个网站上可以调试</a>，注意贝塞尔曲线是小球运动的快慢，不是轨迹（看了半天文章才看明白）。</li>\n<li>小球的位置跟购物车的位置一样，当抛的时候要算出添加购物车的点到购物车的transform横坐标位移和纵坐标位移，然后把小球拉到当前位置，用transition动画加贝塞尔曲线展示。</li>\n</ul>\n<p>核心代码如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--小球--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">transition</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">name</span>=<span class=\"string\">&quot;drop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     @<span class=\"attr\">before-enter</span>=<span class=\"string\">&quot;beforeDrop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     @<span class=\"attr\">enter</span>=<span class=\"string\">&quot;dropping&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     @<span class=\"attr\">after-enter</span>=<span class=\"string\">&quot;afterDrop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">   &gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;ball.show&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">class</span>=<span class=\"string\">&quot;ball&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     &gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inner inner-hook&quot;</span> /&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--购物车的位置--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;rangeIcon&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; count &#125;&#125;    </span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"> <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"keyword\">return</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">       <span class=\"attr\">ball</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">show</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">el</span>: <span class=\"literal\">null</span> </span></span><br><span class=\"line\"><span class=\"javascript\">       &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">       <span class=\"attr\">count</span>: <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"javascript\">     &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">   &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">     drop (el) &#123; <span class=\"comment\">// 抛物</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.ball.show) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.ball.show = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.ball.el = el</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    beforeDrop (el) &#123; <span class=\"comment\">/* 购物车小球动画实现 */</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> ball = <span class=\"built_in\">this</span>.ball</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (ball.show) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> rect = ball.el.getBoundingClientRect() <span class=\"comment\">// 元素相对于视口的位置</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> x = -(<span class=\"built_in\">window</span>.innerWidth - rect.left - <span class=\"number\">10</span>) <span class=\"comment\">// 获取x</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> y = -(<span class=\"built_in\">window</span>.innerHeight - rect.top - <span class=\"number\">430</span>) <span class=\"comment\">// 获取y</span></span></span><br><span class=\"line\"><span class=\"javascript\">        el.style.display = <span class=\"string\">&#x27;&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        el.style.webkitTransform = <span class=\"string\">&#x27;translateY(&#x27;</span> + y + <span class=\"string\">&#x27;px)&#x27;</span> <span class=\"comment\">// translateY</span></span></span><br><span class=\"line\"><span class=\"javascript\">        el.style.transform = <span class=\"string\">&#x27;translateY(&#x27;</span> + y + <span class=\"string\">&#x27;px)&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> inner = el.getElementsByClassName(<span class=\"string\">&#x27;inner-hook&#x27;</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">        inner.style.webkitTransform = <span class=\"string\">&#x27;translateX(&#x27;</span> + x + <span class=\"string\">&#x27;px)&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        inner.style.transform = <span class=\"string\">&#x27;translateX(&#x27;</span> + x + <span class=\"string\">&#x27;px)&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    dropping (el, done) &#123; <span class=\"comment\">/* 样式重置 */</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> rf = el.offsetHeight</span></span><br><span class=\"line\"><span class=\"javascript\">      el.style.webkitTransform = <span class=\"string\">&#x27;translate3d(0,0,0)&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">      el.style.transform = <span class=\"string\">&#x27;translate3d(0,0,0)&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> inner = el.getElementsByClassName(<span class=\"string\">&#x27;inner-hook&#x27;</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">      inner.style.webkitTransform = <span class=\"string\">&#x27;translate3d(0,0,0)&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">      inner.style.transform = <span class=\"string\">&#x27;translate3d(0,0,0)&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">      el.addEventListener(<span class=\"string\">&#x27;transitionend&#x27;</span>, done)</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    afterDrop (el) &#123; <span class=\"comment\">/* 初始化小球 */</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.ball.show = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"javascript\">      el.style.display = <span class=\"string\">&#x27;none&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">   &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"> &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;scss&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.ball</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">position</span>: fixed;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">right</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">430px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">200</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span> <span class=\"built_in\">cubic-bezier</span>(.<span class=\"number\">4</span>, -<span class=\"number\">0.89</span>, .<span class=\"number\">55</span>, .<span class=\"number\">54</span>);</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"comment\">/*贝塞尔曲线*/</span></span></span><br><span class=\"line\"><span class=\"css\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.inner</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#FE6E6B</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span> linear;</span></span><br><span class=\"line\"><span class=\"css\">&#125;</span></span><br><span class=\"line\"><span class=\"css\">  </span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.rangeIcon</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">position</span>: fixed;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">right</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">430px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">color</span>: <span class=\"number\">#DA3937</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">cursor</span>: pointer;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">background</span>: <span class=\"number\">#EFEFEF</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">3px</span> <span class=\"number\">7px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">107</span>, <span class=\"number\">107</span>, <span class=\"number\">107</span>, <span class=\"number\">0.35</span>);</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"css\">&#125;  </span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>由于业务原因，我的添加按钮在购物车当前组件的子组件，和子子组件，所以搞了个<a href=\"https://www.npmjs.com/package/emitt\">emitter</a>去跟购物车组件通信。调用的时候子组件把<code>event</code>的<code>target</code>传到<code>drop</code>方法，小球就可以动起来啦。</p>\n<p>参考：<a href=\"https://www.cnblogs.com/pengfei25/p/11736427.html\">https://www.cnblogs.com/pengfei25/p/11736427.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天搞了个好玩儿的功能，添加到购物车特效，话不多说，先上效果</p>\n<img src=\"https://img.showydream.com/img/pmcULm-0bwnr-2y73w.gif\" alt=\"0bwnr-2y73w\" style=\"zoom:50%;\" />\n\n<p>实现这个效果有几个要点如下：</p>\n<ul>\n<li>购物车car在一个固定的位置，我是用<code>position:fixed</code>把购物车固定在右边</li>\n<li>小球动态的轨迹需要用到贝塞尔曲线，<a href=\"https://cubic-bezier.com/#.4,-0.89,.55,.54\">在这个网站上可以调试</a>，注意贝塞尔曲线是小球运动的快慢，不是轨迹（看了半天文章才看明白）。</li>\n<li>小球的位置跟购物车的位置一样，当抛的时候要算出添加购物车的点到购物车的transform横坐标位移和纵坐标位移，然后把小球拉到当前位置，用transition动画加贝塞尔曲线展示。</li>\n</ul>\n<p>核心代码如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--小球--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">transition</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">name</span>=<span class=\"string\">&quot;drop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     @<span class=\"attr\">before-enter</span>=<span class=\"string\">&quot;beforeDrop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     @<span class=\"attr\">enter</span>=<span class=\"string\">&quot;dropping&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     @<span class=\"attr\">after-enter</span>=<span class=\"string\">&quot;afterDrop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">   &gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;ball.show&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">class</span>=<span class=\"string\">&quot;ball&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     &gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inner inner-hook&quot;</span> /&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--购物车的位置--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;rangeIcon&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; count &#125;&#125;    </span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"> <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">     <span class=\"keyword\">return</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">       <span class=\"attr\">ball</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">show</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">el</span>: <span class=\"literal\">null</span> </span></span><br><span class=\"line\"><span class=\"javascript\">       &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">       <span class=\"attr\">count</span>: <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"javascript\">     &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">   &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">   <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">     drop (el) &#123; <span class=\"comment\">// 抛物</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.ball.show) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.ball.show = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.ball.el = el</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    beforeDrop (el) &#123; <span class=\"comment\">/* 购物车小球动画实现 */</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> ball = <span class=\"built_in\">this</span>.ball</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (ball.show) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> rect = ball.el.getBoundingClientRect() <span class=\"comment\">// 元素相对于视口的位置</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> x = -(<span class=\"built_in\">window</span>.innerWidth - rect.left - <span class=\"number\">10</span>) <span class=\"comment\">// 获取x</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> y = -(<span class=\"built_in\">window</span>.innerHeight - rect.top - <span class=\"number\">430</span>) <span class=\"comment\">// 获取y</span></span></span><br><span class=\"line\"><span class=\"javascript\">        el.style.display = <span class=\"string\">&#x27;&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        el.style.webkitTransform = <span class=\"string\">&#x27;translateY(&#x27;</span> + y + <span class=\"string\">&#x27;px)&#x27;</span> <span class=\"comment\">// translateY</span></span></span><br><span class=\"line\"><span class=\"javascript\">        el.style.transform = <span class=\"string\">&#x27;translateY(&#x27;</span> + y + <span class=\"string\">&#x27;px)&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> inner = el.getElementsByClassName(<span class=\"string\">&#x27;inner-hook&#x27;</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">        inner.style.webkitTransform = <span class=\"string\">&#x27;translateX(&#x27;</span> + x + <span class=\"string\">&#x27;px)&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        inner.style.transform = <span class=\"string\">&#x27;translateX(&#x27;</span> + x + <span class=\"string\">&#x27;px)&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    dropping (el, done) &#123; <span class=\"comment\">/* 样式重置 */</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> rf = el.offsetHeight</span></span><br><span class=\"line\"><span class=\"javascript\">      el.style.webkitTransform = <span class=\"string\">&#x27;translate3d(0,0,0)&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">      el.style.transform = <span class=\"string\">&#x27;translate3d(0,0,0)&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> inner = el.getElementsByClassName(<span class=\"string\">&#x27;inner-hook&#x27;</span>)[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">      inner.style.webkitTransform = <span class=\"string\">&#x27;translate3d(0,0,0)&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">      inner.style.transform = <span class=\"string\">&#x27;translate3d(0,0,0)&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">      el.addEventListener(<span class=\"string\">&#x27;transitionend&#x27;</span>, done)</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    afterDrop (el) &#123; <span class=\"comment\">/* 初始化小球 */</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.ball.show = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"javascript\">      el.style.display = <span class=\"string\">&#x27;none&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">   &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"> &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;scss&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.ball</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">position</span>: fixed;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">right</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">430px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">200</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span> <span class=\"built_in\">cubic-bezier</span>(.<span class=\"number\">4</span>, -<span class=\"number\">0.89</span>, .<span class=\"number\">55</span>, .<span class=\"number\">54</span>);</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"comment\">/*贝塞尔曲线*/</span></span></span><br><span class=\"line\"><span class=\"css\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.inner</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#FE6E6B</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span> linear;</span></span><br><span class=\"line\"><span class=\"css\">&#125;</span></span><br><span class=\"line\"><span class=\"css\">  </span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.rangeIcon</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">position</span>: fixed;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">right</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">430px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">color</span>: <span class=\"number\">#DA3937</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">cursor</span>: pointer;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">background</span>: <span class=\"number\">#EFEFEF</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">3px</span> <span class=\"number\">7px</span> <span class=\"number\">0</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">107</span>, <span class=\"number\">107</span>, <span class=\"number\">107</span>, <span class=\"number\">0.35</span>);</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"css\">&#125;  </span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>由于业务原因，我的添加按钮在购物车当前组件的子组件，和子子组件，所以搞了个<a href=\"https://www.npmjs.com/package/emitt\">emitter</a>去跟购物车组件通信。调用的时候子组件把<code>event</code>的<code>target</code>传到<code>drop</code>方法，小球就可以动起来啦。</p>\n<p>参考：<a href=\"https://www.cnblogs.com/pengfei25/p/11736427.html\">https://www.cnblogs.com/pengfei25/p/11736427.html</a></p>\n"},{"title":"详解Promise","date":"2021-01-29T07:43:08.000Z","cover":"https://img.showydream.com/img/VFqazk-post-image1.jpg","description":"本文介绍一下Promise","keywords":"Promise","_content":"\n\n\n## 介绍\n\n​\t\t异步行为是JavaScript的基础，但以前实现不理想。在早先的JavaScript中，只支持定义回调函数来表明异步函数操作完成。串联多个异步操作是一个常见的问题，通常需要深度嵌套回调函数（俗称“回调地狱”）来解决。\n\n​\t\t为了解决地狱回调这个问题，ES6根据Promise/A+规范，实现了一个Promise，可以将异步行为以同步行为的流程表达出来。\n\n## Promise/A+规范\n\n​\t\t一个Promise代表一个异步操作的最终结果，主要操作方法是通过调用promise的then方法，它接受的回调函数接受promise成功的结果或失败的原因。\n\n### 1、术语\n\n1. **promise**是一个有符合此标准的**then**方法的**object**或**function**\n2. **thenable**是then方法定义的**object**或**function**\n3. **value**是一个JavaScript合法值（包括**undefined**，**thenable**，**promise**）\n4. **exception**是一个**throw**语句抛出的错误\n5. **reason**是一个表明**promise**失败的原因的值\n\n### 2、要求\n\n1. #### Promise状态\n\n   一个promise有且只有一个状态（**pending**、**fullfilled**、**rejected**其中之一）\n\n   1. pending状态时：\n      - 可能会转化为fullfilled状态或rejected状态\n   2. fullfilled状态时：\n      - 不能再转变状态为其他状态\n      - 必须有一个value，且不可改变\n   3. rejected状态时：\n      - 不能再转变状态为其他状态\n      - 必须有一个reason，且不可改变\n\n   注：这里的**不可改变**意思是恒等（即可用===判断相等），但不意味更深层次的不可变（当 value 或 reason 不是基本值时，只要求其引用地址相等，但属性值可被更改）\n\n2. #### then方法\n\n   一个promise必须提供一个then方法，用来获取当前或最终的value或reason\n\n   一个promise的then方法接受两个参数：\n\n   `promise.then(onFullfilled, onRejected)`\n\n   1. onFullfilled和onRejected都是可选参数：\n\n      - 如果onFullfilled不是函数它会被忽略\n      - 如果onRejected不是函数它会被忽略\n\n   2. onFullfilled特性：\n\n      - 它一定是在 promise 是 fulfilled 状态后调用，并且接受一个参数 value\n      - 在 `promise` 执行结束前其不可被调用\n      - 它最多被调用一次\n\n   3. onRejected特性：\n\n      - 它一定在 promise 是 rejected 状态后调用，并且接受一个参数 reason\n      - 在 `promise` 被拒绝执行前其不可被调用\n      - 它最多被调用一次\n\n   4. onFulfilled 或 onRejected 只在执行环境堆栈只包含平台代码之后调用\n\n   5. onFulfilled 和 onRejected 会作为函数形式调用 (也就是说，默认 `this` 指向 global，严格模式 `undefined`)\n\n   6.  promise 的 `then` 可以链式调用多次\n\n      - 当 promise 状态是 fulfilled 时，所有的 onFulfilled 回调会以他们注册时的顺序依次执行\n      - 当 promise 状态是 rejected 时，所有的 onRejected 回调会以他们注册时的顺序依次执行\n\n   7. `then` 方法必须返回一个 `promise` 对象\n\n      `promise2 = promise1.then(onFulfilled, onRejected); `\n\n      1. 如果 onFulfilled 或 onRejected 返回的是一个 x，那么它会以`[[Resolve]](promise2, x)` 处理解析\n      2. 如果 onFulfilled 或 onRejected 里抛出了一个异常，那么 promise2 必须捕获这个错误（接受一个 reason 参数）\n      3. 如果 onFulfilled 不是一个函数，并且 promise1 状态是 fulfilled，那么 promise2 一定会接受到与 promse1 一样的值 value\n      4. 如果 onRejected 不是一个函数，并且 promise1 状态是 rejected，promise2 一定会接受到与 promise1 一样的值 reason\n\n3. #### Promise处理程序\n\n   ​\t**Promise 解决过程**是一个抽象的操作，其需输入一个 `promise` 和一个值，我们表示为 `[[Resolve]](promise, x)`，如果 x 是 thenable 类型，它会尝试生成一个 promise 处理 x，否则它将直接 resolve x\n\n   ​\t这种 **thenable** 的特性使得 Promise 的实现更具有通用性：只要其暴露出一个遵循 Promise/A+ 协议的 `then` 方法即可；这同时也使遵循 Promise/A+ 规范的实现可以与那些不太规范但可用的实现能良好共存。\n\n   （链式调用，层层传递下去）。它也允许对那些不符合 Promises/A+ 的 then 方法进行 “吸收”\n\n\n\n\n\n\n\n1. 一个Promise中的当前状态仅可能是pending、fufilled、rejected三者之一，切换状态仅能单向从pending向其他两种状态转化，不可逆\n2. Promise中的then方法可接受两个参数作为Promise状态改变时的回调，且then会返回一个新的Promise，可以被同一个Promise调用多次\n\n\n\n## 实现\n\n### 骨架\n\n根据用户的使用方法，构建架构的骨架\n\n```\nclass Promise{\n    constructor(execute) {\n        this.status = STATES.PENDING\n        this.value = null\n        this.reason = null\n        // 存放成功的回调\n    \t\tthis.fullfilledCbs = [];\n    \t\t// 存放失败的回调\n    \t\tthis.rejectedCbs= [];\n        const resolve = () => { }\n        const reject = () => { }\n        execute(resolve,reject)\n    }\n\n    then(fullfilledCbs, rejectedCbs) { \n        return new Promise()\n    }\n}\n```\n\n### 简单实现\n\n先不考虑各种情况，只是简单去实现，不去考虑异步，返回值等条件的结构。\n\n```\nconst STATES = {\n  PENDING: \"PENDING\",\n  FULFILLED: \"FULFILLED\",\n  REJECTED: \"REJECTED\",\n};\n\nclass Promise {\n  constructor(execute) {\n    this.status = STATES.PENDING;\n    this.value = null;\n    this.reason = null;\n    this.fullfilledCbs = [];\n    this.rejectedCbs= [];\n\n    const resolve = (value) => {\n      if (this.status === STATES.PENDING) {\n        this.value = value;\n        this.status = STATES.FULFILLED;\n        this.fullfilledCbs.forEach((_i) => _i());\n      }\n    };\n    const reject = (err) => {\n      if (this.status === STATES.PENDING) {\n        this.reason = err;\n        this.status = STATES.REJECTED;\n        this.rejectedCbs.forEach((_i) => _i());\n      }\n    };\n\n    try {\n      execute(resolve, reject);\n    } catch (e) {\n      reject(e);\n    }\n  }\n\n  then(onFulfilled, onRejected) {\n    if (this.status === STATES.FULFILLED) {\n      onFulfilled(this.value);\n    } else if (this.status === STATES.REJECTED) {\n      onRejected(this.reason);\n    }\n    if (this.status === STATES.PENDING) {\n      // 如果promise的状态是 pending，需要将 onFulfilled 和 onRejected 函数存放起来，等待状态确定后，再依次将对应的函数执行\n      this.fullfilledCbs.push(() => {\n        onFulfilled(this.value)\n      });\n      this.rejectedCbs.push(()=> {\n        onRejected(this.reason);\n      })\n    }\n  }\n}\n```\n\n#### 测试一下\n\n```\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('成功');\n  },1000);\n}).then(\n  (data) => {\n    console.log('success', data)\n  },\n  (err) => {\n    console.log('faild', err)\n  }\n)\n\n等待1秒后控制台输出： success 成功\n```\n\n### then方法补全\n\n```\nconst STATES = {\n  PENDING: \"PENDING\",\n  FULFILLED: \"FULFILLED\",\n  REJECTED: \"REJECTED\",\n};\n\nconst resolvePromise = (promise2, x, resolve, reject) => {\n  // x和promise2不能是同一个人，如果是同一个人就报错\n  if (promise2 === x) {\n    return reject(new TypeError(\"x和promise2不能是同一个人\"));\n  }\n  // 判断如果x是否是一个对象\n  if ((typeof x === \"object\" && x != null) || typeof x === \"function\") {\n    let called;\n    try {\n      // 预防取.then的时候错误\n      let then = x.then; // Object.definePropertype\n      if (typeof then === \"function\") {\n        // 用then.call()为了避免在使用一次x.then报错\n        then.call(\n          x,\n          (y) => {\n            // onFulfilled\n            // resolve(y)// 采用promise的成功结果，并且向下传递\n            if (called) {\n              return;\n            }\n            called = true;\n            // y有可能是一个promise，那么我们就要继续使用回调函数,直到解析出来的值是一个普通值\n            resolvePromise(promise2, y, resolve, reject);\n          },\n          (r) => {\n            // onRejected\n            if (called) {\n              return;\n            }\n            called = true;\n            reject(r); // 采用promise的失败结果，并且向下传递\n          }\n        );\n      } else {\n        if (called) {\n          return;\n        }\n        called = true;\n        resolve(x); // x不是一个函数，是一个对象\n      }\n    } catch (err) {\n      if (called) {\n        return;\n      }\n      called = true;\n      reject(err);\n    }\n  } else {\n    resolve(x);\n  }\n};\n\nclass Promise {\n  constructor(execute) {\n    this.status = STATES.PENDING;\n    this.value = null;\n    this.reason = null;\n    // 存放成功的回调\n    this.fullfilledCbs = [];\n    // 存放失败的回调\n    this.rejectedCbs = [];\n\n    const resolve = (value) => {\n      if (this.status === STATES.PENDING) {\n        this.value = value;\n        this.status = STATES.FULFILLED;\n        this.fullfilledCbs.forEach((_i) => _i());\n      }\n    };\n    const reject = (err) => {\n      if (this.status === STATES.PENDING) {\n        this.reason = err;\n        this.status = STATES.REJECTED;\n        this.rejectedCbs.forEach((_i) => _i());\n      }\n    };\n\n    try {\n      execute(resolve, reject);\n    } catch (e) {\n      reject(e);\n    }\n  }\n\n  then(onFulfilled, onRejected) {\n    // 参照PromiseA+的格式，then可以链式调用和值穿透\n    onFulfilled =\n      typeof onFulfilled === \"function\" ? onFulfilled : (val) => val;\n    onRejected =\n      typeof onRejected === \"function\"\n        ? onRejected\n        : (err) => {\n            throw err;\n          };\n\n    let promise2 = new Promise((resolve, reject) => {\n      // 此时是同步运行环境\n      if (this.status === STATES.FULFILLED) {\n        // 同步无法使用promise2，所以借用setiTimeout异步的方式\n        setTimeout(() => {\n          try {\n            let x = onFulfilled(this.value);\n            // x有可能是一个promise，所以我们需要一个回调函数去处理x，直到解析出来的是一个普通值\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (err) {\n            reject(err);\n          }\n        }, 0);\n      }\n      if (this.status === STATES.REJECTED) {\n        setTimeout(() => {\n          try {\n            let x = onRejected(this.reason);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (err) {\n            reject(err);\n          }\n        }, 0);\n      }\n      if (this.status === STATES.PENDING) {\n        // 如果promise的状态是 pending，需要将 onFulfilled 和 onRejected 函数存放起来，等待状态确定后，再依次将对应的函数执行\n        this.fullfilledCbs.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onFulfilled(this.value);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (err) {\n              reject(err);\n            }\n          }, 0);\n        });\n        this.rejectedCbs.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onRejected(this.reason);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (err) {\n              reject(err);\n            }\n          }, 0);\n        });\n      }\n    });\n\n    return promise2;\n  }\n}\n```\n\n具体每一步的原因在注释写了，这里就不做赘述了。测试一下：\n\n````\n\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"成功\");\n  }, 1000);\n})\n  .then(\n    (data) => {\n      console.log(\"success\", data);\n    },\n    (err) => {\n      console.log(\"faild\", err);\n    }\n  )\n  .then(\n    () => {\n      console.log(\"success2\");\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve(\"成功3\");\n        }, 0);\n      });\n    },\n    () => {\n      console.log(\"faild2\");\n    }\n  )\n  .then(\n    (data) => {\n      console.log(\"success3\", data);\n    },\n    (err) => {\n      console.log(\"faild2\", err);\n    }\n  );\n\n1秒后输出：\nsuccess 成功\nsuccess2\nsuccess3 成功3\n````\n\n成功！\n\n","source":"_posts/详解Promise.md","raw":"---\ntitle: 详解Promise\ndate: 2021-01-29 15:43:08\ncover: https://img.showydream.com/img/VFqazk-post-image1.jpg\ndescription: 本文介绍一下Promise\nkeywords: Promise\ntags: 面经\ncategories: \n  - Javascript\n---\n\n\n\n## 介绍\n\n​\t\t异步行为是JavaScript的基础，但以前实现不理想。在早先的JavaScript中，只支持定义回调函数来表明异步函数操作完成。串联多个异步操作是一个常见的问题，通常需要深度嵌套回调函数（俗称“回调地狱”）来解决。\n\n​\t\t为了解决地狱回调这个问题，ES6根据Promise/A+规范，实现了一个Promise，可以将异步行为以同步行为的流程表达出来。\n\n## Promise/A+规范\n\n​\t\t一个Promise代表一个异步操作的最终结果，主要操作方法是通过调用promise的then方法，它接受的回调函数接受promise成功的结果或失败的原因。\n\n### 1、术语\n\n1. **promise**是一个有符合此标准的**then**方法的**object**或**function**\n2. **thenable**是then方法定义的**object**或**function**\n3. **value**是一个JavaScript合法值（包括**undefined**，**thenable**，**promise**）\n4. **exception**是一个**throw**语句抛出的错误\n5. **reason**是一个表明**promise**失败的原因的值\n\n### 2、要求\n\n1. #### Promise状态\n\n   一个promise有且只有一个状态（**pending**、**fullfilled**、**rejected**其中之一）\n\n   1. pending状态时：\n      - 可能会转化为fullfilled状态或rejected状态\n   2. fullfilled状态时：\n      - 不能再转变状态为其他状态\n      - 必须有一个value，且不可改变\n   3. rejected状态时：\n      - 不能再转变状态为其他状态\n      - 必须有一个reason，且不可改变\n\n   注：这里的**不可改变**意思是恒等（即可用===判断相等），但不意味更深层次的不可变（当 value 或 reason 不是基本值时，只要求其引用地址相等，但属性值可被更改）\n\n2. #### then方法\n\n   一个promise必须提供一个then方法，用来获取当前或最终的value或reason\n\n   一个promise的then方法接受两个参数：\n\n   `promise.then(onFullfilled, onRejected)`\n\n   1. onFullfilled和onRejected都是可选参数：\n\n      - 如果onFullfilled不是函数它会被忽略\n      - 如果onRejected不是函数它会被忽略\n\n   2. onFullfilled特性：\n\n      - 它一定是在 promise 是 fulfilled 状态后调用，并且接受一个参数 value\n      - 在 `promise` 执行结束前其不可被调用\n      - 它最多被调用一次\n\n   3. onRejected特性：\n\n      - 它一定在 promise 是 rejected 状态后调用，并且接受一个参数 reason\n      - 在 `promise` 被拒绝执行前其不可被调用\n      - 它最多被调用一次\n\n   4. onFulfilled 或 onRejected 只在执行环境堆栈只包含平台代码之后调用\n\n   5. onFulfilled 和 onRejected 会作为函数形式调用 (也就是说，默认 `this` 指向 global，严格模式 `undefined`)\n\n   6.  promise 的 `then` 可以链式调用多次\n\n      - 当 promise 状态是 fulfilled 时，所有的 onFulfilled 回调会以他们注册时的顺序依次执行\n      - 当 promise 状态是 rejected 时，所有的 onRejected 回调会以他们注册时的顺序依次执行\n\n   7. `then` 方法必须返回一个 `promise` 对象\n\n      `promise2 = promise1.then(onFulfilled, onRejected); `\n\n      1. 如果 onFulfilled 或 onRejected 返回的是一个 x，那么它会以`[[Resolve]](promise2, x)` 处理解析\n      2. 如果 onFulfilled 或 onRejected 里抛出了一个异常，那么 promise2 必须捕获这个错误（接受一个 reason 参数）\n      3. 如果 onFulfilled 不是一个函数，并且 promise1 状态是 fulfilled，那么 promise2 一定会接受到与 promse1 一样的值 value\n      4. 如果 onRejected 不是一个函数，并且 promise1 状态是 rejected，promise2 一定会接受到与 promise1 一样的值 reason\n\n3. #### Promise处理程序\n\n   ​\t**Promise 解决过程**是一个抽象的操作，其需输入一个 `promise` 和一个值，我们表示为 `[[Resolve]](promise, x)`，如果 x 是 thenable 类型，它会尝试生成一个 promise 处理 x，否则它将直接 resolve x\n\n   ​\t这种 **thenable** 的特性使得 Promise 的实现更具有通用性：只要其暴露出一个遵循 Promise/A+ 协议的 `then` 方法即可；这同时也使遵循 Promise/A+ 规范的实现可以与那些不太规范但可用的实现能良好共存。\n\n   （链式调用，层层传递下去）。它也允许对那些不符合 Promises/A+ 的 then 方法进行 “吸收”\n\n\n\n\n\n\n\n1. 一个Promise中的当前状态仅可能是pending、fufilled、rejected三者之一，切换状态仅能单向从pending向其他两种状态转化，不可逆\n2. Promise中的then方法可接受两个参数作为Promise状态改变时的回调，且then会返回一个新的Promise，可以被同一个Promise调用多次\n\n\n\n## 实现\n\n### 骨架\n\n根据用户的使用方法，构建架构的骨架\n\n```\nclass Promise{\n    constructor(execute) {\n        this.status = STATES.PENDING\n        this.value = null\n        this.reason = null\n        // 存放成功的回调\n    \t\tthis.fullfilledCbs = [];\n    \t\t// 存放失败的回调\n    \t\tthis.rejectedCbs= [];\n        const resolve = () => { }\n        const reject = () => { }\n        execute(resolve,reject)\n    }\n\n    then(fullfilledCbs, rejectedCbs) { \n        return new Promise()\n    }\n}\n```\n\n### 简单实现\n\n先不考虑各种情况，只是简单去实现，不去考虑异步，返回值等条件的结构。\n\n```\nconst STATES = {\n  PENDING: \"PENDING\",\n  FULFILLED: \"FULFILLED\",\n  REJECTED: \"REJECTED\",\n};\n\nclass Promise {\n  constructor(execute) {\n    this.status = STATES.PENDING;\n    this.value = null;\n    this.reason = null;\n    this.fullfilledCbs = [];\n    this.rejectedCbs= [];\n\n    const resolve = (value) => {\n      if (this.status === STATES.PENDING) {\n        this.value = value;\n        this.status = STATES.FULFILLED;\n        this.fullfilledCbs.forEach((_i) => _i());\n      }\n    };\n    const reject = (err) => {\n      if (this.status === STATES.PENDING) {\n        this.reason = err;\n        this.status = STATES.REJECTED;\n        this.rejectedCbs.forEach((_i) => _i());\n      }\n    };\n\n    try {\n      execute(resolve, reject);\n    } catch (e) {\n      reject(e);\n    }\n  }\n\n  then(onFulfilled, onRejected) {\n    if (this.status === STATES.FULFILLED) {\n      onFulfilled(this.value);\n    } else if (this.status === STATES.REJECTED) {\n      onRejected(this.reason);\n    }\n    if (this.status === STATES.PENDING) {\n      // 如果promise的状态是 pending，需要将 onFulfilled 和 onRejected 函数存放起来，等待状态确定后，再依次将对应的函数执行\n      this.fullfilledCbs.push(() => {\n        onFulfilled(this.value)\n      });\n      this.rejectedCbs.push(()=> {\n        onRejected(this.reason);\n      })\n    }\n  }\n}\n```\n\n#### 测试一下\n\n```\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('成功');\n  },1000);\n}).then(\n  (data) => {\n    console.log('success', data)\n  },\n  (err) => {\n    console.log('faild', err)\n  }\n)\n\n等待1秒后控制台输出： success 成功\n```\n\n### then方法补全\n\n```\nconst STATES = {\n  PENDING: \"PENDING\",\n  FULFILLED: \"FULFILLED\",\n  REJECTED: \"REJECTED\",\n};\n\nconst resolvePromise = (promise2, x, resolve, reject) => {\n  // x和promise2不能是同一个人，如果是同一个人就报错\n  if (promise2 === x) {\n    return reject(new TypeError(\"x和promise2不能是同一个人\"));\n  }\n  // 判断如果x是否是一个对象\n  if ((typeof x === \"object\" && x != null) || typeof x === \"function\") {\n    let called;\n    try {\n      // 预防取.then的时候错误\n      let then = x.then; // Object.definePropertype\n      if (typeof then === \"function\") {\n        // 用then.call()为了避免在使用一次x.then报错\n        then.call(\n          x,\n          (y) => {\n            // onFulfilled\n            // resolve(y)// 采用promise的成功结果，并且向下传递\n            if (called) {\n              return;\n            }\n            called = true;\n            // y有可能是一个promise，那么我们就要继续使用回调函数,直到解析出来的值是一个普通值\n            resolvePromise(promise2, y, resolve, reject);\n          },\n          (r) => {\n            // onRejected\n            if (called) {\n              return;\n            }\n            called = true;\n            reject(r); // 采用promise的失败结果，并且向下传递\n          }\n        );\n      } else {\n        if (called) {\n          return;\n        }\n        called = true;\n        resolve(x); // x不是一个函数，是一个对象\n      }\n    } catch (err) {\n      if (called) {\n        return;\n      }\n      called = true;\n      reject(err);\n    }\n  } else {\n    resolve(x);\n  }\n};\n\nclass Promise {\n  constructor(execute) {\n    this.status = STATES.PENDING;\n    this.value = null;\n    this.reason = null;\n    // 存放成功的回调\n    this.fullfilledCbs = [];\n    // 存放失败的回调\n    this.rejectedCbs = [];\n\n    const resolve = (value) => {\n      if (this.status === STATES.PENDING) {\n        this.value = value;\n        this.status = STATES.FULFILLED;\n        this.fullfilledCbs.forEach((_i) => _i());\n      }\n    };\n    const reject = (err) => {\n      if (this.status === STATES.PENDING) {\n        this.reason = err;\n        this.status = STATES.REJECTED;\n        this.rejectedCbs.forEach((_i) => _i());\n      }\n    };\n\n    try {\n      execute(resolve, reject);\n    } catch (e) {\n      reject(e);\n    }\n  }\n\n  then(onFulfilled, onRejected) {\n    // 参照PromiseA+的格式，then可以链式调用和值穿透\n    onFulfilled =\n      typeof onFulfilled === \"function\" ? onFulfilled : (val) => val;\n    onRejected =\n      typeof onRejected === \"function\"\n        ? onRejected\n        : (err) => {\n            throw err;\n          };\n\n    let promise2 = new Promise((resolve, reject) => {\n      // 此时是同步运行环境\n      if (this.status === STATES.FULFILLED) {\n        // 同步无法使用promise2，所以借用setiTimeout异步的方式\n        setTimeout(() => {\n          try {\n            let x = onFulfilled(this.value);\n            // x有可能是一个promise，所以我们需要一个回调函数去处理x，直到解析出来的是一个普通值\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (err) {\n            reject(err);\n          }\n        }, 0);\n      }\n      if (this.status === STATES.REJECTED) {\n        setTimeout(() => {\n          try {\n            let x = onRejected(this.reason);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (err) {\n            reject(err);\n          }\n        }, 0);\n      }\n      if (this.status === STATES.PENDING) {\n        // 如果promise的状态是 pending，需要将 onFulfilled 和 onRejected 函数存放起来，等待状态确定后，再依次将对应的函数执行\n        this.fullfilledCbs.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onFulfilled(this.value);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (err) {\n              reject(err);\n            }\n          }, 0);\n        });\n        this.rejectedCbs.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onRejected(this.reason);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (err) {\n              reject(err);\n            }\n          }, 0);\n        });\n      }\n    });\n\n    return promise2;\n  }\n}\n```\n\n具体每一步的原因在注释写了，这里就不做赘述了。测试一下：\n\n````\n\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"成功\");\n  }, 1000);\n})\n  .then(\n    (data) => {\n      console.log(\"success\", data);\n    },\n    (err) => {\n      console.log(\"faild\", err);\n    }\n  )\n  .then(\n    () => {\n      console.log(\"success2\");\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve(\"成功3\");\n        }, 0);\n      });\n    },\n    () => {\n      console.log(\"faild2\");\n    }\n  )\n  .then(\n    (data) => {\n      console.log(\"success3\", data);\n    },\n    (err) => {\n      console.log(\"faild2\", err);\n    }\n  );\n\n1秒后输出：\nsuccess 成功\nsuccess2\nsuccess3 成功3\n````\n\n成功！\n\n","slug":"详解Promise","published":1,"updated":"2021-11-08T06:30:26.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62d6001mrify6dm993g1","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>​        异步行为是JavaScript的基础，但以前实现不理想。在早先的JavaScript中，只支持定义回调函数来表明异步函数操作完成。串联多个异步操作是一个常见的问题，通常需要深度嵌套回调函数（俗称“回调地狱”）来解决。</p>\n<p>​        为了解决地狱回调这个问题，ES6根据Promise/A+规范，实现了一个Promise，可以将异步行为以同步行为的流程表达出来。</p>\n<h2 id=\"Promise-A-规范\"><a href=\"#Promise-A-规范\" class=\"headerlink\" title=\"Promise/A+规范\"></a>Promise/A+规范</h2><p>​        一个Promise代表一个异步操作的最终结果，主要操作方法是通过调用promise的then方法，它接受的回调函数接受promise成功的结果或失败的原因。</p>\n<h3 id=\"1、术语\"><a href=\"#1、术语\" class=\"headerlink\" title=\"1、术语\"></a>1、术语</h3><ol>\n<li><strong>promise</strong>是一个有符合此标准的<strong>then</strong>方法的<strong>object</strong>或<strong>function</strong></li>\n<li><strong>thenable</strong>是then方法定义的<strong>object</strong>或<strong>function</strong></li>\n<li><strong>value</strong>是一个JavaScript合法值（包括<strong>undefined</strong>，<strong>thenable</strong>，<strong>promise</strong>）</li>\n<li><strong>exception</strong>是一个<strong>throw</strong>语句抛出的错误</li>\n<li><strong>reason</strong>是一个表明<strong>promise</strong>失败的原因的值</li>\n</ol>\n<h3 id=\"2、要求\"><a href=\"#2、要求\" class=\"headerlink\" title=\"2、要求\"></a>2、要求</h3><ol>\n<li><h4 id=\"Promise状态\"><a href=\"#Promise状态\" class=\"headerlink\" title=\"Promise状态\"></a>Promise状态</h4><p>一个promise有且只有一个状态（<strong>pending</strong>、<strong>fullfilled</strong>、<strong>rejected</strong>其中之一）</p>\n<ol>\n<li>pending状态时：<ul>\n<li>可能会转化为fullfilled状态或rejected状态</li>\n</ul>\n</li>\n<li>fullfilled状态时：<ul>\n<li>不能再转变状态为其他状态</li>\n<li>必须有一个value，且不可改变</li>\n</ul>\n</li>\n<li>rejected状态时：<ul>\n<li>不能再转变状态为其他状态</li>\n<li>必须有一个reason，且不可改变</li>\n</ul>\n</li>\n</ol>\n<p>注：这里的<strong>不可改变</strong>意思是恒等（即可用===判断相等），但不意味更深层次的不可变（当 value 或 reason 不是基本值时，只要求其引用地址相等，但属性值可被更改）</p>\n</li>\n<li><h4 id=\"then方法\"><a href=\"#then方法\" class=\"headerlink\" title=\"then方法\"></a>then方法</h4><p>一个promise必须提供一个then方法，用来获取当前或最终的value或reason</p>\n<p>一个promise的then方法接受两个参数：</p>\n<p><code>promise.then(onFullfilled, onRejected)</code></p>\n<ol>\n<li><p>onFullfilled和onRejected都是可选参数：</p>\n<ul>\n<li>如果onFullfilled不是函数它会被忽略</li>\n<li>如果onRejected不是函数它会被忽略</li>\n</ul>\n</li>\n<li><p>onFullfilled特性：</p>\n<ul>\n<li>它一定是在 promise 是 fulfilled 状态后调用，并且接受一个参数 value</li>\n<li>在 <code>promise</code> 执行结束前其不可被调用</li>\n<li>它最多被调用一次</li>\n</ul>\n</li>\n<li><p>onRejected特性：</p>\n<ul>\n<li>它一定在 promise 是 rejected 状态后调用，并且接受一个参数 reason</li>\n<li>在 <code>promise</code> 被拒绝执行前其不可被调用</li>\n<li>它最多被调用一次</li>\n</ul>\n</li>\n<li><p>onFulfilled 或 onRejected 只在执行环境堆栈只包含平台代码之后调用</p>\n</li>\n<li><p>onFulfilled 和 onRejected 会作为函数形式调用 (也就是说，默认 <code>this</code> 指向 global，严格模式 <code>undefined</code>)</p>\n</li>\n<li><p> promise 的 <code>then</code> 可以链式调用多次</p>\n</li>\n</ol>\n<ul>\n<li>当 promise 状态是 fulfilled 时，所有的 onFulfilled 回调会以他们注册时的顺序依次执行</li>\n<li>当 promise 状态是 rejected 时，所有的 onRejected 回调会以他们注册时的顺序依次执行</li>\n</ul>\n<ol start=\"7\">\n<li><p><code>then</code> 方法必须返回一个 <code>promise</code> 对象</p>\n<p><code>promise2 = promise1.then(onFulfilled, onRejected); </code></p>\n<ol>\n<li>如果 onFulfilled 或 onRejected 返回的是一个 x，那么它会以<code>[[Resolve]](promise2, x)</code> 处理解析</li>\n<li>如果 onFulfilled 或 onRejected 里抛出了一个异常，那么 promise2 必须捕获这个错误（接受一个 reason 参数）</li>\n<li>如果 onFulfilled 不是一个函数，并且 promise1 状态是 fulfilled，那么 promise2 一定会接受到与 promse1 一样的值 value</li>\n<li>如果 onRejected 不是一个函数，并且 promise1 状态是 rejected，promise2 一定会接受到与 promise1 一样的值 reason</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><h4 id=\"Promise处理程序\"><a href=\"#Promise处理程序\" class=\"headerlink\" title=\"Promise处理程序\"></a>Promise处理程序</h4><p>​    <strong>Promise 解决过程</strong>是一个抽象的操作，其需输入一个 <code>promise</code> 和一个值，我们表示为 <code>[[Resolve]](promise, x)</code>，如果 x 是 thenable 类型，它会尝试生成一个 promise 处理 x，否则它将直接 resolve x</p>\n<p>​    这种 <strong>thenable</strong> 的特性使得 Promise 的实现更具有通用性：只要其暴露出一个遵循 Promise/A+ 协议的 <code>then</code> 方法即可；这同时也使遵循 Promise/A+ 规范的实现可以与那些不太规范但可用的实现能良好共存。</p>\n<p>（链式调用，层层传递下去）。它也允许对那些不符合 Promises/A+ 的 then 方法进行 “吸收”</p>\n</li>\n</ol>\n<ol>\n<li>一个Promise中的当前状态仅可能是pending、fufilled、rejected三者之一，切换状态仅能单向从pending向其他两种状态转化，不可逆</li>\n<li>Promise中的then方法可接受两个参数作为Promise状态改变时的回调，且then会返回一个新的Promise，可以被同一个Promise调用多次</li>\n</ol>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"骨架\"><a href=\"#骨架\" class=\"headerlink\" title=\"骨架\"></a>骨架</h3><p>根据用户的使用方法，构建架构的骨架</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Promise&#123;</span><br><span class=\"line\">    constructor(execute) &#123;</span><br><span class=\"line\">        this.status = STATES.PENDING</span><br><span class=\"line\">        this.value = null</span><br><span class=\"line\">        this.reason = null</span><br><span class=\"line\">        // 存放成功的回调</span><br><span class=\"line\">    \t\tthis.fullfilledCbs = [];</span><br><span class=\"line\">    \t\t// 存放失败的回调</span><br><span class=\"line\">    \t\tthis.rejectedCbs= [];</span><br><span class=\"line\">        const resolve = () =&gt; &#123; &#125;</span><br><span class=\"line\">        const reject = () =&gt; &#123; &#125;</span><br><span class=\"line\">        execute(resolve,reject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    then(fullfilledCbs, rejectedCbs) &#123; </span><br><span class=\"line\">        return new Promise()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单实现\"><a href=\"#简单实现\" class=\"headerlink\" title=\"简单实现\"></a>简单实现</h3><p>先不考虑各种情况，只是简单去实现，不去考虑异步，返回值等条件的结构。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const STATES = &#123;</span><br><span class=\"line\">  PENDING: &quot;PENDING&quot;,</span><br><span class=\"line\">  FULFILLED: &quot;FULFILLED&quot;,</span><br><span class=\"line\">  REJECTED: &quot;REJECTED&quot;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Promise &#123;</span><br><span class=\"line\">  constructor(execute) &#123;</span><br><span class=\"line\">    this.status = STATES.PENDING;</span><br><span class=\"line\">    this.value = null;</span><br><span class=\"line\">    this.reason = null;</span><br><span class=\"line\">    this.fullfilledCbs = [];</span><br><span class=\"line\">    this.rejectedCbs= [];</span><br><span class=\"line\"></span><br><span class=\"line\">    const resolve = (value) =&gt; &#123;</span><br><span class=\"line\">      if (this.status === STATES.PENDING) &#123;</span><br><span class=\"line\">        this.value = value;</span><br><span class=\"line\">        this.status = STATES.FULFILLED;</span><br><span class=\"line\">        this.fullfilledCbs.forEach((_i) =&gt; _i());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    const reject = (err) =&gt; &#123;</span><br><span class=\"line\">      if (this.status === STATES.PENDING) &#123;</span><br><span class=\"line\">        this.reason = err;</span><br><span class=\"line\">        this.status = STATES.REJECTED;</span><br><span class=\"line\">        this.rejectedCbs.forEach((_i) =&gt; _i());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      execute(resolve, reject);</span><br><span class=\"line\">    &#125; catch (e) &#123;</span><br><span class=\"line\">      reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  then(onFulfilled, onRejected) &#123;</span><br><span class=\"line\">    if (this.status === STATES.FULFILLED) &#123;</span><br><span class=\"line\">      onFulfilled(this.value);</span><br><span class=\"line\">    &#125; else if (this.status === STATES.REJECTED) &#123;</span><br><span class=\"line\">      onRejected(this.reason);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (this.status === STATES.PENDING) &#123;</span><br><span class=\"line\">      // 如果promise的状态是 pending，需要将 onFulfilled 和 onRejected 函数存放起来，等待状态确定后，再依次将对应的函数执行</span><br><span class=\"line\">      this.fullfilledCbs.push(() =&gt; &#123;</span><br><span class=\"line\">        onFulfilled(this.value)</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      this.rejectedCbs.push(()=&gt; &#123;</span><br><span class=\"line\">        onRejected(this.reason);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试一下\"><a href=\"#测试一下\" class=\"headerlink\" title=\"测试一下\"></a>测试一下</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">  setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    resolve(&#x27;成功&#x27;);</span><br><span class=\"line\">  &#125;,1000);</span><br><span class=\"line\">&#125;).then(</span><br><span class=\"line\">  (data) =&gt; &#123;</span><br><span class=\"line\">    console.log(&#x27;success&#x27;, data)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  (err) =&gt; &#123;</span><br><span class=\"line\">    console.log(&#x27;faild&#x27;, err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">等待1秒后控制台输出： success 成功</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"then方法补全\"><a href=\"#then方法补全\" class=\"headerlink\" title=\"then方法补全\"></a>then方法补全</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const STATES = &#123;</span><br><span class=\"line\">  PENDING: &quot;PENDING&quot;,</span><br><span class=\"line\">  FULFILLED: &quot;FULFILLED&quot;,</span><br><span class=\"line\">  REJECTED: &quot;REJECTED&quot;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const resolvePromise = (promise2, x, resolve, reject) =&gt; &#123;</span><br><span class=\"line\">  // x和promise2不能是同一个人，如果是同一个人就报错</span><br><span class=\"line\">  if (promise2 === x) &#123;</span><br><span class=\"line\">    return reject(new TypeError(&quot;x和promise2不能是同一个人&quot;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 判断如果x是否是一个对象</span><br><span class=\"line\">  if ((typeof x === &quot;object&quot; &amp;&amp; x != null) || typeof x === &quot;function&quot;) &#123;</span><br><span class=\"line\">    let called;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      // 预防取.then的时候错误</span><br><span class=\"line\">      let then = x.then; // Object.definePropertype</span><br><span class=\"line\">      if (typeof then === &quot;function&quot;) &#123;</span><br><span class=\"line\">        // 用then.call()为了避免在使用一次x.then报错</span><br><span class=\"line\">        then.call(</span><br><span class=\"line\">          x,</span><br><span class=\"line\">          (y) =&gt; &#123;</span><br><span class=\"line\">            // onFulfilled</span><br><span class=\"line\">            // resolve(y)// 采用promise的成功结果，并且向下传递</span><br><span class=\"line\">            if (called) &#123;</span><br><span class=\"line\">              return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            called = true;</span><br><span class=\"line\">            // y有可能是一个promise，那么我们就要继续使用回调函数,直到解析出来的值是一个普通值</span><br><span class=\"line\">            resolvePromise(promise2, y, resolve, reject);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          (r) =&gt; &#123;</span><br><span class=\"line\">            // onRejected</span><br><span class=\"line\">            if (called) &#123;</span><br><span class=\"line\">              return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            called = true;</span><br><span class=\"line\">            reject(r); // 采用promise的失败结果，并且向下传递</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        if (called) &#123;</span><br><span class=\"line\">          return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        called = true;</span><br><span class=\"line\">        resolve(x); // x不是一个函数，是一个对象</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; catch (err) &#123;</span><br><span class=\"line\">      if (called) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      called = true;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    resolve(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Promise &#123;</span><br><span class=\"line\">  constructor(execute) &#123;</span><br><span class=\"line\">    this.status = STATES.PENDING;</span><br><span class=\"line\">    this.value = null;</span><br><span class=\"line\">    this.reason = null;</span><br><span class=\"line\">    // 存放成功的回调</span><br><span class=\"line\">    this.fullfilledCbs = [];</span><br><span class=\"line\">    // 存放失败的回调</span><br><span class=\"line\">    this.rejectedCbs = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    const resolve = (value) =&gt; &#123;</span><br><span class=\"line\">      if (this.status === STATES.PENDING) &#123;</span><br><span class=\"line\">        this.value = value;</span><br><span class=\"line\">        this.status = STATES.FULFILLED;</span><br><span class=\"line\">        this.fullfilledCbs.forEach((_i) =&gt; _i());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    const reject = (err) =&gt; &#123;</span><br><span class=\"line\">      if (this.status === STATES.PENDING) &#123;</span><br><span class=\"line\">        this.reason = err;</span><br><span class=\"line\">        this.status = STATES.REJECTED;</span><br><span class=\"line\">        this.rejectedCbs.forEach((_i) =&gt; _i());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      execute(resolve, reject);</span><br><span class=\"line\">    &#125; catch (e) &#123;</span><br><span class=\"line\">      reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  then(onFulfilled, onRejected) &#123;</span><br><span class=\"line\">    // 参照PromiseA+的格式，then可以链式调用和值穿透</span><br><span class=\"line\">    onFulfilled =</span><br><span class=\"line\">      typeof onFulfilled === &quot;function&quot; ? onFulfilled : (val) =&gt; val;</span><br><span class=\"line\">    onRejected =</span><br><span class=\"line\">      typeof onRejected === &quot;function&quot;</span><br><span class=\"line\">        ? onRejected</span><br><span class=\"line\">        : (err) =&gt; &#123;</span><br><span class=\"line\">            throw err;</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    let promise2 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">      // 此时是同步运行环境</span><br><span class=\"line\">      if (this.status === STATES.FULFILLED) &#123;</span><br><span class=\"line\">        // 同步无法使用promise2，所以借用setiTimeout异步的方式</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">          try &#123;</span><br><span class=\"line\">            let x = onFulfilled(this.value);</span><br><span class=\"line\">            // x有可能是一个promise，所以我们需要一个回调函数去处理x，直到解析出来的是一个普通值</span><br><span class=\"line\">            resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; catch (err) &#123;</span><br><span class=\"line\">            reject(err);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, 0);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (this.status === STATES.REJECTED) &#123;</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">          try &#123;</span><br><span class=\"line\">            let x = onRejected(this.reason);</span><br><span class=\"line\">            resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; catch (err) &#123;</span><br><span class=\"line\">            reject(err);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, 0);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (this.status === STATES.PENDING) &#123;</span><br><span class=\"line\">        // 如果promise的状态是 pending，需要将 onFulfilled 和 onRejected 函数存放起来，等待状态确定后，再依次将对应的函数执行</span><br><span class=\"line\">        this.fullfilledCbs.push(() =&gt; &#123;</span><br><span class=\"line\">          setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">              let x = onFulfilled(this.value);</span><br><span class=\"line\">              resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; catch (err) &#123;</span><br><span class=\"line\">              reject(err);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, 0);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        this.rejectedCbs.push(() =&gt; &#123;</span><br><span class=\"line\">          setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">              let x = onRejected(this.reason);</span><br><span class=\"line\">              resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; catch (err) &#123;</span><br><span class=\"line\">              reject(err);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, 0);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    return promise2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体每一步的原因在注释写了，这里就不做赘述了。测试一下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">  setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    resolve(&quot;成功&quot;);</span><br><span class=\"line\">  &#125;, 1000);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .then(</span><br><span class=\"line\">    (data) =&gt; &#123;</span><br><span class=\"line\">      console.log(&quot;success&quot;, data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    (err) =&gt; &#123;</span><br><span class=\"line\">      console.log(&quot;faild&quot;, err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .then(</span><br><span class=\"line\">    () =&gt; &#123;</span><br><span class=\"line\">      console.log(&quot;success2&quot;);</span><br><span class=\"line\">      return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">          resolve(&quot;成功3&quot;);</span><br><span class=\"line\">        &#125;, 0);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    () =&gt; &#123;</span><br><span class=\"line\">      console.log(&quot;faild2&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .then(</span><br><span class=\"line\">    (data) =&gt; &#123;</span><br><span class=\"line\">      console.log(&quot;success3&quot;, data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    (err) =&gt; &#123;</span><br><span class=\"line\">      console.log(&quot;faild2&quot;, err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">1秒后输出：</span><br><span class=\"line\">success 成功</span><br><span class=\"line\">success2</span><br><span class=\"line\">success3 成功3</span><br></pre></td></tr></table></figure>\n\n<p>成功！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>​        异步行为是JavaScript的基础，但以前实现不理想。在早先的JavaScript中，只支持定义回调函数来表明异步函数操作完成。串联多个异步操作是一个常见的问题，通常需要深度嵌套回调函数（俗称“回调地狱”）来解决。</p>\n<p>​        为了解决地狱回调这个问题，ES6根据Promise/A+规范，实现了一个Promise，可以将异步行为以同步行为的流程表达出来。</p>\n<h2 id=\"Promise-A-规范\"><a href=\"#Promise-A-规范\" class=\"headerlink\" title=\"Promise/A+规范\"></a>Promise/A+规范</h2><p>​        一个Promise代表一个异步操作的最终结果，主要操作方法是通过调用promise的then方法，它接受的回调函数接受promise成功的结果或失败的原因。</p>\n<h3 id=\"1、术语\"><a href=\"#1、术语\" class=\"headerlink\" title=\"1、术语\"></a>1、术语</h3><ol>\n<li><strong>promise</strong>是一个有符合此标准的<strong>then</strong>方法的<strong>object</strong>或<strong>function</strong></li>\n<li><strong>thenable</strong>是then方法定义的<strong>object</strong>或<strong>function</strong></li>\n<li><strong>value</strong>是一个JavaScript合法值（包括<strong>undefined</strong>，<strong>thenable</strong>，<strong>promise</strong>）</li>\n<li><strong>exception</strong>是一个<strong>throw</strong>语句抛出的错误</li>\n<li><strong>reason</strong>是一个表明<strong>promise</strong>失败的原因的值</li>\n</ol>\n<h3 id=\"2、要求\"><a href=\"#2、要求\" class=\"headerlink\" title=\"2、要求\"></a>2、要求</h3><ol>\n<li><h4 id=\"Promise状态\"><a href=\"#Promise状态\" class=\"headerlink\" title=\"Promise状态\"></a>Promise状态</h4><p>一个promise有且只有一个状态（<strong>pending</strong>、<strong>fullfilled</strong>、<strong>rejected</strong>其中之一）</p>\n<ol>\n<li>pending状态时：<ul>\n<li>可能会转化为fullfilled状态或rejected状态</li>\n</ul>\n</li>\n<li>fullfilled状态时：<ul>\n<li>不能再转变状态为其他状态</li>\n<li>必须有一个value，且不可改变</li>\n</ul>\n</li>\n<li>rejected状态时：<ul>\n<li>不能再转变状态为其他状态</li>\n<li>必须有一个reason，且不可改变</li>\n</ul>\n</li>\n</ol>\n<p>注：这里的<strong>不可改变</strong>意思是恒等（即可用===判断相等），但不意味更深层次的不可变（当 value 或 reason 不是基本值时，只要求其引用地址相等，但属性值可被更改）</p>\n</li>\n<li><h4 id=\"then方法\"><a href=\"#then方法\" class=\"headerlink\" title=\"then方法\"></a>then方法</h4><p>一个promise必须提供一个then方法，用来获取当前或最终的value或reason</p>\n<p>一个promise的then方法接受两个参数：</p>\n<p><code>promise.then(onFullfilled, onRejected)</code></p>\n<ol>\n<li><p>onFullfilled和onRejected都是可选参数：</p>\n<ul>\n<li>如果onFullfilled不是函数它会被忽略</li>\n<li>如果onRejected不是函数它会被忽略</li>\n</ul>\n</li>\n<li><p>onFullfilled特性：</p>\n<ul>\n<li>它一定是在 promise 是 fulfilled 状态后调用，并且接受一个参数 value</li>\n<li>在 <code>promise</code> 执行结束前其不可被调用</li>\n<li>它最多被调用一次</li>\n</ul>\n</li>\n<li><p>onRejected特性：</p>\n<ul>\n<li>它一定在 promise 是 rejected 状态后调用，并且接受一个参数 reason</li>\n<li>在 <code>promise</code> 被拒绝执行前其不可被调用</li>\n<li>它最多被调用一次</li>\n</ul>\n</li>\n<li><p>onFulfilled 或 onRejected 只在执行环境堆栈只包含平台代码之后调用</p>\n</li>\n<li><p>onFulfilled 和 onRejected 会作为函数形式调用 (也就是说，默认 <code>this</code> 指向 global，严格模式 <code>undefined</code>)</p>\n</li>\n<li><p> promise 的 <code>then</code> 可以链式调用多次</p>\n</li>\n</ol>\n<ul>\n<li>当 promise 状态是 fulfilled 时，所有的 onFulfilled 回调会以他们注册时的顺序依次执行</li>\n<li>当 promise 状态是 rejected 时，所有的 onRejected 回调会以他们注册时的顺序依次执行</li>\n</ul>\n<ol start=\"7\">\n<li><p><code>then</code> 方法必须返回一个 <code>promise</code> 对象</p>\n<p><code>promise2 = promise1.then(onFulfilled, onRejected); </code></p>\n<ol>\n<li>如果 onFulfilled 或 onRejected 返回的是一个 x，那么它会以<code>[[Resolve]](promise2, x)</code> 处理解析</li>\n<li>如果 onFulfilled 或 onRejected 里抛出了一个异常，那么 promise2 必须捕获这个错误（接受一个 reason 参数）</li>\n<li>如果 onFulfilled 不是一个函数，并且 promise1 状态是 fulfilled，那么 promise2 一定会接受到与 promse1 一样的值 value</li>\n<li>如果 onRejected 不是一个函数，并且 promise1 状态是 rejected，promise2 一定会接受到与 promise1 一样的值 reason</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><h4 id=\"Promise处理程序\"><a href=\"#Promise处理程序\" class=\"headerlink\" title=\"Promise处理程序\"></a>Promise处理程序</h4><p>​    <strong>Promise 解决过程</strong>是一个抽象的操作，其需输入一个 <code>promise</code> 和一个值，我们表示为 <code>[[Resolve]](promise, x)</code>，如果 x 是 thenable 类型，它会尝试生成一个 promise 处理 x，否则它将直接 resolve x</p>\n<p>​    这种 <strong>thenable</strong> 的特性使得 Promise 的实现更具有通用性：只要其暴露出一个遵循 Promise/A+ 协议的 <code>then</code> 方法即可；这同时也使遵循 Promise/A+ 规范的实现可以与那些不太规范但可用的实现能良好共存。</p>\n<p>（链式调用，层层传递下去）。它也允许对那些不符合 Promises/A+ 的 then 方法进行 “吸收”</p>\n</li>\n</ol>\n<ol>\n<li>一个Promise中的当前状态仅可能是pending、fufilled、rejected三者之一，切换状态仅能单向从pending向其他两种状态转化，不可逆</li>\n<li>Promise中的then方法可接受两个参数作为Promise状态改变时的回调，且then会返回一个新的Promise，可以被同一个Promise调用多次</li>\n</ol>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"骨架\"><a href=\"#骨架\" class=\"headerlink\" title=\"骨架\"></a>骨架</h3><p>根据用户的使用方法，构建架构的骨架</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Promise&#123;</span><br><span class=\"line\">    constructor(execute) &#123;</span><br><span class=\"line\">        this.status = STATES.PENDING</span><br><span class=\"line\">        this.value = null</span><br><span class=\"line\">        this.reason = null</span><br><span class=\"line\">        // 存放成功的回调</span><br><span class=\"line\">    \t\tthis.fullfilledCbs = [];</span><br><span class=\"line\">    \t\t// 存放失败的回调</span><br><span class=\"line\">    \t\tthis.rejectedCbs= [];</span><br><span class=\"line\">        const resolve = () =&gt; &#123; &#125;</span><br><span class=\"line\">        const reject = () =&gt; &#123; &#125;</span><br><span class=\"line\">        execute(resolve,reject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    then(fullfilledCbs, rejectedCbs) &#123; </span><br><span class=\"line\">        return new Promise()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单实现\"><a href=\"#简单实现\" class=\"headerlink\" title=\"简单实现\"></a>简单实现</h3><p>先不考虑各种情况，只是简单去实现，不去考虑异步，返回值等条件的结构。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const STATES = &#123;</span><br><span class=\"line\">  PENDING: &quot;PENDING&quot;,</span><br><span class=\"line\">  FULFILLED: &quot;FULFILLED&quot;,</span><br><span class=\"line\">  REJECTED: &quot;REJECTED&quot;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Promise &#123;</span><br><span class=\"line\">  constructor(execute) &#123;</span><br><span class=\"line\">    this.status = STATES.PENDING;</span><br><span class=\"line\">    this.value = null;</span><br><span class=\"line\">    this.reason = null;</span><br><span class=\"line\">    this.fullfilledCbs = [];</span><br><span class=\"line\">    this.rejectedCbs= [];</span><br><span class=\"line\"></span><br><span class=\"line\">    const resolve = (value) =&gt; &#123;</span><br><span class=\"line\">      if (this.status === STATES.PENDING) &#123;</span><br><span class=\"line\">        this.value = value;</span><br><span class=\"line\">        this.status = STATES.FULFILLED;</span><br><span class=\"line\">        this.fullfilledCbs.forEach((_i) =&gt; _i());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    const reject = (err) =&gt; &#123;</span><br><span class=\"line\">      if (this.status === STATES.PENDING) &#123;</span><br><span class=\"line\">        this.reason = err;</span><br><span class=\"line\">        this.status = STATES.REJECTED;</span><br><span class=\"line\">        this.rejectedCbs.forEach((_i) =&gt; _i());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      execute(resolve, reject);</span><br><span class=\"line\">    &#125; catch (e) &#123;</span><br><span class=\"line\">      reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  then(onFulfilled, onRejected) &#123;</span><br><span class=\"line\">    if (this.status === STATES.FULFILLED) &#123;</span><br><span class=\"line\">      onFulfilled(this.value);</span><br><span class=\"line\">    &#125; else if (this.status === STATES.REJECTED) &#123;</span><br><span class=\"line\">      onRejected(this.reason);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (this.status === STATES.PENDING) &#123;</span><br><span class=\"line\">      // 如果promise的状态是 pending，需要将 onFulfilled 和 onRejected 函数存放起来，等待状态确定后，再依次将对应的函数执行</span><br><span class=\"line\">      this.fullfilledCbs.push(() =&gt; &#123;</span><br><span class=\"line\">        onFulfilled(this.value)</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      this.rejectedCbs.push(()=&gt; &#123;</span><br><span class=\"line\">        onRejected(this.reason);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试一下\"><a href=\"#测试一下\" class=\"headerlink\" title=\"测试一下\"></a>测试一下</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">  setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    resolve(&#x27;成功&#x27;);</span><br><span class=\"line\">  &#125;,1000);</span><br><span class=\"line\">&#125;).then(</span><br><span class=\"line\">  (data) =&gt; &#123;</span><br><span class=\"line\">    console.log(&#x27;success&#x27;, data)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  (err) =&gt; &#123;</span><br><span class=\"line\">    console.log(&#x27;faild&#x27;, err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">等待1秒后控制台输出： success 成功</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"then方法补全\"><a href=\"#then方法补全\" class=\"headerlink\" title=\"then方法补全\"></a>then方法补全</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const STATES = &#123;</span><br><span class=\"line\">  PENDING: &quot;PENDING&quot;,</span><br><span class=\"line\">  FULFILLED: &quot;FULFILLED&quot;,</span><br><span class=\"line\">  REJECTED: &quot;REJECTED&quot;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const resolvePromise = (promise2, x, resolve, reject) =&gt; &#123;</span><br><span class=\"line\">  // x和promise2不能是同一个人，如果是同一个人就报错</span><br><span class=\"line\">  if (promise2 === x) &#123;</span><br><span class=\"line\">    return reject(new TypeError(&quot;x和promise2不能是同一个人&quot;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 判断如果x是否是一个对象</span><br><span class=\"line\">  if ((typeof x === &quot;object&quot; &amp;&amp; x != null) || typeof x === &quot;function&quot;) &#123;</span><br><span class=\"line\">    let called;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      // 预防取.then的时候错误</span><br><span class=\"line\">      let then = x.then; // Object.definePropertype</span><br><span class=\"line\">      if (typeof then === &quot;function&quot;) &#123;</span><br><span class=\"line\">        // 用then.call()为了避免在使用一次x.then报错</span><br><span class=\"line\">        then.call(</span><br><span class=\"line\">          x,</span><br><span class=\"line\">          (y) =&gt; &#123;</span><br><span class=\"line\">            // onFulfilled</span><br><span class=\"line\">            // resolve(y)// 采用promise的成功结果，并且向下传递</span><br><span class=\"line\">            if (called) &#123;</span><br><span class=\"line\">              return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            called = true;</span><br><span class=\"line\">            // y有可能是一个promise，那么我们就要继续使用回调函数,直到解析出来的值是一个普通值</span><br><span class=\"line\">            resolvePromise(promise2, y, resolve, reject);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          (r) =&gt; &#123;</span><br><span class=\"line\">            // onRejected</span><br><span class=\"line\">            if (called) &#123;</span><br><span class=\"line\">              return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            called = true;</span><br><span class=\"line\">            reject(r); // 采用promise的失败结果，并且向下传递</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        if (called) &#123;</span><br><span class=\"line\">          return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        called = true;</span><br><span class=\"line\">        resolve(x); // x不是一个函数，是一个对象</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; catch (err) &#123;</span><br><span class=\"line\">      if (called) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      called = true;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    resolve(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Promise &#123;</span><br><span class=\"line\">  constructor(execute) &#123;</span><br><span class=\"line\">    this.status = STATES.PENDING;</span><br><span class=\"line\">    this.value = null;</span><br><span class=\"line\">    this.reason = null;</span><br><span class=\"line\">    // 存放成功的回调</span><br><span class=\"line\">    this.fullfilledCbs = [];</span><br><span class=\"line\">    // 存放失败的回调</span><br><span class=\"line\">    this.rejectedCbs = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    const resolve = (value) =&gt; &#123;</span><br><span class=\"line\">      if (this.status === STATES.PENDING) &#123;</span><br><span class=\"line\">        this.value = value;</span><br><span class=\"line\">        this.status = STATES.FULFILLED;</span><br><span class=\"line\">        this.fullfilledCbs.forEach((_i) =&gt; _i());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    const reject = (err) =&gt; &#123;</span><br><span class=\"line\">      if (this.status === STATES.PENDING) &#123;</span><br><span class=\"line\">        this.reason = err;</span><br><span class=\"line\">        this.status = STATES.REJECTED;</span><br><span class=\"line\">        this.rejectedCbs.forEach((_i) =&gt; _i());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      execute(resolve, reject);</span><br><span class=\"line\">    &#125; catch (e) &#123;</span><br><span class=\"line\">      reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  then(onFulfilled, onRejected) &#123;</span><br><span class=\"line\">    // 参照PromiseA+的格式，then可以链式调用和值穿透</span><br><span class=\"line\">    onFulfilled =</span><br><span class=\"line\">      typeof onFulfilled === &quot;function&quot; ? onFulfilled : (val) =&gt; val;</span><br><span class=\"line\">    onRejected =</span><br><span class=\"line\">      typeof onRejected === &quot;function&quot;</span><br><span class=\"line\">        ? onRejected</span><br><span class=\"line\">        : (err) =&gt; &#123;</span><br><span class=\"line\">            throw err;</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    let promise2 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">      // 此时是同步运行环境</span><br><span class=\"line\">      if (this.status === STATES.FULFILLED) &#123;</span><br><span class=\"line\">        // 同步无法使用promise2，所以借用setiTimeout异步的方式</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">          try &#123;</span><br><span class=\"line\">            let x = onFulfilled(this.value);</span><br><span class=\"line\">            // x有可能是一个promise，所以我们需要一个回调函数去处理x，直到解析出来的是一个普通值</span><br><span class=\"line\">            resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; catch (err) &#123;</span><br><span class=\"line\">            reject(err);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, 0);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (this.status === STATES.REJECTED) &#123;</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">          try &#123;</span><br><span class=\"line\">            let x = onRejected(this.reason);</span><br><span class=\"line\">            resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; catch (err) &#123;</span><br><span class=\"line\">            reject(err);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, 0);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (this.status === STATES.PENDING) &#123;</span><br><span class=\"line\">        // 如果promise的状态是 pending，需要将 onFulfilled 和 onRejected 函数存放起来，等待状态确定后，再依次将对应的函数执行</span><br><span class=\"line\">        this.fullfilledCbs.push(() =&gt; &#123;</span><br><span class=\"line\">          setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">              let x = onFulfilled(this.value);</span><br><span class=\"line\">              resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; catch (err) &#123;</span><br><span class=\"line\">              reject(err);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, 0);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        this.rejectedCbs.push(() =&gt; &#123;</span><br><span class=\"line\">          setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">              let x = onRejected(this.reason);</span><br><span class=\"line\">              resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; catch (err) &#123;</span><br><span class=\"line\">              reject(err);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, 0);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    return promise2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体每一步的原因在注释写了，这里就不做赘述了。测试一下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">  setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    resolve(&quot;成功&quot;);</span><br><span class=\"line\">  &#125;, 1000);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .then(</span><br><span class=\"line\">    (data) =&gt; &#123;</span><br><span class=\"line\">      console.log(&quot;success&quot;, data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    (err) =&gt; &#123;</span><br><span class=\"line\">      console.log(&quot;faild&quot;, err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .then(</span><br><span class=\"line\">    () =&gt; &#123;</span><br><span class=\"line\">      console.log(&quot;success2&quot;);</span><br><span class=\"line\">      return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">          resolve(&quot;成功3&quot;);</span><br><span class=\"line\">        &#125;, 0);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    () =&gt; &#123;</span><br><span class=\"line\">      console.log(&quot;faild2&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .then(</span><br><span class=\"line\">    (data) =&gt; &#123;</span><br><span class=\"line\">      console.log(&quot;success3&quot;, data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    (err) =&gt; &#123;</span><br><span class=\"line\">      console.log(&quot;faild2&quot;, err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">1秒后输出：</span><br><span class=\"line\">success 成功</span><br><span class=\"line\">success2</span><br><span class=\"line\">success3 成功3</span><br></pre></td></tr></table></figure>\n\n<p>成功！</p>\n"},{"title":"观察者模式","date":"2021-08-12T02:22:15.000Z","cover":"https://img.showydream.com/img/iZX9MU-picography-food-platters-beach-restaurant-small-768x512.jpg","description":"设计模式之观察者模式","keywords":"设计模式, 观察者模式","_content":"\n\n\n当对象存在一对多的关系时，则使用观察者模式（Observer Pattern），例如当一个对象被修改时，则会通它的依赖对象。观察者模式属于行为型模式。与发布/订阅模式不同的是，观察者模式没有调度中心，由目标直接调度观察者，观察者模式的观察者和目标之间是存在依赖的。\n\n## 介绍\n\n1. 意图：\n\n   定义对象的一种一对多的依赖关系，当一个对象的状态发生改变的时候，所有依赖它的对象都被通知且更新状态。\n\n2. 主要解决：\n\n   一个对象状态改变给其他对象通知的问题，而且要考虑到易用性和低耦合，保证高度的动作\n\n3. 何时使用：\n\n   一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。\n\n4. 如何解决：\n\n   使用面向对象技术，可以将依赖关系弱化\n\n5. 关键代码：\n\n   在抽象类里有一个ArrayList存在观察者们\n\n6. 应用实例：\n\n   拍卖系统，拍卖师观察最高价，通知其他竞价者竞价\n\n### 优缺点\n\n### 优点\n\n1. 观察者和被观察者是抽象耦合的\n2. 建立一套触发机制\n\n### 缺点\n\n1. 一个被观察者对象如果有太多间接或直接的观察者，将花费时间通知观察者\n2. 如果存在循环依赖，可能导致系统崩溃\n3. 观察者仅仅知道被观察者发生了变化，而不知道如何发生了变化\n","source":"_posts/观察者模式.md","raw":"---\ntitle: 观察者模式\ndate: 2021-08-12 10:22:15\ncover: https://img.showydream.com/img/iZX9MU-picography-food-platters-beach-restaurant-small-768x512.jpg\ndescription: 设计模式之观察者模式\nkeywords: 设计模式, 观察者模式\ntags: 设计模式\ncategories: \n  - 设计模式\n\n---\n\n\n\n当对象存在一对多的关系时，则使用观察者模式（Observer Pattern），例如当一个对象被修改时，则会通它的依赖对象。观察者模式属于行为型模式。与发布/订阅模式不同的是，观察者模式没有调度中心，由目标直接调度观察者，观察者模式的观察者和目标之间是存在依赖的。\n\n## 介绍\n\n1. 意图：\n\n   定义对象的一种一对多的依赖关系，当一个对象的状态发生改变的时候，所有依赖它的对象都被通知且更新状态。\n\n2. 主要解决：\n\n   一个对象状态改变给其他对象通知的问题，而且要考虑到易用性和低耦合，保证高度的动作\n\n3. 何时使用：\n\n   一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。\n\n4. 如何解决：\n\n   使用面向对象技术，可以将依赖关系弱化\n\n5. 关键代码：\n\n   在抽象类里有一个ArrayList存在观察者们\n\n6. 应用实例：\n\n   拍卖系统，拍卖师观察最高价，通知其他竞价者竞价\n\n### 优缺点\n\n### 优点\n\n1. 观察者和被观察者是抽象耦合的\n2. 建立一套触发机制\n\n### 缺点\n\n1. 一个被观察者对象如果有太多间接或直接的观察者，将花费时间通知观察者\n2. 如果存在循环依赖，可能导致系统崩溃\n3. 观察者仅仅知道被观察者发生了变化，而不知道如何发生了变化\n","slug":"观察者模式","published":1,"updated":"2021-11-08T04:44:23.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62d7001prifyeip62142","content":"<p>当对象存在一对多的关系时，则使用观察者模式（Observer Pattern），例如当一个对象被修改时，则会通它的依赖对象。观察者模式属于行为型模式。与发布/订阅模式不同的是，观察者模式没有调度中心，由目标直接调度观察者，观察者模式的观察者和目标之间是存在依赖的。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ol>\n<li><p>意图：</p>\n<p>定义对象的一种一对多的依赖关系，当一个对象的状态发生改变的时候，所有依赖它的对象都被通知且更新状态。</p>\n</li>\n<li><p>主要解决：</p>\n<p>一个对象状态改变给其他对象通知的问题，而且要考虑到易用性和低耦合，保证高度的动作</p>\n</li>\n<li><p>何时使用：</p>\n<p>一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。</p>\n</li>\n<li><p>如何解决：</p>\n<p>使用面向对象技术，可以将依赖关系弱化</p>\n</li>\n<li><p>关键代码：</p>\n<p>在抽象类里有一个ArrayList存在观察者们</p>\n</li>\n<li><p>应用实例：</p>\n<p>拍卖系统，拍卖师观察最高价，通知其他竞价者竞价</p>\n</li>\n</ol>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>观察者和被观察者是抽象耦合的</li>\n<li>建立一套触发机制</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li>一个被观察者对象如果有太多间接或直接的观察者，将花费时间通知观察者</li>\n<li>如果存在循环依赖，可能导致系统崩溃</li>\n<li>观察者仅仅知道被观察者发生了变化，而不知道如何发生了变化</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>当对象存在一对多的关系时，则使用观察者模式（Observer Pattern），例如当一个对象被修改时，则会通它的依赖对象。观察者模式属于行为型模式。与发布/订阅模式不同的是，观察者模式没有调度中心，由目标直接调度观察者，观察者模式的观察者和目标之间是存在依赖的。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ol>\n<li><p>意图：</p>\n<p>定义对象的一种一对多的依赖关系，当一个对象的状态发生改变的时候，所有依赖它的对象都被通知且更新状态。</p>\n</li>\n<li><p>主要解决：</p>\n<p>一个对象状态改变给其他对象通知的问题，而且要考虑到易用性和低耦合，保证高度的动作</p>\n</li>\n<li><p>何时使用：</p>\n<p>一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。</p>\n</li>\n<li><p>如何解决：</p>\n<p>使用面向对象技术，可以将依赖关系弱化</p>\n</li>\n<li><p>关键代码：</p>\n<p>在抽象类里有一个ArrayList存在观察者们</p>\n</li>\n<li><p>应用实例：</p>\n<p>拍卖系统，拍卖师观察最高价，通知其他竞价者竞价</p>\n</li>\n</ol>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>观察者和被观察者是抽象耦合的</li>\n<li>建立一套触发机制</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li>一个被观察者对象如果有太多间接或直接的观察者，将花费时间通知观察者</li>\n<li>如果存在循环依赖，可能导致系统崩溃</li>\n<li>观察者仅仅知道被观察者发生了变化，而不知道如何发生了变化</li>\n</ol>\n"},{"title":"面试题","date":"2021-04-22T09:54:58.000Z","cover":"https://img.showydream.com/img/iZX9MU-picography-food-platters-beach-restaurant-small-768x512.jpg","description":"vueQ&A笔记，持续更新","keywords":"Vue，面试题，面经","_content":"\n\n\n## vue父子组件的执行顺序\n\n当父子组件加载时，vue父子组件的生命周期的执行顺序为\n\n**父beforeCreate -> 父created -> 父beforeMount -> 子beforeCreate -> 子created -> 子beforeMount -> 子mounted -> 父mounted**\n\n**然后理解下这个顺序：**\n\n1.当父组件执行完beforeMount挂载开始后，会依次执行子组件中的钩子，直到全部子组件mounted挂载到实例上，父组件才会进入mounted钩子\n\n2.子级触发事件，会先触发父级beforeUpdate钩子，再去触发子级beforeUpdate钩子，下面又是先执行子级updated钩子，后执行父级updated钩子\n\n总结：\n\n父组件先于子组件created，而子组件先于父组件mounted\n\n父子组件加载渲染过程：\n\n父beforeCreate->父created->父beforeMount->子beforeCreate->子created->子beforeMount->子mounted->父mounted\n\n子组件更新：父beforeUpdate->子beforeUpdate->子updated->父updated\n\n父组件更新过程：父beforeUpdate->父updated\n\n销毁：父beforeDestroy->子beforeDestroy->子destroyed->父destroyed\n\n## Vue data为什么是函数而不是对象？\n\njs的实例是通过构造函数来创建的，每个构造函数都可以new出很多实例，每个实例都会继承原型上的属性和方法。\n\n**vue** 的每一个组件都是一个**vue**实例，**vue**的**data**数据是存在**vue**的原型上的属性，数据存在于内存中。**vue**为了保证数据之间的独立性，规定了**data**必须使用函数定义。如果**data**是一个对象的话，就会组件之间的相互影响，因为对象是对内存地址的引用，也就是说当一个组件的**data**值变化了，在其他组件的**data**值也会跟着变。造成组件之间的相互影响。\n\n## ['1', '2', '3'].map(parseInt) what & why ?\n\n第一反应是返回[1,2,3],但是真正的答案是`[1,NaN,NaN]`。问题在于parseInt接受两个参数，第一个是要被解析的值，第二个表示要解析的几进制，map的callback接受三个参数，第一个是当前正在处理的参数，第二个是参数的索引，第三个是map方法调用的数组。这时候会把map的前两个参数传到parseInt的接收的参数中，导致解析的结果为`[1,NaN,NaN]`\n\n## Set、Map、WeakSet、和WeakMap的区别？\n\n- #### Set\n\n  对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。\n\n- #### WeakSet\n\n  1. 成员都是对象\n  2. 成员都是弱引用，可以被垃圾回收机制回收，可以用来保存DOM节点，不容易造成内存泄漏\n\n- #### Map\n\n  1. 本质上是键值对的集合，类似集合\n  2. 可以根遍历，方法很多，可以跟各种数据格式转换\n\n- #### WeakMap\n\n  1. 只接受对象作为键名（null除外），不接受其他类型的值作为键名\n  2. 键名是弱引用，键值可以使任意的，键名所指的对象可以被垃圾回收，此时键名是无效的\n  3. 不能遍历，方法有`get`、`set`、`has`、`delete`\n\n## Vue的性能优化方法有哪些\n\n1. 路由懒加载 import方式引入页面\n\n2. keep-alive缓存页面\n\n3. 使用v-show复用DOM\n\n4. v-for遍历的同时避免使用v-if（2.x 当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。3.x当 v-if 与 v-for 一起使用时，v-if 具有比 v-for 更高的优先级），可以使用计算属性提前把数组进行过滤\n\n5. 长列表性能优化\n\n   如果列表纯粹是显示数据，不会有改变，数据就不需要响应式\n\n   ```vue\n   export default{\n   \t\tdata(){\n   \t\t\treturn{\n   \t\t\t\tlist: []\n   \t\t\t}\n   \t\t},\n   \t\tasync created(){\n   \t\t\tconst {data} = await apiGetList();\n   \t\t\tthis.list = Object.freeze(data);\n   \t\t}\n   }\n   ```\n\n   使用freeze方法进行冻结，或者更改属性为false\n\n   如果是大数据列表，可以用虚拟滚动，只渲染少部分区域内容\n\n6. 事件销毁，自定义的循环事件在`beforeDestroy`钩子函数中销毁\n\n7. 图片懒加载，\n\n8. 第三方插件按需导入\n\n9. 无状态组件标记为函数组件\n\n10. 子组件分割，子组件中有一些比较耗时的就单独分割成一个组件，自己做自己的渲染，不会影响其他的组件\n\n11. SSR\n\n\n\n## Vue响应式原理\n\n### Object.defineProperty\n\nVue的响应式原理依赖于`Object.defineProperty()`，这里简单介绍一下\n\n`Object.defineProperty()`会直接在对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。调用时直接在`Object`构造器对象上调用此方法，而不是在任意一个`Object`实例上调用。语法：\n\n```javascript\n/*\n* obj: 要定义属性的对象\n* prop: 要定义或修改的属性的名称或Symbol\n* descriptor: 要定义或修改的属性描述符 \n*\t\t\t\tvalue:该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 undefined。\n*\t\t\t\twritable:当且仅当该属性的 writable 键值为 true 时，属性的值，也就是上面的 value，才能被赋值运算符 (en-US)改变。\n\t\t\t\tconfigurable\n当且仅当该属性的 configurable 键值为 true 时，该属性的描述符才能够被改变，同时该属性也能从对应的对象上被删除。\n默认为 false。\n\t\t\t\tenumerable\n当且仅当该属性的 enumerable 键值为 true 时，该属性才会出现在对象的枚举属性中。\n默认为 false。\n\t\t\t\tget\n属性的 getter 函数，如果没有 getter，则为 undefined。当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 this 对象（由于继承关系，这里的this并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值。\n默认为 undefined。\n\t\t\t\tset\n属性的 setter 函数，如果没有 setter，则为 undefined。当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 this 对象。\n默认为 undefined。\n\n默认为 false。\n*/\nObject.defineProperty(obj, prop, descriptor)\n```\n\n示例：\n\n```JavaScript\nconst object1 = {};\n\nObject.defineProperty(object1, 'property1', {\n  value: 42,\n  writable: false\n});\n\nobject1.property1 = 77;\n// throws an error in strict mode\n\nconsole.log(object1.property1);\n// expected output: 42\n```\n\n\n\n### Vue2是怎么实现数据双向绑定的\n\n首先要对数据进行劫持监听，我们需要设置一个`Observer`函数，用来监听所有属性的变化。\n\n如果属性发生了变化，就要告诉订阅者`watcher`看是否需要更新数据，如果订阅者有多个，则需要一个`Dep`来收集这些订阅者，然后在监听器`observer`和`watcher`之间统一管理。\n\n还需要一个指令解析器`compile`，对需要监听的节点和属性进行扫描和解析。\n\n","source":"_posts/前端面经.md","raw":"---\ntitle: 面试题\ndate: 2021-4-22 17:54:58\ncover: https://img.showydream.com/img/iZX9MU-picography-food-platters-beach-restaurant-small-768x512.jpg\ndescription: vueQ&A笔记，持续更新\ntags: 面经\nkeywords: Vue，面试题，面经\ncategories: \n  - \n---\n\n\n\n## vue父子组件的执行顺序\n\n当父子组件加载时，vue父子组件的生命周期的执行顺序为\n\n**父beforeCreate -> 父created -> 父beforeMount -> 子beforeCreate -> 子created -> 子beforeMount -> 子mounted -> 父mounted**\n\n**然后理解下这个顺序：**\n\n1.当父组件执行完beforeMount挂载开始后，会依次执行子组件中的钩子，直到全部子组件mounted挂载到实例上，父组件才会进入mounted钩子\n\n2.子级触发事件，会先触发父级beforeUpdate钩子，再去触发子级beforeUpdate钩子，下面又是先执行子级updated钩子，后执行父级updated钩子\n\n总结：\n\n父组件先于子组件created，而子组件先于父组件mounted\n\n父子组件加载渲染过程：\n\n父beforeCreate->父created->父beforeMount->子beforeCreate->子created->子beforeMount->子mounted->父mounted\n\n子组件更新：父beforeUpdate->子beforeUpdate->子updated->父updated\n\n父组件更新过程：父beforeUpdate->父updated\n\n销毁：父beforeDestroy->子beforeDestroy->子destroyed->父destroyed\n\n## Vue data为什么是函数而不是对象？\n\njs的实例是通过构造函数来创建的，每个构造函数都可以new出很多实例，每个实例都会继承原型上的属性和方法。\n\n**vue** 的每一个组件都是一个**vue**实例，**vue**的**data**数据是存在**vue**的原型上的属性，数据存在于内存中。**vue**为了保证数据之间的独立性，规定了**data**必须使用函数定义。如果**data**是一个对象的话，就会组件之间的相互影响，因为对象是对内存地址的引用，也就是说当一个组件的**data**值变化了，在其他组件的**data**值也会跟着变。造成组件之间的相互影响。\n\n## ['1', '2', '3'].map(parseInt) what & why ?\n\n第一反应是返回[1,2,3],但是真正的答案是`[1,NaN,NaN]`。问题在于parseInt接受两个参数，第一个是要被解析的值，第二个表示要解析的几进制，map的callback接受三个参数，第一个是当前正在处理的参数，第二个是参数的索引，第三个是map方法调用的数组。这时候会把map的前两个参数传到parseInt的接收的参数中，导致解析的结果为`[1,NaN,NaN]`\n\n## Set、Map、WeakSet、和WeakMap的区别？\n\n- #### Set\n\n  对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。\n\n- #### WeakSet\n\n  1. 成员都是对象\n  2. 成员都是弱引用，可以被垃圾回收机制回收，可以用来保存DOM节点，不容易造成内存泄漏\n\n- #### Map\n\n  1. 本质上是键值对的集合，类似集合\n  2. 可以根遍历，方法很多，可以跟各种数据格式转换\n\n- #### WeakMap\n\n  1. 只接受对象作为键名（null除外），不接受其他类型的值作为键名\n  2. 键名是弱引用，键值可以使任意的，键名所指的对象可以被垃圾回收，此时键名是无效的\n  3. 不能遍历，方法有`get`、`set`、`has`、`delete`\n\n## Vue的性能优化方法有哪些\n\n1. 路由懒加载 import方式引入页面\n\n2. keep-alive缓存页面\n\n3. 使用v-show复用DOM\n\n4. v-for遍历的同时避免使用v-if（2.x 当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。3.x当 v-if 与 v-for 一起使用时，v-if 具有比 v-for 更高的优先级），可以使用计算属性提前把数组进行过滤\n\n5. 长列表性能优化\n\n   如果列表纯粹是显示数据，不会有改变，数据就不需要响应式\n\n   ```vue\n   export default{\n   \t\tdata(){\n   \t\t\treturn{\n   \t\t\t\tlist: []\n   \t\t\t}\n   \t\t},\n   \t\tasync created(){\n   \t\t\tconst {data} = await apiGetList();\n   \t\t\tthis.list = Object.freeze(data);\n   \t\t}\n   }\n   ```\n\n   使用freeze方法进行冻结，或者更改属性为false\n\n   如果是大数据列表，可以用虚拟滚动，只渲染少部分区域内容\n\n6. 事件销毁，自定义的循环事件在`beforeDestroy`钩子函数中销毁\n\n7. 图片懒加载，\n\n8. 第三方插件按需导入\n\n9. 无状态组件标记为函数组件\n\n10. 子组件分割，子组件中有一些比较耗时的就单独分割成一个组件，自己做自己的渲染，不会影响其他的组件\n\n11. SSR\n\n\n\n## Vue响应式原理\n\n### Object.defineProperty\n\nVue的响应式原理依赖于`Object.defineProperty()`，这里简单介绍一下\n\n`Object.defineProperty()`会直接在对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。调用时直接在`Object`构造器对象上调用此方法，而不是在任意一个`Object`实例上调用。语法：\n\n```javascript\n/*\n* obj: 要定义属性的对象\n* prop: 要定义或修改的属性的名称或Symbol\n* descriptor: 要定义或修改的属性描述符 \n*\t\t\t\tvalue:该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 undefined。\n*\t\t\t\twritable:当且仅当该属性的 writable 键值为 true 时，属性的值，也就是上面的 value，才能被赋值运算符 (en-US)改变。\n\t\t\t\tconfigurable\n当且仅当该属性的 configurable 键值为 true 时，该属性的描述符才能够被改变，同时该属性也能从对应的对象上被删除。\n默认为 false。\n\t\t\t\tenumerable\n当且仅当该属性的 enumerable 键值为 true 时，该属性才会出现在对象的枚举属性中。\n默认为 false。\n\t\t\t\tget\n属性的 getter 函数，如果没有 getter，则为 undefined。当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 this 对象（由于继承关系，这里的this并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值。\n默认为 undefined。\n\t\t\t\tset\n属性的 setter 函数，如果没有 setter，则为 undefined。当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 this 对象。\n默认为 undefined。\n\n默认为 false。\n*/\nObject.defineProperty(obj, prop, descriptor)\n```\n\n示例：\n\n```JavaScript\nconst object1 = {};\n\nObject.defineProperty(object1, 'property1', {\n  value: 42,\n  writable: false\n});\n\nobject1.property1 = 77;\n// throws an error in strict mode\n\nconsole.log(object1.property1);\n// expected output: 42\n```\n\n\n\n### Vue2是怎么实现数据双向绑定的\n\n首先要对数据进行劫持监听，我们需要设置一个`Observer`函数，用来监听所有属性的变化。\n\n如果属性发生了变化，就要告诉订阅者`watcher`看是否需要更新数据，如果订阅者有多个，则需要一个`Dep`来收集这些订阅者，然后在监听器`observer`和`watcher`之间统一管理。\n\n还需要一个指令解析器`compile`，对需要监听的节点和属性进行扫描和解析。\n\n","slug":"前端面经","published":1,"updated":"2021-11-08T06:08:24.968Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62d8001urify44i0ct3g","content":"<h2 id=\"vue父子组件的执行顺序\"><a href=\"#vue父子组件的执行顺序\" class=\"headerlink\" title=\"vue父子组件的执行顺序\"></a>vue父子组件的执行顺序</h2><p>当父子组件加载时，vue父子组件的生命周期的执行顺序为</p>\n<p><strong>父beforeCreate -&gt; 父created -&gt; 父beforeMount -&gt; 子beforeCreate -&gt; 子created -&gt; 子beforeMount -&gt; 子mounted -&gt; 父mounted</strong></p>\n<p><strong>然后理解下这个顺序：</strong></p>\n<p>1.当父组件执行完beforeMount挂载开始后，会依次执行子组件中的钩子，直到全部子组件mounted挂载到实例上，父组件才会进入mounted钩子</p>\n<p>2.子级触发事件，会先触发父级beforeUpdate钩子，再去触发子级beforeUpdate钩子，下面又是先执行子级updated钩子，后执行父级updated钩子</p>\n<p>总结：</p>\n<p>父组件先于子组件created，而子组件先于父组件mounted</p>\n<p>父子组件加载渲染过程：</p>\n<p>父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted</p>\n<p>子组件更新：父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated</p>\n<p>父组件更新过程：父beforeUpdate-&gt;父updated</p>\n<p>销毁：父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</p>\n<h2 id=\"Vue-data为什么是函数而不是对象？\"><a href=\"#Vue-data为什么是函数而不是对象？\" class=\"headerlink\" title=\"Vue data为什么是函数而不是对象？\"></a>Vue data为什么是函数而不是对象？</h2><p>js的实例是通过构造函数来创建的，每个构造函数都可以new出很多实例，每个实例都会继承原型上的属性和方法。</p>\n<p><strong>vue</strong> 的每一个组件都是一个<strong>vue</strong>实例，<strong>vue</strong>的<strong>data</strong>数据是存在<strong>vue</strong>的原型上的属性，数据存在于内存中。<strong>vue</strong>为了保证数据之间的独立性，规定了<strong>data</strong>必须使用函数定义。如果<strong>data</strong>是一个对象的话，就会组件之间的相互影响，因为对象是对内存地址的引用，也就是说当一个组件的<strong>data</strong>值变化了，在其他组件的<strong>data</strong>值也会跟着变。造成组件之间的相互影响。</p>\n<h2 id=\"‘1’-‘2’-‘3’-map-parseInt-what-amp-why\"><a href=\"#‘1’-‘2’-‘3’-map-parseInt-what-amp-why\" class=\"headerlink\" title=\"[‘1’, ‘2’, ‘3’].map(parseInt) what &amp; why ?\"></a>[‘1’, ‘2’, ‘3’].map(parseInt) what &amp; why ?</h2><p>第一反应是返回[1,2,3],但是真正的答案是<code>[1,NaN,NaN]</code>。问题在于parseInt接受两个参数，第一个是要被解析的值，第二个表示要解析的几进制，map的callback接受三个参数，第一个是当前正在处理的参数，第二个是参数的索引，第三个是map方法调用的数组。这时候会把map的前两个参数传到parseInt的接收的参数中，导致解析的结果为<code>[1,NaN,NaN]</code></p>\n<h2 id=\"Set、Map、WeakSet、和WeakMap的区别？\"><a href=\"#Set、Map、WeakSet、和WeakMap的区别？\" class=\"headerlink\" title=\"Set、Map、WeakSet、和WeakMap的区别？\"></a>Set、Map、WeakSet、和WeakMap的区别？</h2><ul>\n<li><h4 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h4><p>对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</p>\n</li>\n<li><h4 id=\"WeakSet\"><a href=\"#WeakSet\" class=\"headerlink\" title=\"WeakSet\"></a>WeakSet</h4><ol>\n<li>成员都是对象</li>\n<li>成员都是弱引用，可以被垃圾回收机制回收，可以用来保存DOM节点，不容易造成内存泄漏</li>\n</ol>\n</li>\n<li><h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4><ol>\n<li>本质上是键值对的集合，类似集合</li>\n<li>可以根遍历，方法很多，可以跟各种数据格式转换</li>\n</ol>\n</li>\n<li><h4 id=\"WeakMap\"><a href=\"#WeakMap\" class=\"headerlink\" title=\"WeakMap\"></a>WeakMap</h4><ol>\n<li>只接受对象作为键名（null除外），不接受其他类型的值作为键名</li>\n<li>键名是弱引用，键值可以使任意的，键名所指的对象可以被垃圾回收，此时键名是无效的</li>\n<li>不能遍历，方法有<code>get</code>、<code>set</code>、<code>has</code>、<code>delete</code></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"Vue的性能优化方法有哪些\"><a href=\"#Vue的性能优化方法有哪些\" class=\"headerlink\" title=\"Vue的性能优化方法有哪些\"></a>Vue的性能优化方法有哪些</h2><ol>\n<li><p>路由懒加载 import方式引入页面</p>\n</li>\n<li><p>keep-alive缓存页面</p>\n</li>\n<li><p>使用v-show复用DOM</p>\n</li>\n<li><p>v-for遍历的同时避免使用v-if（2.x 当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。3.x当 v-if 与 v-for 一起使用时，v-if 具有比 v-for 更高的优先级），可以使用计算属性提前把数组进行过滤</p>\n</li>\n<li><p>长列表性能优化</p>\n<p>如果列表纯粹是显示数据，不会有改变，数据就不需要响应式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default&#123;</span><br><span class=\"line\">\t\tdata()&#123;</span><br><span class=\"line\">\t\t\treturn&#123;</span><br><span class=\"line\">\t\t\t\tlist: []</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tasync created()&#123;</span><br><span class=\"line\">\t\t\tconst &#123;data&#125; = await apiGetList();</span><br><span class=\"line\">\t\t\tthis.list = Object.freeze(data);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用freeze方法进行冻结，或者更改属性为false</p>\n<p>如果是大数据列表，可以用虚拟滚动，只渲染少部分区域内容</p>\n</li>\n<li><p>事件销毁，自定义的循环事件在<code>beforeDestroy</code>钩子函数中销毁</p>\n</li>\n<li><p>图片懒加载，</p>\n</li>\n<li><p>第三方插件按需导入</p>\n</li>\n<li><p>无状态组件标记为函数组件</p>\n</li>\n<li><p>子组件分割，子组件中有一些比较耗时的就单独分割成一个组件，自己做自己的渲染，不会影响其他的组件</p>\n</li>\n<li><p>SSR</p>\n</li>\n</ol>\n<h2 id=\"Vue响应式原理\"><a href=\"#Vue响应式原理\" class=\"headerlink\" title=\"Vue响应式原理\"></a>Vue响应式原理</h2><h3 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty\"></a>Object.defineProperty</h3><p>Vue的响应式原理依赖于<code>Object.defineProperty()</code>，这里简单介绍一下</p>\n<p><code>Object.defineProperty()</code>会直接在对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。调用时直接在<code>Object</code>构造器对象上调用此方法，而不是在任意一个<code>Object</code>实例上调用。语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* obj: 要定义属性的对象</span></span><br><span class=\"line\"><span class=\"comment\">* prop: 要定义或修改的属性的名称或Symbol</span></span><br><span class=\"line\"><span class=\"comment\">* descriptor: 要定义或修改的属性描述符 </span></span><br><span class=\"line\"><span class=\"comment\">*\t\t\t\tvalue:该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 undefined。</span></span><br><span class=\"line\"><span class=\"comment\">*\t\t\t\twritable:当且仅当该属性的 writable 键值为 true 时，属性的值，也就是上面的 value，才能被赋值运算符 (en-US)改变。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tconfigurable</span></span><br><span class=\"line\"><span class=\"comment\">当且仅当该属性的 configurable 键值为 true 时，该属性的描述符才能够被改变，同时该属性也能从对应的对象上被删除。</span></span><br><span class=\"line\"><span class=\"comment\">默认为 false。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tenumerable</span></span><br><span class=\"line\"><span class=\"comment\">当且仅当该属性的 enumerable 键值为 true 时，该属性才会出现在对象的枚举属性中。</span></span><br><span class=\"line\"><span class=\"comment\">默认为 false。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tget</span></span><br><span class=\"line\"><span class=\"comment\">属性的 getter 函数，如果没有 getter，则为 undefined。当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 this 对象（由于继承关系，这里的this并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值。</span></span><br><span class=\"line\"><span class=\"comment\">默认为 undefined。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tset</span></span><br><span class=\"line\"><span class=\"comment\">属性的 setter 函数，如果没有 setter，则为 undefined。当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 this 对象。</span></span><br><span class=\"line\"><span class=\"comment\">默认为 undefined。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">默认为 false。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> object1 = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(object1, <span class=\"string\">&#x27;property1&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"number\">42</span>,</span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">object1.property1 = <span class=\"number\">77</span>;</span><br><span class=\"line\"><span class=\"comment\">// throws an error in strict mode</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(object1.property1);</span><br><span class=\"line\"><span class=\"comment\">// expected output: 42</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Vue2是怎么实现数据双向绑定的\"><a href=\"#Vue2是怎么实现数据双向绑定的\" class=\"headerlink\" title=\"Vue2是怎么实现数据双向绑定的\"></a>Vue2是怎么实现数据双向绑定的</h3><p>首先要对数据进行劫持监听，我们需要设置一个<code>Observer</code>函数，用来监听所有属性的变化。</p>\n<p>如果属性发生了变化，就要告诉订阅者<code>watcher</code>看是否需要更新数据，如果订阅者有多个，则需要一个<code>Dep</code>来收集这些订阅者，然后在监听器<code>observer</code>和<code>watcher</code>之间统一管理。</p>\n<p>还需要一个指令解析器<code>compile</code>，对需要监听的节点和属性进行扫描和解析。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"vue父子组件的执行顺序\"><a href=\"#vue父子组件的执行顺序\" class=\"headerlink\" title=\"vue父子组件的执行顺序\"></a>vue父子组件的执行顺序</h2><p>当父子组件加载时，vue父子组件的生命周期的执行顺序为</p>\n<p><strong>父beforeCreate -&gt; 父created -&gt; 父beforeMount -&gt; 子beforeCreate -&gt; 子created -&gt; 子beforeMount -&gt; 子mounted -&gt; 父mounted</strong></p>\n<p><strong>然后理解下这个顺序：</strong></p>\n<p>1.当父组件执行完beforeMount挂载开始后，会依次执行子组件中的钩子，直到全部子组件mounted挂载到实例上，父组件才会进入mounted钩子</p>\n<p>2.子级触发事件，会先触发父级beforeUpdate钩子，再去触发子级beforeUpdate钩子，下面又是先执行子级updated钩子，后执行父级updated钩子</p>\n<p>总结：</p>\n<p>父组件先于子组件created，而子组件先于父组件mounted</p>\n<p>父子组件加载渲染过程：</p>\n<p>父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted</p>\n<p>子组件更新：父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated</p>\n<p>父组件更新过程：父beforeUpdate-&gt;父updated</p>\n<p>销毁：父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</p>\n<h2 id=\"Vue-data为什么是函数而不是对象？\"><a href=\"#Vue-data为什么是函数而不是对象？\" class=\"headerlink\" title=\"Vue data为什么是函数而不是对象？\"></a>Vue data为什么是函数而不是对象？</h2><p>js的实例是通过构造函数来创建的，每个构造函数都可以new出很多实例，每个实例都会继承原型上的属性和方法。</p>\n<p><strong>vue</strong> 的每一个组件都是一个<strong>vue</strong>实例，<strong>vue</strong>的<strong>data</strong>数据是存在<strong>vue</strong>的原型上的属性，数据存在于内存中。<strong>vue</strong>为了保证数据之间的独立性，规定了<strong>data</strong>必须使用函数定义。如果<strong>data</strong>是一个对象的话，就会组件之间的相互影响，因为对象是对内存地址的引用，也就是说当一个组件的<strong>data</strong>值变化了，在其他组件的<strong>data</strong>值也会跟着变。造成组件之间的相互影响。</p>\n<h2 id=\"‘1’-‘2’-‘3’-map-parseInt-what-amp-why\"><a href=\"#‘1’-‘2’-‘3’-map-parseInt-what-amp-why\" class=\"headerlink\" title=\"[‘1’, ‘2’, ‘3’].map(parseInt) what &amp; why ?\"></a>[‘1’, ‘2’, ‘3’].map(parseInt) what &amp; why ?</h2><p>第一反应是返回[1,2,3],但是真正的答案是<code>[1,NaN,NaN]</code>。问题在于parseInt接受两个参数，第一个是要被解析的值，第二个表示要解析的几进制，map的callback接受三个参数，第一个是当前正在处理的参数，第二个是参数的索引，第三个是map方法调用的数组。这时候会把map的前两个参数传到parseInt的接收的参数中，导致解析的结果为<code>[1,NaN,NaN]</code></p>\n<h2 id=\"Set、Map、WeakSet、和WeakMap的区别？\"><a href=\"#Set、Map、WeakSet、和WeakMap的区别？\" class=\"headerlink\" title=\"Set、Map、WeakSet、和WeakMap的区别？\"></a>Set、Map、WeakSet、和WeakMap的区别？</h2><ul>\n<li><h4 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h4><p>对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</p>\n</li>\n<li><h4 id=\"WeakSet\"><a href=\"#WeakSet\" class=\"headerlink\" title=\"WeakSet\"></a>WeakSet</h4><ol>\n<li>成员都是对象</li>\n<li>成员都是弱引用，可以被垃圾回收机制回收，可以用来保存DOM节点，不容易造成内存泄漏</li>\n</ol>\n</li>\n<li><h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4><ol>\n<li>本质上是键值对的集合，类似集合</li>\n<li>可以根遍历，方法很多，可以跟各种数据格式转换</li>\n</ol>\n</li>\n<li><h4 id=\"WeakMap\"><a href=\"#WeakMap\" class=\"headerlink\" title=\"WeakMap\"></a>WeakMap</h4><ol>\n<li>只接受对象作为键名（null除外），不接受其他类型的值作为键名</li>\n<li>键名是弱引用，键值可以使任意的，键名所指的对象可以被垃圾回收，此时键名是无效的</li>\n<li>不能遍历，方法有<code>get</code>、<code>set</code>、<code>has</code>、<code>delete</code></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"Vue的性能优化方法有哪些\"><a href=\"#Vue的性能优化方法有哪些\" class=\"headerlink\" title=\"Vue的性能优化方法有哪些\"></a>Vue的性能优化方法有哪些</h2><ol>\n<li><p>路由懒加载 import方式引入页面</p>\n</li>\n<li><p>keep-alive缓存页面</p>\n</li>\n<li><p>使用v-show复用DOM</p>\n</li>\n<li><p>v-for遍历的同时避免使用v-if（2.x 当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。3.x当 v-if 与 v-for 一起使用时，v-if 具有比 v-for 更高的优先级），可以使用计算属性提前把数组进行过滤</p>\n</li>\n<li><p>长列表性能优化</p>\n<p>如果列表纯粹是显示数据，不会有改变，数据就不需要响应式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default&#123;</span><br><span class=\"line\">\t\tdata()&#123;</span><br><span class=\"line\">\t\t\treturn&#123;</span><br><span class=\"line\">\t\t\t\tlist: []</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tasync created()&#123;</span><br><span class=\"line\">\t\t\tconst &#123;data&#125; = await apiGetList();</span><br><span class=\"line\">\t\t\tthis.list = Object.freeze(data);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用freeze方法进行冻结，或者更改属性为false</p>\n<p>如果是大数据列表，可以用虚拟滚动，只渲染少部分区域内容</p>\n</li>\n<li><p>事件销毁，自定义的循环事件在<code>beforeDestroy</code>钩子函数中销毁</p>\n</li>\n<li><p>图片懒加载，</p>\n</li>\n<li><p>第三方插件按需导入</p>\n</li>\n<li><p>无状态组件标记为函数组件</p>\n</li>\n<li><p>子组件分割，子组件中有一些比较耗时的就单独分割成一个组件，自己做自己的渲染，不会影响其他的组件</p>\n</li>\n<li><p>SSR</p>\n</li>\n</ol>\n<h2 id=\"Vue响应式原理\"><a href=\"#Vue响应式原理\" class=\"headerlink\" title=\"Vue响应式原理\"></a>Vue响应式原理</h2><h3 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty\"></a>Object.defineProperty</h3><p>Vue的响应式原理依赖于<code>Object.defineProperty()</code>，这里简单介绍一下</p>\n<p><code>Object.defineProperty()</code>会直接在对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。调用时直接在<code>Object</code>构造器对象上调用此方法，而不是在任意一个<code>Object</code>实例上调用。语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* obj: 要定义属性的对象</span></span><br><span class=\"line\"><span class=\"comment\">* prop: 要定义或修改的属性的名称或Symbol</span></span><br><span class=\"line\"><span class=\"comment\">* descriptor: 要定义或修改的属性描述符 </span></span><br><span class=\"line\"><span class=\"comment\">*\t\t\t\tvalue:该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 undefined。</span></span><br><span class=\"line\"><span class=\"comment\">*\t\t\t\twritable:当且仅当该属性的 writable 键值为 true 时，属性的值，也就是上面的 value，才能被赋值运算符 (en-US)改变。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tconfigurable</span></span><br><span class=\"line\"><span class=\"comment\">当且仅当该属性的 configurable 键值为 true 时，该属性的描述符才能够被改变，同时该属性也能从对应的对象上被删除。</span></span><br><span class=\"line\"><span class=\"comment\">默认为 false。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tenumerable</span></span><br><span class=\"line\"><span class=\"comment\">当且仅当该属性的 enumerable 键值为 true 时，该属性才会出现在对象的枚举属性中。</span></span><br><span class=\"line\"><span class=\"comment\">默认为 false。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tget</span></span><br><span class=\"line\"><span class=\"comment\">属性的 getter 函数，如果没有 getter，则为 undefined。当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 this 对象（由于继承关系，这里的this并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值。</span></span><br><span class=\"line\"><span class=\"comment\">默认为 undefined。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tset</span></span><br><span class=\"line\"><span class=\"comment\">属性的 setter 函数，如果没有 setter，则为 undefined。当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 this 对象。</span></span><br><span class=\"line\"><span class=\"comment\">默认为 undefined。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">默认为 false。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> object1 = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(object1, <span class=\"string\">&#x27;property1&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"number\">42</span>,</span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">object1.property1 = <span class=\"number\">77</span>;</span><br><span class=\"line\"><span class=\"comment\">// throws an error in strict mode</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(object1.property1);</span><br><span class=\"line\"><span class=\"comment\">// expected output: 42</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Vue2是怎么实现数据双向绑定的\"><a href=\"#Vue2是怎么实现数据双向绑定的\" class=\"headerlink\" title=\"Vue2是怎么实现数据双向绑定的\"></a>Vue2是怎么实现数据双向绑定的</h3><p>首先要对数据进行劫持监听，我们需要设置一个<code>Observer</code>函数，用来监听所有属性的变化。</p>\n<p>如果属性发生了变化，就要告诉订阅者<code>watcher</code>看是否需要更新数据，如果订阅者有多个，则需要一个<code>Dep</code>来收集这些订阅者，然后在监听器<code>observer</code>和<code>watcher</code>之间统一管理。</p>\n<p>还需要一个指令解析器<code>compile</code>，对需要监听的节点和属性进行扫描和解析。</p>\n"},{"title":"JS的Proxy笔记","date":"2021-04-23T04:00:00.000Z","cover":"https://img.showydream.com/img/ZrtTjb-javascript.jpg","description":"了解一下Proxy","keywords":"Proxy","_content":"\n## 概述\n\n​\t\tProxy用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种**元编程**（meta programming），即对编程语言进行编程。\n\n​\t\tProxy可以理解成，在目标对象之前架设一层”拦截“，外界对该对象的访问，都必须通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy这个词的原意是代理，用在这里表示由它来”代理“某些操作，可以译为”代理器”。\n\n​\t\t翻译成大白话就是：Proxy可以改变对象的默认操作。\n\nProxy中需要理解的三个属性：\n\n- **target**：an Object which the proxy virtualizes. （目标对象）\n- **Handler**：a Placeholder Object which contains traps. （包含重写方法的对象）\n- **trap**：the Method that provide property accss of the target object. （重写的方法，比如get和set）\n\n### 可拦截操作\n\n其中**trap**可支持拦截的操作一共13种：\n\n- **get(target, propKey, receiver)**：拦截对象属性的读取，比如`proxy.foo`和`proxy['foo']`。\n- **set(target, propKey, value, receiver)**：拦截对象属性的设置，比如`proxy.foo = v`或`proxy['foo'] = 123`，返回一个布尔值。\n- **has(target, propKey)**：拦截`propKey in proxy`的操作，返回一个布尔值。\n- **deleteProperty(target, propKey)**：拦截`delete proxy[propKey]`的操作，返回一个布尔值。\n- **ownKeys(target)**：拦截`Object.getOwnPropertyNames(proxy)`、`Object.getOwnPropertySysmbols(proxy)`、`Object.keys(proxy)`、`for...in`循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而`Object.keys()`的返回结果仅包括目标对象自身的可遍历属性。\n- **getOwnPropertyDescriptor(target, propKey)**：拦截`Object.getOwnPropertyDescriptor(proxy, propKey)`，返回属性的描述对象。\n- **defineProperty(target, propKey, propDesc)**：拦截`Object.defineProperty(proxy, propKey, propDesc）`、`Object.defineProperties(proxy, propDescs)`，返回一个布尔值。\n- **preventExtensions(target)**：拦截`Object.preventExtensions(proxy)`，返回一个布尔值。\n- **getPrototypeOf(target)**：拦截`Object.getPrototypeOf(proxy)`，返回一个对象。\n- **isExtensible(target)**：拦截`Object.isExtensible(proxy)`，返回一个布尔值。\n- **setPrototypeOf(target, proto)**：拦截`Object.setPrototypeOf(proxy, proto)`，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。\n- **apply(target, object, args)**：拦截 Proxy 实例作为函数调用的操作，比如`proxy(...args)`、`proxy.call(object, ...args)`、`proxy.apply(...)`。\n- **construct(target, args)**：拦截 Proxy 实例作为构造函数调用的操作，比如`new proxy(...args)`。\n\n## 例子\n\n### get()\n\n`get`方法用于拦截某个属性的读取操作，可以接受三个参数，依次为目标对象、属性名和 proxy 实例本身（严格地说，是操作行为所针对的对象），其中最后一个参数可选。\n\n`get`方法的用法，上文已经有一个例子，下面是另一个拦截读取操作的例子。\n\n```javascript\nvar person = {\n  name: \"张三\"\n};\n\nvar proxy = new Proxy(person, {\n  get: function(target, propKey) {\n    if (propKey in target) {\n      return target[propKey];\n    } else {\n      throw new ReferenceError(\"Prop name \\\"\" + propKey + \"\\\" does not exist.\");\n    }\n  }\n});\n\nproxy.name // \"张三\"\nproxy.age // 抛出一个错误\n```\n\n上面代码表示，如果访问目标对象不存在的属性，会抛出一个错误。如果没有这个拦截函数，访问不存在的属性，只会返回`undefined`。\n\n`get`方法可以继承。\n\n```javascript\nlet proto = new Proxy({}, {\n  get(target, propertyKey, receiver) {\n    console.log('GET ' + propertyKey);\n    return target[propertyKey];\n  }\n});\n\nlet obj = Object.create(proto);\nobj.foo // \"GET foo\"\n```\n\n上面代码中，拦截操作定义在`Prototype`对象上面，所以如果读取`obj`对象继承的属性时，拦截会生效。\n\n下面的例子使用`get`拦截，实现数组读取负数的索引。\n\n```javascript\nfunction createArray(...elements) {\n  let handler = {\n    get(target, propKey, receiver) {\n      let index = Number(propKey);\n      if (index < 0) {\n        propKey = String(target.length + index);\n      }\n      return Reflect.get(target, propKey, receiver);\n    }\n  };\n\n  let target = [];\n  target.push(...elements);\n  return new Proxy(target, handler);\n}\n\nlet arr = createArray('a', 'b', 'c');\narr[-1] // c\n```\n\n上面代码中，数组的位置参数是`-1`，就会输出数组的倒数第一个成员。\n\n利用 Proxy，可以将读取属性的操作（`get`），转变为执行某个函数，从而实现属性的链式操作。\n\n```javascript\nvar pipe = function (value) {\n  var funcStack = [];\n  var oproxy = new Proxy({} , {\n    get : function (pipeObject, fnName) {\n      if (fnName === 'get') {\n        return funcStack.reduce(function (val, fn) {\n          return fn(val);\n        },value);\n      }\n      funcStack.push(window[fnName]);\n      return oproxy;\n    }\n  });\n\n  return oproxy;\n}\n\nvar double = n => n * 2;\nvar pow    = n => n * n;\nvar reverseInt = n => n.toString().split(\"\").reverse().join(\"\") | 0;\n\npipe(3).double.pow.reverseInt.get; // 63\n```\n\n上面代码设置 Proxy 以后，达到了将函数名链式使用的效果。\n\n下面的例子则是利用`get`拦截，实现一个生成各种 DOM 节点的通用函数`dom`。\n\n```javascript\nconst dom = new Proxy({}, {\n  get(target, property) {\n    return function(attrs = {}, ...children) {\n      const el = document.createElement(property);\n      for (let prop of Object.keys(attrs)) {\n        el.setAttribute(prop, attrs[prop]);\n      }\n      for (let child of children) {\n        if (typeof child === 'string') {\n          child = document.createTextNode(child);\n        }\n        el.appendChild(child);\n      }\n      return el;\n    }\n  }\n});\n\nconst el = dom.div({},\n  'Hello, my name is ',\n  dom.a({href: '//example.com'}, 'Mark'),\n  '. I like:',\n  dom.ul({},\n    dom.li({}, 'The web'),\n    dom.li({}, 'Food'),\n    dom.li({}, '…actually that\\'s it')\n  )\n);\n\ndocument.body.appendChild(el);\n```\n\n下面是一个`get`方法的第三个参数的例子，它总是指向原始的读操作所在的那个对象，一般情况下就是 Proxy 实例。\n\n```javascript\nconst proxy = new Proxy({}, {\n  get: function(target, key, receiver) {\n    return receiver;\n  }\n});\nproxy.getReceiver === proxy // true\n```\n\n上面代码中，`proxy`对象的`getReceiver`属性是由`proxy`对象提供的，所以`receiver`指向`proxy`对象。\n\n```javascript\nconst proxy = new Proxy({}, {\n  get: function(target, key, receiver) {\n    return receiver;\n  }\n});\n\nconst d = Object.create(proxy);\nd.a === d // true\n```\n\n上面代码中，`d`对象本身没有`a`属性，所以读取`d.a`的时候，会去`d`的原型`proxy`对象找。这时，`receiver`就指向`d`，代表原始的读操作所在的那个对象。\n\n如果一个属性不可配置（configurable）且不可写（writable），则 Proxy 不能修改该属性，否则通过 Proxy 对象访问该属性会报错。\n\n```javascript\nconst target = Object.defineProperties({}, {\n  foo: {\n    value: 123,\n    writable: false,\n    configurable: false\n  },\n});\n\nconst handler = {\n  get(target, propKey) {\n    return 'abc';\n  }\n};\n\nconst proxy = new Proxy(target, handler);\n\nproxy.foo\n// TypeError: Invariant check failed\n```\n\n### set()\n\n`set`方法用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和 Proxy 实例本身，其中最后一个参数可选。\n\n假定`Person`对象有一个`age`属性，该属性应该是一个不大于 200 的整数，那么可以使用`Proxy`保证`age`的属性值符合要求。\n\n```javascript\nlet validator = {\n  set: function(obj, prop, value) {\n    if (prop === 'age') {\n      if (!Number.isInteger(value)) {\n        throw new TypeError('The age is not an integer');\n      }\n      if (value > 200) {\n        throw new RangeError('The age seems invalid');\n      }\n    }\n\n    // 对于满足条件的 age 属性以及其他属性，直接保存\n    obj[prop] = value;\n    return true;\n  }\n};\n\nlet person = new Proxy({}, validator);\n\nperson.age = 100;\n\nperson.age // 100\nperson.age = 'young' // 报错\nperson.age = 300 // 报错\n```\n\n上面代码中，由于设置了存值函数`set`，任何不符合要求的`age`属性赋值，都会抛出一个错误，这是数据验证的一种实现方法。利用`set`方法，还可以数据绑定，即每当对象发生变化时，会自动更新 DOM。\n\n有时，我们会在对象上面设置内部属性，属性名的第一个字符使用下划线开头，表示这些属性不应该被外部使用。结合`get`和`set`方法，就可以做到防止这些内部属性被外部读写。\n\n```javascript\nconst handler = {\n  get (target, key) {\n    invariant(key, 'get');\n    return target[key];\n  },\n  set (target, key, value) {\n    invariant(key, 'set');\n    target[key] = value;\n    return true;\n  }\n};\nfunction invariant (key, action) {\n  if (key[0] === '_') {\n    throw new Error(`Invalid attempt to ${action} private \"${key}\" property`);\n  }\n}\nconst target = {};\nconst proxy = new Proxy(target, handler);\nproxy._prop\n// Error: Invalid attempt to get private \"_prop\" property\nproxy._prop = 'c'\n// Error: Invalid attempt to set private \"_prop\" property\n```\n\n上面代码中，只要读写的属性名的第一个字符是下划线，一律抛错，从而达到禁止读写内部属性的目的。\n\n下面是`set`方法第四个参数的例子。\n\n```javascript\nconst handler = {\n  set: function(obj, prop, value, receiver) {\n    obj[prop] = receiver;\n    return true;\n  }\n};\nconst proxy = new Proxy({}, handler);\nproxy.foo = 'bar';\nproxy.foo === proxy // true\n```\n\n上面代码中，`set`方法的第四个参数`receiver`，指的是原始的操作行为所在的那个对象，一般情况下是`proxy`实例本身，请看下面的例子。\n\n```javascript\nconst handler = {\n  set: function(obj, prop, value, receiver) {\n    obj[prop] = receiver;\n    return true;\n  }\n};\nconst proxy = new Proxy({}, handler);\nconst myObj = {};\nObject.setPrototypeOf(myObj, proxy);\n\nmyObj.foo = 'bar';\nmyObj.foo === myObj // true\n```\n\n上面代码中，设置`myObj.foo`属性的值时，`myObj`并没有`foo`属性，因此引擎会到`myObj`的原型链去找`foo`属性。`myObj`的原型对象`proxy`是一个 Proxy 实例，设置它的`foo`属性会触发`set`方法。这时，第四个参数`receiver`就指向原始赋值行为所在的对象`myObj`。\n\n注意，如果目标对象自身的某个属性不可写，那么`set`方法将不起作用。\n\n```javascript\nconst obj = {};\nObject.defineProperty(obj, 'foo', {\n  value: 'bar',\n  writable: false\n});\n\nconst handler = {\n  set: function(obj, prop, value, receiver) {\n    obj[prop] = 'baz';\n    return true;\n  }\n};\n\nconst proxy = new Proxy(obj, handler);\nproxy.foo = 'baz';\nproxy.foo // \"bar\"\n```\n\n上面代码中，`obj.foo`属性不可写，Proxy 对这个属性的`set`代理将不会生效。\n\n注意，`set`代理应当返回一个布尔值。严格模式下，`set`代理如果没有返回`true`，就会报错。\n\n```javascript\n'use strict';\nconst handler = {\n  set: function(obj, prop, value, receiver) {\n    obj[prop] = receiver;\n    // 无论有没有下面这一行，都会报错\n    return false;\n  }\n};\nconst proxy = new Proxy({}, handler);\nproxy.foo = 'bar';\n// TypeError: 'set' on proxy: trap returned falsish for property 'foo'\n```\n\n上面代码中，严格模式下，`set`代理返回`false`或者`undefined`，都会报错。\n\n### apply()\n\n`apply`方法拦截函数的调用、`call`和`apply`操作。\n\n`apply`方法可以接受三个参数，分别是目标对象、目标对象的上下文对象（`this`）和目标对象的参数数组。\n\n```javascript\nvar handler = {\n  apply (target, ctx, args) {\n    return Reflect.apply(...arguments);\n  }\n};\n```\n\n下面是一个例子。\n\n```javascript\nvar target = function () { return 'I am the target'; };\nvar handler = {\n  apply: function () {\n    return 'I am the proxy';\n  }\n};\n\nvar p = new Proxy(target, handler);\n\np()\n// \"I am the proxy\"\n```\n\n上面代码中，变量`p`是 Proxy 的实例，当它作为函数调用时（`p()`），就会被`apply`方法拦截，返回一个字符串。\n\n下面是另外一个例子。\n\n```javascript\nvar twice = {\n  apply (target, ctx, args) {\n    return Reflect.apply(...arguments) * 2;\n  }\n};\nfunction sum (left, right) {\n  return left + right;\n};\nvar proxy = new Proxy(sum, twice);\nproxy(1, 2) // 6\nproxy.call(null, 5, 6) // 22\nproxy.apply(null, [7, 8]) // 30\n```\n\n上面代码中，每当执行`proxy`函数（直接调用或`call`和`apply`调用），就会被`apply`方法拦截。\n\n另外，直接调用`Reflect.apply`方法，也会被拦截。\n\n```javascript\nReflect.apply(proxy, null, [9, 10]) // 38\n```\n\n### has()\n\n`has()`方法用来拦截`HasProperty`操作，即判断对象是否具有某个属性时，这个方法会生效。典型的操作就是`in`运算符。\n\n`has()`方法可以接受两个参数，分别是目标对象、需查询的属性名。\n\n下面的例子使用`has()`方法隐藏某些属性，不被`in`运算符发现。\n\n```javascript\nvar handler = {\n  has (target, key) {\n    if (key[0] === '_') {\n      return false;\n    }\n    return key in target;\n  }\n};\nvar target = { _prop: 'foo', prop: 'foo' };\nvar proxy = new Proxy(target, handler);\n'_prop' in proxy // false\n```\n\n上面代码中，如果原对象的属性名的第一个字符是下划线，`proxy.has()`就会返回`false`，从而不会被`in`运算符发现。\n\n如果原对象不可配置或者禁止扩展，这时`has()`拦截会报错。\n\n```javascript\nvar obj = { a: 10 };\nObject.preventExtensions(obj);\n\nvar p = new Proxy(obj, {\n  has: function(target, prop) {\n    return false;\n  }\n});\n\n'a' in p // TypeError is thrown\n```\n\n上面代码中，`obj`对象禁止扩展，结果使用`has`拦截就会报错。也就是说，如果某个属性不可配置（或者目标对象不可扩展），则`has()`方法就不得“隐藏”（即返回`false`）目标对象的该属性。\n\n值得注意的是，`has()`方法拦截的是`HasProperty`操作，而不是`HasOwnProperty`操作，即`has()`方法不判断一个属性是对象自身的属性，还是继承的属性。\n\n另外，虽然`for...in`循环也用到了`in`运算符，但是`has()`拦截对`for...in`循环不生效。\n\n```javascript\nlet stu1 = {name: '张三', score: 59};\nlet stu2 = {name: '李四', score: 99};\n\nlet handler = {\n  has(target, prop) {\n    if (prop === 'score' && target[prop] < 60) {\n      console.log(`${target.name} 不及格`);\n      return false;\n    }\n    return prop in target;\n  }\n}\n\nlet oproxy1 = new Proxy(stu1, handler);\nlet oproxy2 = new Proxy(stu2, handler);\n\n'score' in oproxy1\n// 张三 不及格\n// false\n\n'score' in oproxy2\n// true\n\nfor (let a in oproxy1) {\n  console.log(oproxy1[a]);\n}\n// 张三\n// 59\n\nfor (let b in oproxy2) {\n  console.log(oproxy2[b]);\n}\n// 李四\n// 99\n```\n\n上面代码中，`has()`拦截只对`in`运算符生效，对`for...in`循环不生效，导致不符合要求的属性没有被`for...in`循环所排除。\n\n### construct()\n\n`construct()`方法用于拦截`new`命令，下面是拦截对象的写法。\n\n```javascript\nconst handler = {\n  construct (target, args, newTarget) {\n    return new target(...args);\n  }\n};\n```\n\n`construct()`方法可以接受三个参数。\n\n- `target`：目标对象。\n- `args`：构造函数的参数数组。\n- `newTarget`：创造实例对象时，`new`命令作用的构造函数（下面例子的`p`）。\n\n```javascript\nconst p = new Proxy(function () {}, {\n  construct: function(target, args) {\n    console.log('called: ' + args.join(', '));\n    return { value: args[0] * 10 };\n  }\n});\n\n(new p(1)).value\n// \"called: 1\"\n// 10\n```\n\n`construct()`方法返回的必须是一个对象，否则会报错。\n\n```javascript\nconst p = new Proxy(function() {}, {\n  construct: function(target, argumentsList) {\n    return 1;\n  }\n});\n\nnew p() // 报错\n// Uncaught TypeError: 'construct' on proxy: trap returned non-object ('1')\n```\n\n另外，由于`construct()`拦截的是构造函数，所以它的目标对象必须是函数，否则就会报错。\n\n```javascript\nconst p = new Proxy({}, {\n  construct: function(target, argumentsList) {\n    return {};\n  }\n});\n\nnew p() // 报错\n// Uncaught TypeError: p is not a constructor\n```\n\n上面例子中，拦截的目标对象不是一个函数，而是一个对象（`new Proxy()`的第一个参数），导致报错。\n\n注意，`construct()`方法中的`this`指向的是`handler`，而不是实例对象。\n\n```javascript\nconst handler = {\n  construct: function(target, args) {\n    console.log(this === handler);\n    return new target(...args);\n  }\n}\n\nlet p = new Proxy(function () {}, handler);\nnew p() // true\n```\n\n### deleteProperty()\n\n`deleteProperty`方法用于拦截`delete`操作，如果这个方法抛出错误或者返回`false`，当前属性就无法被`delete`命令删除。\n\n```javascript\nvar handler = {\n  deleteProperty (target, key) {\n    invariant(key, 'delete');\n    delete target[key];\n    return true;\n  }\n};\nfunction invariant (key, action) {\n  if (key[0] === '_') {\n    throw new Error(`Invalid attempt to ${action} private \"${key}\" property`);\n  }\n}\n\nvar target = { _prop: 'foo' };\nvar proxy = new Proxy(target, handler);\ndelete proxy._prop\n// Error: Invalid attempt to delete private \"_prop\" property\n```\n\n上面代码中，`deleteProperty`方法拦截了`delete`操作符，删除第一个字符为下划线的属性会报错。\n\n注意，目标对象自身的不可配置（configurable）的属性，不能被`deleteProperty`方法删除，否则报错。\n\n### defineProperty()\n\n`defineProperty()`方法拦截了`Object.defineProperty()`操作。\n\n```javascript\nvar handler = {\n  defineProperty (target, key, descriptor) {\n    return false;\n  }\n};\nvar target = {};\nvar proxy = new Proxy(target, handler);\nproxy.foo = 'bar' // 不会生效\n```\n\n上面代码中，`defineProperty()`方法内部没有任何操作，只返回`false`，导致添加新属性总是无效。注意，这里的`false`只是用来提示操作失败，本身并不能阻止添加新属性。\n\n注意，如果目标对象不可扩展（non-extensible），则`defineProperty()`不能增加目标对象上不存在的属性，否则会报错。另外，如果目标对象的某个属性不可写（writable）或不可配置（configurable），则`defineProperty()`方法不得改变这两个设置。\n\n### getOwnPropertyDescriptor()\n\n`getOwnPropertyDescriptor()`方法拦截`Object.getOwnPropertyDescriptor()`，返回一个属性描述对象或者`undefined`。\n\n```javascript\nvar handler = {\n  getOwnPropertyDescriptor (target, key) {\n    if (key[0] === '_') {\n      return;\n    }\n    return Object.getOwnPropertyDescriptor(target, key);\n  }\n};\nvar target = { _foo: 'bar', baz: 'tar' };\nvar proxy = new Proxy(target, handler);\nObject.getOwnPropertyDescriptor(proxy, 'wat')\n// undefined\nObject.getOwnPropertyDescriptor(proxy, '_foo')\n// undefined\nObject.getOwnPropertyDescriptor(proxy, 'baz')\n// { value: 'tar', writable: true, enumerable: true, configurable: true }\n```\n\n上面代码中，`handler.getOwnPropertyDescriptor()`方法对于第一个字符为下划线的属性名会返回`undefined`。\n\n### getPrototypeOf()\n\n`getPrototypeOf()`方法主要用来拦截获取对象原型。具体来说，拦截下面这些操作。\n\n- `Object.prototype.__proto__`\n- `Object.prototype.isPrototypeOf()`\n- `Object.getPrototypeOf()`\n- `Reflect.getPrototypeOf()`\n- `instanceof`\n\n下面是一个例子。\n\n```javascript\nvar proto = {};\nvar p = new Proxy({}, {\n  getPrototypeOf(target) {\n    return proto;\n  }\n});\nObject.getPrototypeOf(p) === proto // true\n```\n\n上面代码中，`getPrototypeOf()`方法拦截`Object.getPrototypeOf()`，返回`proto`对象。\n\n注意，`getPrototypeOf()`方法的返回值必须是对象或者`null`，否则报错。另外，如果目标对象不可扩展（non-extensible）， `getPrototypeOf()`方法必须返回目标对象的原型对象。\n\n### isExtensible()\n\n`isExtensible()`方法拦截`Object.isExtensible()`操作。\n\n```javascript\nvar p = new Proxy({}, {\n  isExtensible: function(target) {\n    console.log(\"called\");\n    return true;\n  }\n});\n\nObject.isExtensible(p)\n// \"called\"\n// true\n```\n\n上面代码设置了`isExtensible()`方法，在调用`Object.isExtensible`时会输出`called`。\n\n注意，该方法只能返回布尔值，否则返回值会被自动转为布尔值。\n\n这个方法有一个强限制，它的返回值必须与目标对象的`isExtensible`属性保持一致，否则就会抛出错误。\n\n```javascript\nObject.isExtensible(proxy) === Object.isExtensible(target)\n```\n\n下面是一个例子。\n\n```javascript\nvar p = new Proxy({}, {\n  isExtensible: function(target) {\n    return false;\n  }\n});\n\nObject.isExtensible(p)\n// Uncaught TypeError: 'isExtensible' on proxy: trap result does not reflect extensibility of proxy target (which is 'true')\n```\n\n### ownKeys()\n\n`ownKeys()`方法用来拦截对象自身属性的读取操作。具体来说，拦截以下操作。\n\n- `Object.getOwnPropertyNames()`\n- `Object.getOwnPropertySymbols()`\n- `Object.keys()`\n- `for...in`循环\n\n下面是拦截`Object.keys()`的例子。\n\n```javascript\nlet target = {\n  a: 1,\n  b: 2,\n  c: 3\n};\n\nlet handler = {\n  ownKeys(target) {\n    return ['a'];\n  }\n};\n\nlet proxy = new Proxy(target, handler);\n\nObject.keys(proxy)\n// [ 'a' ]\n```\n\n上面代码拦截了对于`target`对象的`Object.keys()`操作，只返回`a`、`b`、`c`三个属性之中的`a`属性。\n\n下面的例子是拦截第一个字符为下划线的属性名。\n\n```javascript\nlet target = {\n  _bar: 'foo',\n  _prop: 'bar',\n  prop: 'baz'\n};\n\nlet handler = {\n  ownKeys (target) {\n    return Reflect.ownKeys(target).filter(key => key[0] !== '_');\n  }\n};\n\nlet proxy = new Proxy(target, handler);\nfor (let key of Object.keys(proxy)) {\n  console.log(target[key]);\n}\n// \"baz\"\n```\n\n注意，使用`Object.keys()`方法时，有三类属性会被`ownKeys()`方法自动过滤，不会返回。\n\n- 目标对象上不存在的属性\n- 属性名为 Symbol 值\n- 不可遍历（`enumerable`）的属性\n\n```javascript\nlet target = {\n  a: 1,\n  b: 2,\n  c: 3,\n  [Symbol.for('secret')]: '4',\n};\n\nObject.defineProperty(target, 'key', {\n  enumerable: false,\n  configurable: true,\n  writable: true,\n  value: 'static'\n});\n\nlet handler = {\n  ownKeys(target) {\n    return ['a', 'd', Symbol.for('secret'), 'key'];\n  }\n};\n\nlet proxy = new Proxy(target, handler);\n\nObject.keys(proxy)\n// ['a']\n```\n\n上面代码中，`ownKeys()`方法之中，显式返回不存在的属性（`d`）、Symbol 值（`Symbol.for('secret')`）、不可遍历的属性（`key`），结果都被自动过滤掉。\n\n`ownKeys()`方法还可以拦截`Object.getOwnPropertyNames()`。\n\n```javascript\nvar p = new Proxy({}, {\n  ownKeys: function(target) {\n    return ['a', 'b', 'c'];\n  }\n});\n\nObject.getOwnPropertyNames(p)\n// [ 'a', 'b', 'c' ]\n```\n\n`for...in`循环也受到`ownKeys()`方法的拦截。\n\n```javascript\nconst obj = { hello: 'world' };\nconst proxy = new Proxy(obj, {\n  ownKeys: function () {\n    return ['a', 'b'];\n  }\n});\n\nfor (let key in proxy) {\n  console.log(key); // 没有任何输出\n}\n```\n\n上面代码中，`ownkeys()`指定只返回`a`和`b`属性，由于`obj`没有这两个属性，因此`for...in`循环不会有任何输出。\n\n`ownKeys()`方法返回的数组成员，只能是字符串或 Symbol 值。如果有其他类型的值，或者返回的根本不是数组，就会报错。\n\n```javascript\nvar obj = {};\n\nvar p = new Proxy(obj, {\n  ownKeys: function(target) {\n    return [123, true, undefined, null, {}, []];\n  }\n});\n\nObject.getOwnPropertyNames(p)\n// Uncaught TypeError: 123 is not a valid property name\n```\n\n上面代码中，`ownKeys()`方法虽然返回一个数组，但是每一个数组成员都不是字符串或 Symbol 值，因此就报错了。\n\n如果目标对象自身包含不可配置的属性，则该属性必须被`ownKeys()`方法返回，否则报错。\n\n```javascript\nvar obj = {};\nObject.defineProperty(obj, 'a', {\n  configurable: false,\n  enumerable: true,\n  value: 10 }\n);\n\nvar p = new Proxy(obj, {\n  ownKeys: function(target) {\n    return ['b'];\n  }\n});\n\nObject.getOwnPropertyNames(p)\n// Uncaught TypeError: 'ownKeys' on proxy: trap result did not include 'a'\n```\n\n上面代码中，`obj`对象的`a`属性是不可配置的，这时`ownKeys()`方法返回的数组之中，必须包含`a`，否则会报错。\n\n另外，如果目标对象是不可扩展的（non-extensible），这时`ownKeys()`方法返回的数组之中，必须包含原对象的所有属性，且不能包含多余的属性，否则报错。\n\n```javascript\nvar obj = {\n  a: 1\n};\n\nObject.preventExtensions(obj);\n\nvar p = new Proxy(obj, {\n  ownKeys: function(target) {\n    return ['a', 'b'];\n  }\n});\n\nObject.getOwnPropertyNames(p)\n// Uncaught TypeError: 'ownKeys' on proxy: trap returned extra keys but proxy target is non-extensible\n```\n\n上面代码中，`obj`对象是不可扩展的，这时`ownKeys()`方法返回的数组之中，包含了`obj`对象的多余属性`b`，所以导致了报错。\n\n### preventExtensions()\n\n`preventExtensions()`方法拦截`Object.preventExtensions()`。该方法必须返回一个布尔值，否则会被自动转为布尔值。\n\n这个方法有一个限制，只有目标对象不可扩展时（即`Object.isExtensible(proxy)`为`false`），`proxy.preventExtensions`才能返回`true`，否则会报错。\n\n```javascript\nvar proxy = new Proxy({}, {\n  preventExtensions: function(target) {\n    return true;\n  }\n});\n\nObject.preventExtensions(proxy)\n// Uncaught TypeError: 'preventExtensions' on proxy: trap returned truish but the proxy target is extensible\n```\n\n上面代码中，`proxy.preventExtensions()`方法返回`true`，但这时`Object.isExtensible(proxy)`会返回`true`，因此报错。\n\n为了防止出现这个问题，通常要在`proxy.preventExtensions()`方法里面，调用一次`Object.preventExtensions()`。\n\n```javascript\nvar proxy = new Proxy({}, {\n  preventExtensions: function(target) {\n    console.log('called');\n    Object.preventExtensions(target);\n    return true;\n  }\n});\n\nObject.preventExtensions(proxy)\n// \"called\"\n// Proxy {}\n```\n\n### setPrototypeOf()\n\n`setPrototypeOf()`方法主要用来拦截`Object.setPrototypeOf()`方法。\n\n下面是一个例子。\n\n```javascript\nvar handler = {\n  setPrototypeOf (target, proto) {\n    throw new Error('Changing the prototype is forbidden');\n  }\n};\nvar proto = {};\nvar target = function () {};\nvar proxy = new Proxy(target, handler);\nObject.setPrototypeOf(proxy, proto);\n// Error: Changing the prototype is forbidden\n```\n\n上面代码中，只要修改`target`的原型对象，就会报错。\n\n注意，该方法只能返回布尔值，否则会被自动转为布尔值。另外，如果目标对象不可扩展（non-extensible），`setPrototypeOf()`方法不得改变目标对象的原型。\n\n## Proxy.revocable()\n\n`Proxy.revocable()`方法返回一个可取消的 Proxy 实例。\n\n```javascript\nlet target = {};\nlet handler = {};\n\nlet {proxy, revoke} = Proxy.revocable(target, handler);\n\nproxy.foo = 123;\nproxy.foo // 123\n\nrevoke();\nproxy.foo // TypeError: Revoked\n```\n\n`Proxy.revocable()`方法返回一个对象，该对象的`proxy`属性是`Proxy`实例，`revoke`属性是一个函数，可以取消`Proxy`实例。上面代码中，当执行`revoke`函数之后，再访问`Proxy`实例，就会抛出一个错误。\n\n`Proxy.revocable()`的一个使用场景是，目标对象不允许直接访问，必须通过代理访问，一旦访问结束，就收回代理权，不允许再次访问。\n\n## this 问题\n\n虽然 Proxy 可以代理针对目标对象的访问，但它不是目标对象的透明代理，即不做任何拦截的情况下，也无法保证与目标对象的行为一致。主要原因就是在 Proxy 代理的情况下，目标对象内部的`this`关键字会指向 Proxy 代理。\n\n```javascript\nconst target = {\n  m: function () {\n    console.log(this === proxy);\n  }\n};\nconst handler = {};\n\nconst proxy = new Proxy(target, handler);\n\ntarget.m() // false\nproxy.m()  // true\n```\n\n上面代码中，一旦`proxy`代理`target`，`target.m()`内部的`this`就是指向`proxy`，而不是`target`。\n\n下面是一个例子，由于`this`指向的变化，导致 Proxy 无法代理目标对象。\n\n```javascript\nconst _name = new WeakMap();\n\nclass Person {\n  constructor(name) {\n    _name.set(this, name);\n  }\n  get name() {\n    return _name.get(this);\n  }\n}\n\nconst jane = new Person('Jane');\njane.name // 'Jane'\n\nconst proxy = new Proxy(jane, {});\nproxy.name // undefined\n```\n\n上面代码中，目标对象`jane`的`name`属性，实际保存在外部`WeakMap`对象`_name`上面，通过`this`键区分。由于通过`proxy.name`访问时，`this`指向`proxy`，导致无法取到值，所以返回`undefined`。\n\n此外，有些原生对象的内部属性，只有通过正确的`this`才能拿到，所以 Proxy 也无法代理这些原生对象的属性。\n\n```javascript\nconst target = new Date();\nconst handler = {};\nconst proxy = new Proxy(target, handler);\n\nproxy.getDate();\n// TypeError: this is not a Date object.\n```\n\n上面代码中，`getDate()`方法只能在`Date`对象实例上面拿到，如果`this`不是`Date`对象实例就会报错。这时，`this`绑定原始对象，就可以解决这个问题。\n\n```javascript\nconst target = new Date('2015-01-01');\nconst handler = {\n  get(target, prop) {\n    if (prop === 'getDate') {\n      return target.getDate.bind(target);\n    }\n    return Reflect.get(target, prop);\n  }\n};\nconst proxy = new Proxy(target, handler);\n\nproxy.getDate() // 1\n```\n\n另外，Proxy 拦截函数内部的`this`，指向的是`handler`对象。\n\n```javascript\nconst handler = {\n  get: function (target, key, receiver) {\n    console.log(this === handler);\n    return 'Hello, ' + key;\n  },\n  set: function (target, key, value) {\n    console.log(this === handler);\n    target[key] = value;\n    return true;\n  }\n};\n\nconst proxy = new Proxy({}, handler);\n\nproxy.foo\n// true\n// Hello, foo\n\nproxy.foo = 1\n// true\n```\n\n上面例子中，`get()`和`set()`拦截函数内部的`this`，指向的都是`handler`对象。\n\n## 实例：Web 服务的客户端\n\nProxy 对象可以拦截目标对象的任意属性，这使得它很合适用来写 Web 服务的客户端。\n\n```javascript\nconst service = createWebService('http://example.com/data');\n\nservice.employees().then(json => {\n  const employees = JSON.parse(json);\n  // ···\n});\n```\n\n上面代码新建了一个 Web 服务的接口，这个接口返回各种数据。Proxy 可以拦截这个对象的任意属性，所以不用为每一种数据写一个适配方法，只要写一个 Proxy 拦截就可以了。\n\n```javascript\nfunction createWebService(baseUrl) {\n  return new Proxy({}, {\n    get(target, propKey, receiver) {\n      return () => httpGet(baseUrl + '/' + propKey);\n    }\n  });\n}\n```\n\n同理，Proxy 也可以用来实现数据库的 ORM 层。\n\n## ps\n\n以上内容均来自阮一峰老师的[《ESMAScript6 入门》Proxy](https://es6.ruanyifeng.com/#docs/proxy)一章，抄下来为了方便翻阅。\n","source":"_posts/JS的Proxy笔记.md","raw":"---\ntitle: JS的Proxy笔记\ndate: 2021-4-23 12:00:00\ncover: https://img.showydream.com/img/ZrtTjb-javascript.jpg\ndescription: 了解一下Proxy\nkeywords: Proxy\ntags: JS的Proxy笔记\ncategories: \n - Javascript\n---\n\n## 概述\n\n​\t\tProxy用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种**元编程**（meta programming），即对编程语言进行编程。\n\n​\t\tProxy可以理解成，在目标对象之前架设一层”拦截“，外界对该对象的访问，都必须通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy这个词的原意是代理，用在这里表示由它来”代理“某些操作，可以译为”代理器”。\n\n​\t\t翻译成大白话就是：Proxy可以改变对象的默认操作。\n\nProxy中需要理解的三个属性：\n\n- **target**：an Object which the proxy virtualizes. （目标对象）\n- **Handler**：a Placeholder Object which contains traps. （包含重写方法的对象）\n- **trap**：the Method that provide property accss of the target object. （重写的方法，比如get和set）\n\n### 可拦截操作\n\n其中**trap**可支持拦截的操作一共13种：\n\n- **get(target, propKey, receiver)**：拦截对象属性的读取，比如`proxy.foo`和`proxy['foo']`。\n- **set(target, propKey, value, receiver)**：拦截对象属性的设置，比如`proxy.foo = v`或`proxy['foo'] = 123`，返回一个布尔值。\n- **has(target, propKey)**：拦截`propKey in proxy`的操作，返回一个布尔值。\n- **deleteProperty(target, propKey)**：拦截`delete proxy[propKey]`的操作，返回一个布尔值。\n- **ownKeys(target)**：拦截`Object.getOwnPropertyNames(proxy)`、`Object.getOwnPropertySysmbols(proxy)`、`Object.keys(proxy)`、`for...in`循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而`Object.keys()`的返回结果仅包括目标对象自身的可遍历属性。\n- **getOwnPropertyDescriptor(target, propKey)**：拦截`Object.getOwnPropertyDescriptor(proxy, propKey)`，返回属性的描述对象。\n- **defineProperty(target, propKey, propDesc)**：拦截`Object.defineProperty(proxy, propKey, propDesc）`、`Object.defineProperties(proxy, propDescs)`，返回一个布尔值。\n- **preventExtensions(target)**：拦截`Object.preventExtensions(proxy)`，返回一个布尔值。\n- **getPrototypeOf(target)**：拦截`Object.getPrototypeOf(proxy)`，返回一个对象。\n- **isExtensible(target)**：拦截`Object.isExtensible(proxy)`，返回一个布尔值。\n- **setPrototypeOf(target, proto)**：拦截`Object.setPrototypeOf(proxy, proto)`，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。\n- **apply(target, object, args)**：拦截 Proxy 实例作为函数调用的操作，比如`proxy(...args)`、`proxy.call(object, ...args)`、`proxy.apply(...)`。\n- **construct(target, args)**：拦截 Proxy 实例作为构造函数调用的操作，比如`new proxy(...args)`。\n\n## 例子\n\n### get()\n\n`get`方法用于拦截某个属性的读取操作，可以接受三个参数，依次为目标对象、属性名和 proxy 实例本身（严格地说，是操作行为所针对的对象），其中最后一个参数可选。\n\n`get`方法的用法，上文已经有一个例子，下面是另一个拦截读取操作的例子。\n\n```javascript\nvar person = {\n  name: \"张三\"\n};\n\nvar proxy = new Proxy(person, {\n  get: function(target, propKey) {\n    if (propKey in target) {\n      return target[propKey];\n    } else {\n      throw new ReferenceError(\"Prop name \\\"\" + propKey + \"\\\" does not exist.\");\n    }\n  }\n});\n\nproxy.name // \"张三\"\nproxy.age // 抛出一个错误\n```\n\n上面代码表示，如果访问目标对象不存在的属性，会抛出一个错误。如果没有这个拦截函数，访问不存在的属性，只会返回`undefined`。\n\n`get`方法可以继承。\n\n```javascript\nlet proto = new Proxy({}, {\n  get(target, propertyKey, receiver) {\n    console.log('GET ' + propertyKey);\n    return target[propertyKey];\n  }\n});\n\nlet obj = Object.create(proto);\nobj.foo // \"GET foo\"\n```\n\n上面代码中，拦截操作定义在`Prototype`对象上面，所以如果读取`obj`对象继承的属性时，拦截会生效。\n\n下面的例子使用`get`拦截，实现数组读取负数的索引。\n\n```javascript\nfunction createArray(...elements) {\n  let handler = {\n    get(target, propKey, receiver) {\n      let index = Number(propKey);\n      if (index < 0) {\n        propKey = String(target.length + index);\n      }\n      return Reflect.get(target, propKey, receiver);\n    }\n  };\n\n  let target = [];\n  target.push(...elements);\n  return new Proxy(target, handler);\n}\n\nlet arr = createArray('a', 'b', 'c');\narr[-1] // c\n```\n\n上面代码中，数组的位置参数是`-1`，就会输出数组的倒数第一个成员。\n\n利用 Proxy，可以将读取属性的操作（`get`），转变为执行某个函数，从而实现属性的链式操作。\n\n```javascript\nvar pipe = function (value) {\n  var funcStack = [];\n  var oproxy = new Proxy({} , {\n    get : function (pipeObject, fnName) {\n      if (fnName === 'get') {\n        return funcStack.reduce(function (val, fn) {\n          return fn(val);\n        },value);\n      }\n      funcStack.push(window[fnName]);\n      return oproxy;\n    }\n  });\n\n  return oproxy;\n}\n\nvar double = n => n * 2;\nvar pow    = n => n * n;\nvar reverseInt = n => n.toString().split(\"\").reverse().join(\"\") | 0;\n\npipe(3).double.pow.reverseInt.get; // 63\n```\n\n上面代码设置 Proxy 以后，达到了将函数名链式使用的效果。\n\n下面的例子则是利用`get`拦截，实现一个生成各种 DOM 节点的通用函数`dom`。\n\n```javascript\nconst dom = new Proxy({}, {\n  get(target, property) {\n    return function(attrs = {}, ...children) {\n      const el = document.createElement(property);\n      for (let prop of Object.keys(attrs)) {\n        el.setAttribute(prop, attrs[prop]);\n      }\n      for (let child of children) {\n        if (typeof child === 'string') {\n          child = document.createTextNode(child);\n        }\n        el.appendChild(child);\n      }\n      return el;\n    }\n  }\n});\n\nconst el = dom.div({},\n  'Hello, my name is ',\n  dom.a({href: '//example.com'}, 'Mark'),\n  '. I like:',\n  dom.ul({},\n    dom.li({}, 'The web'),\n    dom.li({}, 'Food'),\n    dom.li({}, '…actually that\\'s it')\n  )\n);\n\ndocument.body.appendChild(el);\n```\n\n下面是一个`get`方法的第三个参数的例子，它总是指向原始的读操作所在的那个对象，一般情况下就是 Proxy 实例。\n\n```javascript\nconst proxy = new Proxy({}, {\n  get: function(target, key, receiver) {\n    return receiver;\n  }\n});\nproxy.getReceiver === proxy // true\n```\n\n上面代码中，`proxy`对象的`getReceiver`属性是由`proxy`对象提供的，所以`receiver`指向`proxy`对象。\n\n```javascript\nconst proxy = new Proxy({}, {\n  get: function(target, key, receiver) {\n    return receiver;\n  }\n});\n\nconst d = Object.create(proxy);\nd.a === d // true\n```\n\n上面代码中，`d`对象本身没有`a`属性，所以读取`d.a`的时候，会去`d`的原型`proxy`对象找。这时，`receiver`就指向`d`，代表原始的读操作所在的那个对象。\n\n如果一个属性不可配置（configurable）且不可写（writable），则 Proxy 不能修改该属性，否则通过 Proxy 对象访问该属性会报错。\n\n```javascript\nconst target = Object.defineProperties({}, {\n  foo: {\n    value: 123,\n    writable: false,\n    configurable: false\n  },\n});\n\nconst handler = {\n  get(target, propKey) {\n    return 'abc';\n  }\n};\n\nconst proxy = new Proxy(target, handler);\n\nproxy.foo\n// TypeError: Invariant check failed\n```\n\n### set()\n\n`set`方法用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和 Proxy 实例本身，其中最后一个参数可选。\n\n假定`Person`对象有一个`age`属性，该属性应该是一个不大于 200 的整数，那么可以使用`Proxy`保证`age`的属性值符合要求。\n\n```javascript\nlet validator = {\n  set: function(obj, prop, value) {\n    if (prop === 'age') {\n      if (!Number.isInteger(value)) {\n        throw new TypeError('The age is not an integer');\n      }\n      if (value > 200) {\n        throw new RangeError('The age seems invalid');\n      }\n    }\n\n    // 对于满足条件的 age 属性以及其他属性，直接保存\n    obj[prop] = value;\n    return true;\n  }\n};\n\nlet person = new Proxy({}, validator);\n\nperson.age = 100;\n\nperson.age // 100\nperson.age = 'young' // 报错\nperson.age = 300 // 报错\n```\n\n上面代码中，由于设置了存值函数`set`，任何不符合要求的`age`属性赋值，都会抛出一个错误，这是数据验证的一种实现方法。利用`set`方法，还可以数据绑定，即每当对象发生变化时，会自动更新 DOM。\n\n有时，我们会在对象上面设置内部属性，属性名的第一个字符使用下划线开头，表示这些属性不应该被外部使用。结合`get`和`set`方法，就可以做到防止这些内部属性被外部读写。\n\n```javascript\nconst handler = {\n  get (target, key) {\n    invariant(key, 'get');\n    return target[key];\n  },\n  set (target, key, value) {\n    invariant(key, 'set');\n    target[key] = value;\n    return true;\n  }\n};\nfunction invariant (key, action) {\n  if (key[0] === '_') {\n    throw new Error(`Invalid attempt to ${action} private \"${key}\" property`);\n  }\n}\nconst target = {};\nconst proxy = new Proxy(target, handler);\nproxy._prop\n// Error: Invalid attempt to get private \"_prop\" property\nproxy._prop = 'c'\n// Error: Invalid attempt to set private \"_prop\" property\n```\n\n上面代码中，只要读写的属性名的第一个字符是下划线，一律抛错，从而达到禁止读写内部属性的目的。\n\n下面是`set`方法第四个参数的例子。\n\n```javascript\nconst handler = {\n  set: function(obj, prop, value, receiver) {\n    obj[prop] = receiver;\n    return true;\n  }\n};\nconst proxy = new Proxy({}, handler);\nproxy.foo = 'bar';\nproxy.foo === proxy // true\n```\n\n上面代码中，`set`方法的第四个参数`receiver`，指的是原始的操作行为所在的那个对象，一般情况下是`proxy`实例本身，请看下面的例子。\n\n```javascript\nconst handler = {\n  set: function(obj, prop, value, receiver) {\n    obj[prop] = receiver;\n    return true;\n  }\n};\nconst proxy = new Proxy({}, handler);\nconst myObj = {};\nObject.setPrototypeOf(myObj, proxy);\n\nmyObj.foo = 'bar';\nmyObj.foo === myObj // true\n```\n\n上面代码中，设置`myObj.foo`属性的值时，`myObj`并没有`foo`属性，因此引擎会到`myObj`的原型链去找`foo`属性。`myObj`的原型对象`proxy`是一个 Proxy 实例，设置它的`foo`属性会触发`set`方法。这时，第四个参数`receiver`就指向原始赋值行为所在的对象`myObj`。\n\n注意，如果目标对象自身的某个属性不可写，那么`set`方法将不起作用。\n\n```javascript\nconst obj = {};\nObject.defineProperty(obj, 'foo', {\n  value: 'bar',\n  writable: false\n});\n\nconst handler = {\n  set: function(obj, prop, value, receiver) {\n    obj[prop] = 'baz';\n    return true;\n  }\n};\n\nconst proxy = new Proxy(obj, handler);\nproxy.foo = 'baz';\nproxy.foo // \"bar\"\n```\n\n上面代码中，`obj.foo`属性不可写，Proxy 对这个属性的`set`代理将不会生效。\n\n注意，`set`代理应当返回一个布尔值。严格模式下，`set`代理如果没有返回`true`，就会报错。\n\n```javascript\n'use strict';\nconst handler = {\n  set: function(obj, prop, value, receiver) {\n    obj[prop] = receiver;\n    // 无论有没有下面这一行，都会报错\n    return false;\n  }\n};\nconst proxy = new Proxy({}, handler);\nproxy.foo = 'bar';\n// TypeError: 'set' on proxy: trap returned falsish for property 'foo'\n```\n\n上面代码中，严格模式下，`set`代理返回`false`或者`undefined`，都会报错。\n\n### apply()\n\n`apply`方法拦截函数的调用、`call`和`apply`操作。\n\n`apply`方法可以接受三个参数，分别是目标对象、目标对象的上下文对象（`this`）和目标对象的参数数组。\n\n```javascript\nvar handler = {\n  apply (target, ctx, args) {\n    return Reflect.apply(...arguments);\n  }\n};\n```\n\n下面是一个例子。\n\n```javascript\nvar target = function () { return 'I am the target'; };\nvar handler = {\n  apply: function () {\n    return 'I am the proxy';\n  }\n};\n\nvar p = new Proxy(target, handler);\n\np()\n// \"I am the proxy\"\n```\n\n上面代码中，变量`p`是 Proxy 的实例，当它作为函数调用时（`p()`），就会被`apply`方法拦截，返回一个字符串。\n\n下面是另外一个例子。\n\n```javascript\nvar twice = {\n  apply (target, ctx, args) {\n    return Reflect.apply(...arguments) * 2;\n  }\n};\nfunction sum (left, right) {\n  return left + right;\n};\nvar proxy = new Proxy(sum, twice);\nproxy(1, 2) // 6\nproxy.call(null, 5, 6) // 22\nproxy.apply(null, [7, 8]) // 30\n```\n\n上面代码中，每当执行`proxy`函数（直接调用或`call`和`apply`调用），就会被`apply`方法拦截。\n\n另外，直接调用`Reflect.apply`方法，也会被拦截。\n\n```javascript\nReflect.apply(proxy, null, [9, 10]) // 38\n```\n\n### has()\n\n`has()`方法用来拦截`HasProperty`操作，即判断对象是否具有某个属性时，这个方法会生效。典型的操作就是`in`运算符。\n\n`has()`方法可以接受两个参数，分别是目标对象、需查询的属性名。\n\n下面的例子使用`has()`方法隐藏某些属性，不被`in`运算符发现。\n\n```javascript\nvar handler = {\n  has (target, key) {\n    if (key[0] === '_') {\n      return false;\n    }\n    return key in target;\n  }\n};\nvar target = { _prop: 'foo', prop: 'foo' };\nvar proxy = new Proxy(target, handler);\n'_prop' in proxy // false\n```\n\n上面代码中，如果原对象的属性名的第一个字符是下划线，`proxy.has()`就会返回`false`，从而不会被`in`运算符发现。\n\n如果原对象不可配置或者禁止扩展，这时`has()`拦截会报错。\n\n```javascript\nvar obj = { a: 10 };\nObject.preventExtensions(obj);\n\nvar p = new Proxy(obj, {\n  has: function(target, prop) {\n    return false;\n  }\n});\n\n'a' in p // TypeError is thrown\n```\n\n上面代码中，`obj`对象禁止扩展，结果使用`has`拦截就会报错。也就是说，如果某个属性不可配置（或者目标对象不可扩展），则`has()`方法就不得“隐藏”（即返回`false`）目标对象的该属性。\n\n值得注意的是，`has()`方法拦截的是`HasProperty`操作，而不是`HasOwnProperty`操作，即`has()`方法不判断一个属性是对象自身的属性，还是继承的属性。\n\n另外，虽然`for...in`循环也用到了`in`运算符，但是`has()`拦截对`for...in`循环不生效。\n\n```javascript\nlet stu1 = {name: '张三', score: 59};\nlet stu2 = {name: '李四', score: 99};\n\nlet handler = {\n  has(target, prop) {\n    if (prop === 'score' && target[prop] < 60) {\n      console.log(`${target.name} 不及格`);\n      return false;\n    }\n    return prop in target;\n  }\n}\n\nlet oproxy1 = new Proxy(stu1, handler);\nlet oproxy2 = new Proxy(stu2, handler);\n\n'score' in oproxy1\n// 张三 不及格\n// false\n\n'score' in oproxy2\n// true\n\nfor (let a in oproxy1) {\n  console.log(oproxy1[a]);\n}\n// 张三\n// 59\n\nfor (let b in oproxy2) {\n  console.log(oproxy2[b]);\n}\n// 李四\n// 99\n```\n\n上面代码中，`has()`拦截只对`in`运算符生效，对`for...in`循环不生效，导致不符合要求的属性没有被`for...in`循环所排除。\n\n### construct()\n\n`construct()`方法用于拦截`new`命令，下面是拦截对象的写法。\n\n```javascript\nconst handler = {\n  construct (target, args, newTarget) {\n    return new target(...args);\n  }\n};\n```\n\n`construct()`方法可以接受三个参数。\n\n- `target`：目标对象。\n- `args`：构造函数的参数数组。\n- `newTarget`：创造实例对象时，`new`命令作用的构造函数（下面例子的`p`）。\n\n```javascript\nconst p = new Proxy(function () {}, {\n  construct: function(target, args) {\n    console.log('called: ' + args.join(', '));\n    return { value: args[0] * 10 };\n  }\n});\n\n(new p(1)).value\n// \"called: 1\"\n// 10\n```\n\n`construct()`方法返回的必须是一个对象，否则会报错。\n\n```javascript\nconst p = new Proxy(function() {}, {\n  construct: function(target, argumentsList) {\n    return 1;\n  }\n});\n\nnew p() // 报错\n// Uncaught TypeError: 'construct' on proxy: trap returned non-object ('1')\n```\n\n另外，由于`construct()`拦截的是构造函数，所以它的目标对象必须是函数，否则就会报错。\n\n```javascript\nconst p = new Proxy({}, {\n  construct: function(target, argumentsList) {\n    return {};\n  }\n});\n\nnew p() // 报错\n// Uncaught TypeError: p is not a constructor\n```\n\n上面例子中，拦截的目标对象不是一个函数，而是一个对象（`new Proxy()`的第一个参数），导致报错。\n\n注意，`construct()`方法中的`this`指向的是`handler`，而不是实例对象。\n\n```javascript\nconst handler = {\n  construct: function(target, args) {\n    console.log(this === handler);\n    return new target(...args);\n  }\n}\n\nlet p = new Proxy(function () {}, handler);\nnew p() // true\n```\n\n### deleteProperty()\n\n`deleteProperty`方法用于拦截`delete`操作，如果这个方法抛出错误或者返回`false`，当前属性就无法被`delete`命令删除。\n\n```javascript\nvar handler = {\n  deleteProperty (target, key) {\n    invariant(key, 'delete');\n    delete target[key];\n    return true;\n  }\n};\nfunction invariant (key, action) {\n  if (key[0] === '_') {\n    throw new Error(`Invalid attempt to ${action} private \"${key}\" property`);\n  }\n}\n\nvar target = { _prop: 'foo' };\nvar proxy = new Proxy(target, handler);\ndelete proxy._prop\n// Error: Invalid attempt to delete private \"_prop\" property\n```\n\n上面代码中，`deleteProperty`方法拦截了`delete`操作符，删除第一个字符为下划线的属性会报错。\n\n注意，目标对象自身的不可配置（configurable）的属性，不能被`deleteProperty`方法删除，否则报错。\n\n### defineProperty()\n\n`defineProperty()`方法拦截了`Object.defineProperty()`操作。\n\n```javascript\nvar handler = {\n  defineProperty (target, key, descriptor) {\n    return false;\n  }\n};\nvar target = {};\nvar proxy = new Proxy(target, handler);\nproxy.foo = 'bar' // 不会生效\n```\n\n上面代码中，`defineProperty()`方法内部没有任何操作，只返回`false`，导致添加新属性总是无效。注意，这里的`false`只是用来提示操作失败，本身并不能阻止添加新属性。\n\n注意，如果目标对象不可扩展（non-extensible），则`defineProperty()`不能增加目标对象上不存在的属性，否则会报错。另外，如果目标对象的某个属性不可写（writable）或不可配置（configurable），则`defineProperty()`方法不得改变这两个设置。\n\n### getOwnPropertyDescriptor()\n\n`getOwnPropertyDescriptor()`方法拦截`Object.getOwnPropertyDescriptor()`，返回一个属性描述对象或者`undefined`。\n\n```javascript\nvar handler = {\n  getOwnPropertyDescriptor (target, key) {\n    if (key[0] === '_') {\n      return;\n    }\n    return Object.getOwnPropertyDescriptor(target, key);\n  }\n};\nvar target = { _foo: 'bar', baz: 'tar' };\nvar proxy = new Proxy(target, handler);\nObject.getOwnPropertyDescriptor(proxy, 'wat')\n// undefined\nObject.getOwnPropertyDescriptor(proxy, '_foo')\n// undefined\nObject.getOwnPropertyDescriptor(proxy, 'baz')\n// { value: 'tar', writable: true, enumerable: true, configurable: true }\n```\n\n上面代码中，`handler.getOwnPropertyDescriptor()`方法对于第一个字符为下划线的属性名会返回`undefined`。\n\n### getPrototypeOf()\n\n`getPrototypeOf()`方法主要用来拦截获取对象原型。具体来说，拦截下面这些操作。\n\n- `Object.prototype.__proto__`\n- `Object.prototype.isPrototypeOf()`\n- `Object.getPrototypeOf()`\n- `Reflect.getPrototypeOf()`\n- `instanceof`\n\n下面是一个例子。\n\n```javascript\nvar proto = {};\nvar p = new Proxy({}, {\n  getPrototypeOf(target) {\n    return proto;\n  }\n});\nObject.getPrototypeOf(p) === proto // true\n```\n\n上面代码中，`getPrototypeOf()`方法拦截`Object.getPrototypeOf()`，返回`proto`对象。\n\n注意，`getPrototypeOf()`方法的返回值必须是对象或者`null`，否则报错。另外，如果目标对象不可扩展（non-extensible）， `getPrototypeOf()`方法必须返回目标对象的原型对象。\n\n### isExtensible()\n\n`isExtensible()`方法拦截`Object.isExtensible()`操作。\n\n```javascript\nvar p = new Proxy({}, {\n  isExtensible: function(target) {\n    console.log(\"called\");\n    return true;\n  }\n});\n\nObject.isExtensible(p)\n// \"called\"\n// true\n```\n\n上面代码设置了`isExtensible()`方法，在调用`Object.isExtensible`时会输出`called`。\n\n注意，该方法只能返回布尔值，否则返回值会被自动转为布尔值。\n\n这个方法有一个强限制，它的返回值必须与目标对象的`isExtensible`属性保持一致，否则就会抛出错误。\n\n```javascript\nObject.isExtensible(proxy) === Object.isExtensible(target)\n```\n\n下面是一个例子。\n\n```javascript\nvar p = new Proxy({}, {\n  isExtensible: function(target) {\n    return false;\n  }\n});\n\nObject.isExtensible(p)\n// Uncaught TypeError: 'isExtensible' on proxy: trap result does not reflect extensibility of proxy target (which is 'true')\n```\n\n### ownKeys()\n\n`ownKeys()`方法用来拦截对象自身属性的读取操作。具体来说，拦截以下操作。\n\n- `Object.getOwnPropertyNames()`\n- `Object.getOwnPropertySymbols()`\n- `Object.keys()`\n- `for...in`循环\n\n下面是拦截`Object.keys()`的例子。\n\n```javascript\nlet target = {\n  a: 1,\n  b: 2,\n  c: 3\n};\n\nlet handler = {\n  ownKeys(target) {\n    return ['a'];\n  }\n};\n\nlet proxy = new Proxy(target, handler);\n\nObject.keys(proxy)\n// [ 'a' ]\n```\n\n上面代码拦截了对于`target`对象的`Object.keys()`操作，只返回`a`、`b`、`c`三个属性之中的`a`属性。\n\n下面的例子是拦截第一个字符为下划线的属性名。\n\n```javascript\nlet target = {\n  _bar: 'foo',\n  _prop: 'bar',\n  prop: 'baz'\n};\n\nlet handler = {\n  ownKeys (target) {\n    return Reflect.ownKeys(target).filter(key => key[0] !== '_');\n  }\n};\n\nlet proxy = new Proxy(target, handler);\nfor (let key of Object.keys(proxy)) {\n  console.log(target[key]);\n}\n// \"baz\"\n```\n\n注意，使用`Object.keys()`方法时，有三类属性会被`ownKeys()`方法自动过滤，不会返回。\n\n- 目标对象上不存在的属性\n- 属性名为 Symbol 值\n- 不可遍历（`enumerable`）的属性\n\n```javascript\nlet target = {\n  a: 1,\n  b: 2,\n  c: 3,\n  [Symbol.for('secret')]: '4',\n};\n\nObject.defineProperty(target, 'key', {\n  enumerable: false,\n  configurable: true,\n  writable: true,\n  value: 'static'\n});\n\nlet handler = {\n  ownKeys(target) {\n    return ['a', 'd', Symbol.for('secret'), 'key'];\n  }\n};\n\nlet proxy = new Proxy(target, handler);\n\nObject.keys(proxy)\n// ['a']\n```\n\n上面代码中，`ownKeys()`方法之中，显式返回不存在的属性（`d`）、Symbol 值（`Symbol.for('secret')`）、不可遍历的属性（`key`），结果都被自动过滤掉。\n\n`ownKeys()`方法还可以拦截`Object.getOwnPropertyNames()`。\n\n```javascript\nvar p = new Proxy({}, {\n  ownKeys: function(target) {\n    return ['a', 'b', 'c'];\n  }\n});\n\nObject.getOwnPropertyNames(p)\n// [ 'a', 'b', 'c' ]\n```\n\n`for...in`循环也受到`ownKeys()`方法的拦截。\n\n```javascript\nconst obj = { hello: 'world' };\nconst proxy = new Proxy(obj, {\n  ownKeys: function () {\n    return ['a', 'b'];\n  }\n});\n\nfor (let key in proxy) {\n  console.log(key); // 没有任何输出\n}\n```\n\n上面代码中，`ownkeys()`指定只返回`a`和`b`属性，由于`obj`没有这两个属性，因此`for...in`循环不会有任何输出。\n\n`ownKeys()`方法返回的数组成员，只能是字符串或 Symbol 值。如果有其他类型的值，或者返回的根本不是数组，就会报错。\n\n```javascript\nvar obj = {};\n\nvar p = new Proxy(obj, {\n  ownKeys: function(target) {\n    return [123, true, undefined, null, {}, []];\n  }\n});\n\nObject.getOwnPropertyNames(p)\n// Uncaught TypeError: 123 is not a valid property name\n```\n\n上面代码中，`ownKeys()`方法虽然返回一个数组，但是每一个数组成员都不是字符串或 Symbol 值，因此就报错了。\n\n如果目标对象自身包含不可配置的属性，则该属性必须被`ownKeys()`方法返回，否则报错。\n\n```javascript\nvar obj = {};\nObject.defineProperty(obj, 'a', {\n  configurable: false,\n  enumerable: true,\n  value: 10 }\n);\n\nvar p = new Proxy(obj, {\n  ownKeys: function(target) {\n    return ['b'];\n  }\n});\n\nObject.getOwnPropertyNames(p)\n// Uncaught TypeError: 'ownKeys' on proxy: trap result did not include 'a'\n```\n\n上面代码中，`obj`对象的`a`属性是不可配置的，这时`ownKeys()`方法返回的数组之中，必须包含`a`，否则会报错。\n\n另外，如果目标对象是不可扩展的（non-extensible），这时`ownKeys()`方法返回的数组之中，必须包含原对象的所有属性，且不能包含多余的属性，否则报错。\n\n```javascript\nvar obj = {\n  a: 1\n};\n\nObject.preventExtensions(obj);\n\nvar p = new Proxy(obj, {\n  ownKeys: function(target) {\n    return ['a', 'b'];\n  }\n});\n\nObject.getOwnPropertyNames(p)\n// Uncaught TypeError: 'ownKeys' on proxy: trap returned extra keys but proxy target is non-extensible\n```\n\n上面代码中，`obj`对象是不可扩展的，这时`ownKeys()`方法返回的数组之中，包含了`obj`对象的多余属性`b`，所以导致了报错。\n\n### preventExtensions()\n\n`preventExtensions()`方法拦截`Object.preventExtensions()`。该方法必须返回一个布尔值，否则会被自动转为布尔值。\n\n这个方法有一个限制，只有目标对象不可扩展时（即`Object.isExtensible(proxy)`为`false`），`proxy.preventExtensions`才能返回`true`，否则会报错。\n\n```javascript\nvar proxy = new Proxy({}, {\n  preventExtensions: function(target) {\n    return true;\n  }\n});\n\nObject.preventExtensions(proxy)\n// Uncaught TypeError: 'preventExtensions' on proxy: trap returned truish but the proxy target is extensible\n```\n\n上面代码中，`proxy.preventExtensions()`方法返回`true`，但这时`Object.isExtensible(proxy)`会返回`true`，因此报错。\n\n为了防止出现这个问题，通常要在`proxy.preventExtensions()`方法里面，调用一次`Object.preventExtensions()`。\n\n```javascript\nvar proxy = new Proxy({}, {\n  preventExtensions: function(target) {\n    console.log('called');\n    Object.preventExtensions(target);\n    return true;\n  }\n});\n\nObject.preventExtensions(proxy)\n// \"called\"\n// Proxy {}\n```\n\n### setPrototypeOf()\n\n`setPrototypeOf()`方法主要用来拦截`Object.setPrototypeOf()`方法。\n\n下面是一个例子。\n\n```javascript\nvar handler = {\n  setPrototypeOf (target, proto) {\n    throw new Error('Changing the prototype is forbidden');\n  }\n};\nvar proto = {};\nvar target = function () {};\nvar proxy = new Proxy(target, handler);\nObject.setPrototypeOf(proxy, proto);\n// Error: Changing the prototype is forbidden\n```\n\n上面代码中，只要修改`target`的原型对象，就会报错。\n\n注意，该方法只能返回布尔值，否则会被自动转为布尔值。另外，如果目标对象不可扩展（non-extensible），`setPrototypeOf()`方法不得改变目标对象的原型。\n\n## Proxy.revocable()\n\n`Proxy.revocable()`方法返回一个可取消的 Proxy 实例。\n\n```javascript\nlet target = {};\nlet handler = {};\n\nlet {proxy, revoke} = Proxy.revocable(target, handler);\n\nproxy.foo = 123;\nproxy.foo // 123\n\nrevoke();\nproxy.foo // TypeError: Revoked\n```\n\n`Proxy.revocable()`方法返回一个对象，该对象的`proxy`属性是`Proxy`实例，`revoke`属性是一个函数，可以取消`Proxy`实例。上面代码中，当执行`revoke`函数之后，再访问`Proxy`实例，就会抛出一个错误。\n\n`Proxy.revocable()`的一个使用场景是，目标对象不允许直接访问，必须通过代理访问，一旦访问结束，就收回代理权，不允许再次访问。\n\n## this 问题\n\n虽然 Proxy 可以代理针对目标对象的访问，但它不是目标对象的透明代理，即不做任何拦截的情况下，也无法保证与目标对象的行为一致。主要原因就是在 Proxy 代理的情况下，目标对象内部的`this`关键字会指向 Proxy 代理。\n\n```javascript\nconst target = {\n  m: function () {\n    console.log(this === proxy);\n  }\n};\nconst handler = {};\n\nconst proxy = new Proxy(target, handler);\n\ntarget.m() // false\nproxy.m()  // true\n```\n\n上面代码中，一旦`proxy`代理`target`，`target.m()`内部的`this`就是指向`proxy`，而不是`target`。\n\n下面是一个例子，由于`this`指向的变化，导致 Proxy 无法代理目标对象。\n\n```javascript\nconst _name = new WeakMap();\n\nclass Person {\n  constructor(name) {\n    _name.set(this, name);\n  }\n  get name() {\n    return _name.get(this);\n  }\n}\n\nconst jane = new Person('Jane');\njane.name // 'Jane'\n\nconst proxy = new Proxy(jane, {});\nproxy.name // undefined\n```\n\n上面代码中，目标对象`jane`的`name`属性，实际保存在外部`WeakMap`对象`_name`上面，通过`this`键区分。由于通过`proxy.name`访问时，`this`指向`proxy`，导致无法取到值，所以返回`undefined`。\n\n此外，有些原生对象的内部属性，只有通过正确的`this`才能拿到，所以 Proxy 也无法代理这些原生对象的属性。\n\n```javascript\nconst target = new Date();\nconst handler = {};\nconst proxy = new Proxy(target, handler);\n\nproxy.getDate();\n// TypeError: this is not a Date object.\n```\n\n上面代码中，`getDate()`方法只能在`Date`对象实例上面拿到，如果`this`不是`Date`对象实例就会报错。这时，`this`绑定原始对象，就可以解决这个问题。\n\n```javascript\nconst target = new Date('2015-01-01');\nconst handler = {\n  get(target, prop) {\n    if (prop === 'getDate') {\n      return target.getDate.bind(target);\n    }\n    return Reflect.get(target, prop);\n  }\n};\nconst proxy = new Proxy(target, handler);\n\nproxy.getDate() // 1\n```\n\n另外，Proxy 拦截函数内部的`this`，指向的是`handler`对象。\n\n```javascript\nconst handler = {\n  get: function (target, key, receiver) {\n    console.log(this === handler);\n    return 'Hello, ' + key;\n  },\n  set: function (target, key, value) {\n    console.log(this === handler);\n    target[key] = value;\n    return true;\n  }\n};\n\nconst proxy = new Proxy({}, handler);\n\nproxy.foo\n// true\n// Hello, foo\n\nproxy.foo = 1\n// true\n```\n\n上面例子中，`get()`和`set()`拦截函数内部的`this`，指向的都是`handler`对象。\n\n## 实例：Web 服务的客户端\n\nProxy 对象可以拦截目标对象的任意属性，这使得它很合适用来写 Web 服务的客户端。\n\n```javascript\nconst service = createWebService('http://example.com/data');\n\nservice.employees().then(json => {\n  const employees = JSON.parse(json);\n  // ···\n});\n```\n\n上面代码新建了一个 Web 服务的接口，这个接口返回各种数据。Proxy 可以拦截这个对象的任意属性，所以不用为每一种数据写一个适配方法，只要写一个 Proxy 拦截就可以了。\n\n```javascript\nfunction createWebService(baseUrl) {\n  return new Proxy({}, {\n    get(target, propKey, receiver) {\n      return () => httpGet(baseUrl + '/' + propKey);\n    }\n  });\n}\n```\n\n同理，Proxy 也可以用来实现数据库的 ORM 层。\n\n## ps\n\n以上内容均来自阮一峰老师的[《ESMAScript6 入门》Proxy](https://es6.ruanyifeng.com/#docs/proxy)一章，抄下来为了方便翻阅。\n","slug":"JS的Proxy笔记","published":1,"updated":"2021-11-08T06:40:26.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62dl002krify1rvh4och","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>​        Proxy用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种<strong>元编程</strong>（meta programming），即对编程语言进行编程。</p>\n<p>​        Proxy可以理解成，在目标对象之前架设一层”拦截“，外界对该对象的访问，都必须通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy这个词的原意是代理，用在这里表示由它来”代理“某些操作，可以译为”代理器”。</p>\n<p>​        翻译成大白话就是：Proxy可以改变对象的默认操作。</p>\n<p>Proxy中需要理解的三个属性：</p>\n<ul>\n<li><strong>target</strong>：an Object which the proxy virtualizes. （目标对象）</li>\n<li><strong>Handler</strong>：a Placeholder Object which contains traps. （包含重写方法的对象）</li>\n<li><strong>trap</strong>：the Method that provide property accss of the target object. （重写的方法，比如get和set）</li>\n</ul>\n<h3 id=\"可拦截操作\"><a href=\"#可拦截操作\" class=\"headerlink\" title=\"可拦截操作\"></a>可拦截操作</h3><p>其中<strong>trap</strong>可支持拦截的操作一共13种：</p>\n<ul>\n<li>**get(target, propKey, receiver)**：拦截对象属性的读取，比如<code>proxy.foo</code>和<code>proxy[&#39;foo&#39;]</code>。</li>\n<li>**set(target, propKey, value, receiver)**：拦截对象属性的设置，比如<code>proxy.foo = v</code>或<code>proxy[&#39;foo&#39;] = 123</code>，返回一个布尔值。</li>\n<li>**has(target, propKey)**：拦截<code>propKey in proxy</code>的操作，返回一个布尔值。</li>\n<li>**deleteProperty(target, propKey)**：拦截<code>delete proxy[propKey]</code>的操作，返回一个布尔值。</li>\n<li>**ownKeys(target)**：拦截<code>Object.getOwnPropertyNames(proxy)</code>、<code>Object.getOwnPropertySysmbols(proxy)</code>、<code>Object.keys(proxy)</code>、<code>for...in</code>循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而<code>Object.keys()</code>的返回结果仅包括目标对象自身的可遍历属性。</li>\n<li>**getOwnPropertyDescriptor(target, propKey)**：拦截<code>Object.getOwnPropertyDescriptor(proxy, propKey)</code>，返回属性的描述对象。</li>\n<li>**defineProperty(target, propKey, propDesc)**：拦截<code>Object.defineProperty(proxy, propKey, propDesc）</code>、<code>Object.defineProperties(proxy, propDescs)</code>，返回一个布尔值。</li>\n<li>**preventExtensions(target)**：拦截<code>Object.preventExtensions(proxy)</code>，返回一个布尔值。</li>\n<li>**getPrototypeOf(target)**：拦截<code>Object.getPrototypeOf(proxy)</code>，返回一个对象。</li>\n<li>**isExtensible(target)**：拦截<code>Object.isExtensible(proxy)</code>，返回一个布尔值。</li>\n<li>**setPrototypeOf(target, proto)**：拦截<code>Object.setPrototypeOf(proxy, proto)</code>，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</li>\n<li>**apply(target, object, args)**：拦截 Proxy 实例作为函数调用的操作，比如<code>proxy(...args)</code>、<code>proxy.call(object, ...args)</code>、<code>proxy.apply(...)</code>。</li>\n<li>**construct(target, args)**：拦截 Proxy 实例作为构造函数调用的操作，比如<code>new proxy(...args)</code>。</li>\n</ul>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><h3 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get()\"></a>get()</h3><p><code>get</code>方法用于拦截某个属性的读取操作，可以接受三个参数，依次为目标对象、属性名和 proxy 实例本身（严格地说，是操作行为所针对的对象），其中最后一个参数可选。</p>\n<p><code>get</code>方法的用法，上文已经有一个例子，下面是另一个拦截读取操作的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(person, &#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, propKey</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (propKey <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> target[propKey];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">ReferenceError</span>(<span class=\"string\">&quot;Prop name \\&quot;&quot;</span> + propKey + <span class=\"string\">&quot;\\&quot; does not exist.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.name <span class=\"comment\">// &quot;张三&quot;</span></span><br><span class=\"line\">proxy.age <span class=\"comment\">// 抛出一个错误</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码表示，如果访问目标对象不存在的属性，会抛出一个错误。如果没有这个拦截函数，访问不存在的属性，只会返回<code>undefined</code>。</p>\n<p><code>get</code>方法可以继承。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> proto = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, propertyKey, receiver</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;GET &#x27;</span> + propertyKey);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target[propertyKey];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"built_in\">Object</span>.create(proto);</span><br><span class=\"line\">obj.foo <span class=\"comment\">// &quot;GET foo&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，拦截操作定义在<code>Prototype</code>对象上面，所以如果读取<code>obj</code>对象继承的属性时，拦截会生效。</p>\n<p>下面的例子使用<code>get</code>拦截，实现数组读取负数的索引。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createArray</span>(<span class=\"params\">...elements</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, propKey, receiver</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> index = <span class=\"built_in\">Number</span>(propKey);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        propKey = <span class=\"built_in\">String</span>(target.length + index);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, propKey, receiver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> target = [];</span><br><span class=\"line\">  target.push(...elements);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = createArray(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\">arr[-<span class=\"number\">1</span>] <span class=\"comment\">// c</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，数组的位置参数是<code>-1</code>，就会输出数组的倒数第一个成员。</p>\n<p>利用 Proxy，可以将读取属性的操作（<code>get</code>），转变为执行某个函数，从而实现属性的链式操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pipe = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> funcStack = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> oproxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125; , &#123;</span><br><span class=\"line\">    <span class=\"attr\">get</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pipeObject, fnName</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (fnName === <span class=\"string\">&#x27;get&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> funcStack.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val, fn</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> fn(val);</span><br><span class=\"line\">        &#125;,value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      funcStack.push(<span class=\"built_in\">window</span>[fnName]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> oproxy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> oproxy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> double = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n * <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pow    = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n * n;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseInt = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n.toString().split(<span class=\"string\">&quot;&quot;</span>).reverse().join(<span class=\"string\">&quot;&quot;</span>) | <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">pipe(<span class=\"number\">3</span>).double.pow.reverseInt.get; <span class=\"comment\">// 63</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码设置 Proxy 以后，达到了将函数名链式使用的效果。</p>\n<p>下面的例子则是利用<code>get</code>拦截，实现一个生成各种 DOM 节点的通用函数<code>dom</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dom = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, property</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attrs = &#123;&#125;, ...children</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> el = <span class=\"built_in\">document</span>.createElement(property);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> prop <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(attrs)) &#123;</span><br><span class=\"line\">        el.setAttribute(prop, attrs[prop]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> child <span class=\"keyword\">of</span> children) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> child === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">          child = <span class=\"built_in\">document</span>.createTextNode(child);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        el.appendChild(child);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> el;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> el = dom.div(&#123;&#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;Hello, my name is &#x27;</span>,</span><br><span class=\"line\">  dom.a(&#123;<span class=\"attr\">href</span>: <span class=\"string\">&#x27;//example.com&#x27;</span>&#125;, <span class=\"string\">&#x27;Mark&#x27;</span>),</span><br><span class=\"line\">  <span class=\"string\">&#x27;. I like:&#x27;</span>,</span><br><span class=\"line\">  dom.ul(&#123;&#125;,</span><br><span class=\"line\">    dom.li(&#123;&#125;, <span class=\"string\">&#x27;The web&#x27;</span>),</span><br><span class=\"line\">    dom.li(&#123;&#125;, <span class=\"string\">&#x27;Food&#x27;</span>),</span><br><span class=\"line\">    dom.li(&#123;&#125;, <span class=\"string\">&#x27;…actually that\\&#x27;s it&#x27;</span>)</span><br><span class=\"line\">  )</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(el);</span><br></pre></td></tr></table></figure>\n\n<p>下面是一个<code>get</code>方法的第三个参数的例子，它总是指向原始的读操作所在的那个对象，一般情况下就是 Proxy 实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> receiver;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">proxy.getReceiver === proxy <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>proxy</code>对象的<code>getReceiver</code>属性是由<code>proxy</code>对象提供的，所以<code>receiver</code>指向<code>proxy</code>对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> receiver;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> d = <span class=\"built_in\">Object</span>.create(proxy);</span><br><span class=\"line\">d.a === d <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>d</code>对象本身没有<code>a</code>属性，所以读取<code>d.a</code>的时候，会去<code>d</code>的原型<code>proxy</code>对象找。这时，<code>receiver</code>就指向<code>d</code>，代表原始的读操作所在的那个对象。</p>\n<p>如果一个属性不可配置（configurable）且不可写（writable），则 Proxy 不能修改该属性，否则通过 Proxy 对象访问该属性会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = <span class=\"built_in\">Object</span>.defineProperties(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>: <span class=\"number\">123</span>,</span><br><span class=\"line\">    <span class=\"attr\">writable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, propKey</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.foo</span><br><span class=\"line\"><span class=\"comment\">// TypeError: Invariant check failed</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set()\"></a>set()</h3><p><code>set</code>方法用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和 Proxy 实例本身，其中最后一个参数可选。</p>\n<p>假定<code>Person</code>对象有一个<code>age</code>属性，该属性应该是一个不大于 200 的整数，那么可以使用<code>Proxy</code>保证<code>age</code>的属性值符合要求。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> validator = &#123;</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, prop, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop === <span class=\"string\">&#x27;age&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"built_in\">Number</span>.isInteger(value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&#x27;The age is not an integer&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RangeError</span>(<span class=\"string\">&#x27;The age seems invalid&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对于满足条件的 age 属性以及其他属性，直接保存</span></span><br><span class=\"line\">    obj[prop] = value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, validator);</span><br><span class=\"line\"></span><br><span class=\"line\">person.age = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">person.age <span class=\"comment\">// 100</span></span><br><span class=\"line\">person.age = <span class=\"string\">&#x27;young&#x27;</span> <span class=\"comment\">// 报错</span></span><br><span class=\"line\">person.age = <span class=\"number\">300</span> <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，由于设置了存值函数<code>set</code>，任何不符合要求的<code>age</code>属性赋值，都会抛出一个错误，这是数据验证的一种实现方法。利用<code>set</code>方法，还可以数据绑定，即每当对象发生变化时，会自动更新 DOM。</p>\n<p>有时，我们会在对象上面设置内部属性，属性名的第一个字符使用下划线开头，表示这些属性不应该被外部使用。结合<code>get</code>和<code>set</code>方法，就可以做到防止这些内部属性被外部读写。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  get (target, key) &#123;</span><br><span class=\"line\">    invariant(key, <span class=\"string\">&#x27;get&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target[key];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set (target, key, value) &#123;</span><br><span class=\"line\">    invariant(key, <span class=\"string\">&#x27;set&#x27;</span>);</span><br><span class=\"line\">    target[key] = value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invariant</span> (<span class=\"params\">key, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key[<span class=\"number\">0</span>] === <span class=\"string\">&#x27;_&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Invalid attempt to <span class=\"subst\">$&#123;action&#125;</span> private &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; property`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> target = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\">proxy._prop</span><br><span class=\"line\"><span class=\"comment\">// Error: Invalid attempt to get private &quot;_prop&quot; property</span></span><br><span class=\"line\">proxy._prop = <span class=\"string\">&#x27;c&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// Error: Invalid attempt to set private &quot;_prop&quot; property</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，只要读写的属性名的第一个字符是下划线，一律抛错，从而达到禁止读写内部属性的目的。</p>\n<p>下面是<code>set</code>方法第四个参数的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, prop, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    obj[prop] = receiver;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, handler);</span><br><span class=\"line\">proxy.foo = <span class=\"string\">&#x27;bar&#x27;</span>;</span><br><span class=\"line\">proxy.foo === proxy <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>set</code>方法的第四个参数<code>receiver</code>，指的是原始的操作行为所在的那个对象，一般情况下是<code>proxy</code>实例本身，请看下面的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, prop, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    obj[prop] = receiver;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, handler);</span><br><span class=\"line\"><span class=\"keyword\">const</span> myObj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(myObj, proxy);</span><br><span class=\"line\"></span><br><span class=\"line\">myObj.foo = <span class=\"string\">&#x27;bar&#x27;</span>;</span><br><span class=\"line\">myObj.foo === myObj <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，设置<code>myObj.foo</code>属性的值时，<code>myObj</code>并没有<code>foo</code>属性，因此引擎会到<code>myObj</code>的原型链去找<code>foo</code>属性。<code>myObj</code>的原型对象<code>proxy</code>是一个 Proxy 实例，设置它的<code>foo</code>属性会触发<code>set</code>方法。这时，第四个参数<code>receiver</code>就指向原始赋值行为所在的对象<code>myObj</code>。</p>\n<p>注意，如果目标对象自身的某个属性不可写，那么<code>set</code>方法将不起作用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">&#x27;foo&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, prop, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    obj[prop] = <span class=\"string\">&#x27;baz&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, handler);</span><br><span class=\"line\">proxy.foo = <span class=\"string\">&#x27;baz&#x27;</span>;</span><br><span class=\"line\">proxy.foo <span class=\"comment\">// &quot;bar&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>obj.foo</code>属性不可写，Proxy 对这个属性的<code>set</code>代理将不会生效。</p>\n<p>注意，<code>set</code>代理应当返回一个布尔值。严格模式下，<code>set</code>代理如果没有返回<code>true</code>，就会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, prop, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    obj[prop] = receiver;</span><br><span class=\"line\">    <span class=\"comment\">// 无论有没有下面这一行，都会报错</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, handler);</span><br><span class=\"line\">proxy.foo = <span class=\"string\">&#x27;bar&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// TypeError: &#x27;set&#x27; on proxy: trap returned falsish for property &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，严格模式下，<code>set</code>代理返回<code>false</code>或者<code>undefined</code>，都会报错。</p>\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply()\"></a>apply()</h3><p><code>apply</code>方法拦截函数的调用、<code>call</code>和<code>apply</code>操作。</p>\n<p><code>apply</code>方法可以接受三个参数，分别是目标对象、目标对象的上下文对象（<code>this</code>）和目标对象的参数数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  apply (target, ctx, args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.apply(...arguments);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>下面是一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> target = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">&#x27;I am the target&#x27;</span>; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"attr\">apply</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;I am the proxy&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">p()</span><br><span class=\"line\"><span class=\"comment\">// &quot;I am the proxy&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，变量<code>p</code>是 Proxy 的实例，当它作为函数调用时（<code>p()</code>），就会被<code>apply</code>方法拦截，返回一个字符串。</p>\n<p>下面是另外一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> twice = &#123;</span><br><span class=\"line\">  apply (target, ctx, args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.apply(...arguments) * <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span> (<span class=\"params\">left, right</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> left + right;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(sum, twice);</span><br><span class=\"line\">proxy(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 6</span></span><br><span class=\"line\">proxy.call(<span class=\"literal\">null</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>) <span class=\"comment\">// 22</span></span><br><span class=\"line\">proxy.apply(<span class=\"literal\">null</span>, [<span class=\"number\">7</span>, <span class=\"number\">8</span>]) <span class=\"comment\">// 30</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，每当执行<code>proxy</code>函数（直接调用或<code>call</code>和<code>apply</code>调用），就会被<code>apply</code>方法拦截。</p>\n<p>另外，直接调用<code>Reflect.apply</code>方法，也会被拦截。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.apply(proxy, <span class=\"literal\">null</span>, [<span class=\"number\">9</span>, <span class=\"number\">10</span>]) <span class=\"comment\">// 38</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"has\"><a href=\"#has\" class=\"headerlink\" title=\"has()\"></a>has()</h3><p><code>has()</code>方法用来拦截<code>HasProperty</code>操作，即判断对象是否具有某个属性时，这个方法会生效。典型的操作就是<code>in</code>运算符。</p>\n<p><code>has()</code>方法可以接受两个参数，分别是目标对象、需查询的属性名。</p>\n<p>下面的例子使用<code>has()</code>方法隐藏某些属性，不被<code>in</code>运算符发现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  has (target, key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key[<span class=\"number\">0</span>] === <span class=\"string\">&#x27;_&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; <span class=\"attr\">_prop</span>: <span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"attr\">prop</span>: <span class=\"string\">&#x27;foo&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"><span class=\"string\">&#x27;_prop&#x27;</span> <span class=\"keyword\">in</span> proxy <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，如果原对象的属性名的第一个字符是下划线，<code>proxy.has()</code>就会返回<code>false</code>，从而不会被<code>in</code>运算符发现。</p>\n<p>如果原对象不可配置或者禁止扩展，这时<code>has()</code>拦截会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">10</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.preventExtensions(obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">  <span class=\"attr\">has</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, prop</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> p <span class=\"comment\">// TypeError is thrown</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>obj</code>对象禁止扩展，结果使用<code>has</code>拦截就会报错。也就是说，如果某个属性不可配置（或者目标对象不可扩展），则<code>has()</code>方法就不得“隐藏”（即返回<code>false</code>）目标对象的该属性。</p>\n<p>值得注意的是，<code>has()</code>方法拦截的是<code>HasProperty</code>操作，而不是<code>HasOwnProperty</code>操作，即<code>has()</code>方法不判断一个属性是对象自身的属性，还是继承的属性。</p>\n<p>另外，虽然<code>for...in</code>循环也用到了<code>in</code>运算符，但是<code>has()</code>拦截对<code>for...in</code>循环不生效。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu1 = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"attr\">score</span>: <span class=\"number\">59</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> stu2 = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"attr\">score</span>: <span class=\"number\">99</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">has</span>(<span class=\"params\">target, prop</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop === <span class=\"string\">&#x27;score&#x27;</span> &amp;&amp; target[prop] &lt; <span class=\"number\">60</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;target.name&#125;</span> 不及格`</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> prop <span class=\"keyword\">in</span> target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> oproxy1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(stu1, handler);</span><br><span class=\"line\"><span class=\"keyword\">let</span> oproxy2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(stu2, handler);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;score&#x27;</span> <span class=\"keyword\">in</span> oproxy1</span><br><span class=\"line\"><span class=\"comment\">// 张三 不及格</span></span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;score&#x27;</span> <span class=\"keyword\">in</span> oproxy2</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> a <span class=\"keyword\">in</span> oproxy1) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(oproxy1[a]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 张三</span></span><br><span class=\"line\"><span class=\"comment\">// 59</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> b <span class=\"keyword\">in</span> oproxy2) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(oproxy2[b]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 李四</span></span><br><span class=\"line\"><span class=\"comment\">// 99</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>has()</code>拦截只对<code>in</code>运算符生效，对<code>for...in</code>循环不生效，导致不符合要求的属性没有被<code>for...in</code>循环所排除。</p>\n<h3 id=\"construct\"><a href=\"#construct\" class=\"headerlink\" title=\"construct()\"></a>construct()</h3><p><code>construct()</code>方法用于拦截<code>new</code>命令，下面是拦截对象的写法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  construct (target, args, newTarget) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> target(...args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>construct()</code>方法可以接受三个参数。</p>\n<ul>\n<li><code>target</code>：目标对象。</li>\n<li><code>args</code>：构造函数的参数数组。</li>\n<li><code>newTarget</code>：创造实例对象时，<code>new</code>命令作用的构造函数（下面例子的<code>p</code>）。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">construct</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;called: &#x27;</span> + args.join(<span class=\"string\">&#x27;, &#x27;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: args[<span class=\"number\">0</span>] * <span class=\"number\">10</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">new</span> p(<span class=\"number\">1</span>)).value</span><br><span class=\"line\"><span class=\"comment\">// &quot;called: 1&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n\n<p><code>construct()</code>方法返回的必须是一个对象，否则会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">construct</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, argumentsList</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> p() <span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"comment\">// Uncaught TypeError: &#x27;construct&#x27; on proxy: trap returned non-object (&#x27;1&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<p>另外，由于<code>construct()</code>拦截的是构造函数，所以它的目标对象必须是函数，否则就会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">construct</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, argumentsList</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> p() <span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"comment\">// Uncaught TypeError: p is not a constructor</span></span><br></pre></td></tr></table></figure>\n\n<p>上面例子中，拦截的目标对象不是一个函数，而是一个对象（<code>new Proxy()</code>的第一个参数），导致报错。</p>\n<p>注意，<code>construct()</code>方法中的<code>this</code>指向的是<code>handler</code>，而不是实例对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"attr\">construct</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span> === handler);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> target(...args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;, handler);</span><br><span class=\"line\"><span class=\"keyword\">new</span> p() <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deleteProperty\"><a href=\"#deleteProperty\" class=\"headerlink\" title=\"deleteProperty()\"></a>deleteProperty()</h3><p><code>deleteProperty</code>方法用于拦截<code>delete</code>操作，如果这个方法抛出错误或者返回<code>false</code>，当前属性就无法被<code>delete</code>命令删除。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  deleteProperty (target, key) &#123;</span><br><span class=\"line\">    invariant(key, <span class=\"string\">&#x27;delete&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> target[key];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invariant</span> (<span class=\"params\">key, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key[<span class=\"number\">0</span>] === <span class=\"string\">&#x27;_&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Invalid attempt to <span class=\"subst\">$&#123;action&#125;</span> private &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; property`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; <span class=\"attr\">_prop</span>: <span class=\"string\">&#x27;foo&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"><span class=\"keyword\">delete</span> proxy._prop</span><br><span class=\"line\"><span class=\"comment\">// Error: Invalid attempt to delete private &quot;_prop&quot; property</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>deleteProperty</code>方法拦截了<code>delete</code>操作符，删除第一个字符为下划线的属性会报错。</p>\n<p>注意，目标对象自身的不可配置（configurable）的属性，不能被<code>deleteProperty</code>方法删除，否则报错。</p>\n<h3 id=\"defineProperty\"><a href=\"#defineProperty\" class=\"headerlink\" title=\"defineProperty()\"></a>defineProperty()</h3><p><code>defineProperty()</code>方法拦截了<code>Object.defineProperty()</code>操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  defineProperty (target, key, descriptor) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> target = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\">proxy.foo = <span class=\"string\">&#x27;bar&#x27;</span> <span class=\"comment\">// 不会生效</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>defineProperty()</code>方法内部没有任何操作，只返回<code>false</code>，导致添加新属性总是无效。注意，这里的<code>false</code>只是用来提示操作失败，本身并不能阻止添加新属性。</p>\n<p>注意，如果目标对象不可扩展（non-extensible），则<code>defineProperty()</code>不能增加目标对象上不存在的属性，否则会报错。另外，如果目标对象的某个属性不可写（writable）或不可配置（configurable），则<code>defineProperty()</code>方法不得改变这两个设置。</p>\n<h3 id=\"getOwnPropertyDescriptor\"><a href=\"#getOwnPropertyDescriptor\" class=\"headerlink\" title=\"getOwnPropertyDescriptor()\"></a>getOwnPropertyDescriptor()</h3><p><code>getOwnPropertyDescriptor()</code>方法拦截<code>Object.getOwnPropertyDescriptor()</code>，返回一个属性描述对象或者<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  getOwnPropertyDescriptor (target, key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key[<span class=\"number\">0</span>] === <span class=\"string\">&#x27;_&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(target, key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; <span class=\"attr\">_foo</span>: <span class=\"string\">&#x27;bar&#x27;</span>, <span class=\"attr\">baz</span>: <span class=\"string\">&#x27;tar&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(proxy, <span class=\"string\">&#x27;wat&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(proxy, <span class=\"string\">&#x27;_foo&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(proxy, <span class=\"string\">&#x27;baz&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: &#x27;tar&#x27;, writable: true, enumerable: true, configurable: true &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>handler.getOwnPropertyDescriptor()</code>方法对于第一个字符为下划线的属性名会返回<code>undefined</code>。</p>\n<h3 id=\"getPrototypeOf\"><a href=\"#getPrototypeOf\" class=\"headerlink\" title=\"getPrototypeOf()\"></a>getPrototypeOf()</h3><p><code>getPrototypeOf()</code>方法主要用来拦截获取对象原型。具体来说，拦截下面这些操作。</p>\n<ul>\n<li><code>Object.prototype.__proto__</code></li>\n<li><code>Object.prototype.isPrototypeOf()</code></li>\n<li><code>Object.getPrototypeOf()</code></li>\n<li><code>Reflect.getPrototypeOf()</code></li>\n<li><code>instanceof</code></li>\n</ul>\n<p>下面是一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> proto = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getPrototypeOf</span>(<span class=\"params\">target</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> proto;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(p) === proto <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>getPrototypeOf()</code>方法拦截<code>Object.getPrototypeOf()</code>，返回<code>proto</code>对象。</p>\n<p>注意，<code>getPrototypeOf()</code>方法的返回值必须是对象或者<code>null</code>，否则报错。另外，如果目标对象不可扩展（non-extensible）， <code>getPrototypeOf()</code>方法必须返回目标对象的原型对象。</p>\n<h3 id=\"isExtensible\"><a href=\"#isExtensible\" class=\"headerlink\" title=\"isExtensible()\"></a>isExtensible()</h3><p><code>isExtensible()</code>方法拦截<code>Object.isExtensible()</code>操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">isExtensible</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;called&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.isExtensible(p)</span><br><span class=\"line\"><span class=\"comment\">// &quot;called&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码设置了<code>isExtensible()</code>方法，在调用<code>Object.isExtensible</code>时会输出<code>called</code>。</p>\n<p>注意，该方法只能返回布尔值，否则返回值会被自动转为布尔值。</p>\n<p>这个方法有一个强限制，它的返回值必须与目标对象的<code>isExtensible</code>属性保持一致，否则就会抛出错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.isExtensible(proxy) === <span class=\"built_in\">Object</span>.isExtensible(target)</span><br></pre></td></tr></table></figure>\n\n<p>下面是一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">isExtensible</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.isExtensible(p)</span><br><span class=\"line\"><span class=\"comment\">// Uncaught TypeError: &#x27;isExtensible&#x27; on proxy: trap result does not reflect extensibility of proxy target (which is &#x27;true&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ownKeys\"><a href=\"#ownKeys\" class=\"headerlink\" title=\"ownKeys()\"></a>ownKeys()</h3><p><code>ownKeys()</code>方法用来拦截对象自身属性的读取操作。具体来说，拦截以下操作。</p>\n<ul>\n<li><code>Object.getOwnPropertyNames()</code></li>\n<li><code>Object.getOwnPropertySymbols()</code></li>\n<li><code>Object.keys()</code></li>\n<li><code>for...in</code>循环</li>\n</ul>\n<p>下面是拦截<code>Object.keys()</code>的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> target = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ownKeys</span>(<span class=\"params\">target</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(proxy)</span><br><span class=\"line\"><span class=\"comment\">// [ &#x27;a&#x27; ]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码拦截了对于<code>target</code>对象的<code>Object.keys()</code>操作，只返回<code>a</code>、<code>b</code>、<code>c</code>三个属性之中的<code>a</code>属性。</p>\n<p>下面的例子是拦截第一个字符为下划线的属性名。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> target = &#123;</span><br><span class=\"line\">  <span class=\"attr\">_bar</span>: <span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">_prop</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">prop</span>: <span class=\"string\">&#x27;baz&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">  ownKeys (target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.ownKeys(target).filter(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> key[<span class=\"number\">0</span>] !== <span class=\"string\">&#x27;_&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(proxy)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(target[key]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &quot;baz&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，使用<code>Object.keys()</code>方法时，有三类属性会被<code>ownKeys()</code>方法自动过滤，不会返回。</p>\n<ul>\n<li>目标对象上不存在的属性</li>\n<li>属性名为 Symbol 值</li>\n<li>不可遍历（<code>enumerable</code>）的属性</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> target = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;secret&#x27;</span>)]: <span class=\"string\">&#x27;4&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(target, <span class=\"string\">&#x27;key&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"string\">&#x27;static&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ownKeys</span>(<span class=\"params\">target</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;secret&#x27;</span>), <span class=\"string\">&#x27;key&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(proxy)</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;a&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>ownKeys()</code>方法之中，显式返回不存在的属性（<code>d</code>）、Symbol 值（<code>Symbol.for(&#39;secret&#39;)</code>）、不可遍历的属性（<code>key</code>），结果都被自动过滤掉。</p>\n<p><code>ownKeys()</code>方法还可以拦截<code>Object.getOwnPropertyNames()</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">ownKeys</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(p)</span><br><span class=\"line\"><span class=\"comment\">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>for...in</code>循环也受到<code>ownKeys()</code>方法的拦截。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">hello</span>: <span class=\"string\">&#x27;world&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">  <span class=\"attr\">ownKeys</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> proxy) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key); <span class=\"comment\">// 没有任何输出</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>ownkeys()</code>指定只返回<code>a</code>和<code>b</code>属性，由于<code>obj</code>没有这两个属性，因此<code>for...in</code>循环不会有任何输出。</p>\n<p><code>ownKeys()</code>方法返回的数组成员，只能是字符串或 Symbol 值。如果有其他类型的值，或者返回的根本不是数组，就会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">  <span class=\"attr\">ownKeys</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">123</span>, <span class=\"literal\">true</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">null</span>, &#123;&#125;, []];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(p)</span><br><span class=\"line\"><span class=\"comment\">// Uncaught TypeError: 123 is not a valid property name</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>ownKeys()</code>方法虽然返回一个数组，但是每一个数组成员都不是字符串或 Symbol 值，因此就报错了。</p>\n<p>如果目标对象自身包含不可配置的属性，则该属性必须被<code>ownKeys()</code>方法返回，否则报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">&#x27;a&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"number\">10</span> &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">  <span class=\"attr\">ownKeys</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;b&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(p)</span><br><span class=\"line\"><span class=\"comment\">// Uncaught TypeError: &#x27;ownKeys&#x27; on proxy: trap result did not include &#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>obj</code>对象的<code>a</code>属性是不可配置的，这时<code>ownKeys()</code>方法返回的数组之中，必须包含<code>a</code>，否则会报错。</p>\n<p>另外，如果目标对象是不可扩展的（non-extensible），这时<code>ownKeys()</code>方法返回的数组之中，必须包含原对象的所有属性，且不能包含多余的属性，否则报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.preventExtensions(obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">  <span class=\"attr\">ownKeys</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(p)</span><br><span class=\"line\"><span class=\"comment\">// Uncaught TypeError: &#x27;ownKeys&#x27; on proxy: trap returned extra keys but proxy target is non-extensible</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>obj</code>对象是不可扩展的，这时<code>ownKeys()</code>方法返回的数组之中，包含了<code>obj</code>对象的多余属性<code>b</code>，所以导致了报错。</p>\n<h3 id=\"preventExtensions\"><a href=\"#preventExtensions\" class=\"headerlink\" title=\"preventExtensions()\"></a>preventExtensions()</h3><p><code>preventExtensions()</code>方法拦截<code>Object.preventExtensions()</code>。该方法必须返回一个布尔值，否则会被自动转为布尔值。</p>\n<p>这个方法有一个限制，只有目标对象不可扩展时（即<code>Object.isExtensible(proxy)</code>为<code>false</code>），<code>proxy.preventExtensions</code>才能返回<code>true</code>，否则会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">preventExtensions</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.preventExtensions(proxy)</span><br><span class=\"line\"><span class=\"comment\">// Uncaught TypeError: &#x27;preventExtensions&#x27; on proxy: trap returned truish but the proxy target is extensible</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>proxy.preventExtensions()</code>方法返回<code>true</code>，但这时<code>Object.isExtensible(proxy)</code>会返回<code>true</code>，因此报错。</p>\n<p>为了防止出现这个问题，通常要在<code>proxy.preventExtensions()</code>方法里面，调用一次<code>Object.preventExtensions()</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">preventExtensions</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;called&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.preventExtensions(target);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.preventExtensions(proxy)</span><br><span class=\"line\"><span class=\"comment\">// &quot;called&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// Proxy &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"setPrototypeOf\"><a href=\"#setPrototypeOf\" class=\"headerlink\" title=\"setPrototypeOf()\"></a>setPrototypeOf()</h3><p><code>setPrototypeOf()</code>方法主要用来拦截<code>Object.setPrototypeOf()</code>方法。</p>\n<p>下面是一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  setPrototypeOf (target, proto) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;Changing the prototype is forbidden&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proto = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> target = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(proxy, proto);</span><br><span class=\"line\"><span class=\"comment\">// Error: Changing the prototype is forbidden</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，只要修改<code>target</code>的原型对象，就会报错。</p>\n<p>注意，该方法只能返回布尔值，否则会被自动转为布尔值。另外，如果目标对象不可扩展（non-extensible），<code>setPrototypeOf()</code>方法不得改变目标对象的原型。</p>\n<h2 id=\"Proxy-revocable\"><a href=\"#Proxy-revocable\" class=\"headerlink\" title=\"Proxy.revocable()\"></a>Proxy.revocable()</h2><p><code>Proxy.revocable()</code>方法返回一个可取消的 Proxy 实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> target = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> handler = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;proxy, revoke&#125; = <span class=\"built_in\">Proxy</span>.revocable(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.foo = <span class=\"number\">123</span>;</span><br><span class=\"line\">proxy.foo <span class=\"comment\">// 123</span></span><br><span class=\"line\"></span><br><span class=\"line\">revoke();</span><br><span class=\"line\">proxy.foo <span class=\"comment\">// TypeError: Revoked</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Proxy.revocable()</code>方法返回一个对象，该对象的<code>proxy</code>属性是<code>Proxy</code>实例，<code>revoke</code>属性是一个函数，可以取消<code>Proxy</code>实例。上面代码中，当执行<code>revoke</code>函数之后，再访问<code>Proxy</code>实例，就会抛出一个错误。</p>\n<p><code>Proxy.revocable()</code>的一个使用场景是，目标对象不允许直接访问，必须通过代理访问，一旦访问结束，就收回代理权，不允许再次访问。</p>\n<h2 id=\"this-问题\"><a href=\"#this-问题\" class=\"headerlink\" title=\"this 问题\"></a>this 问题</h2><p>虽然 Proxy 可以代理针对目标对象的访问，但它不是目标对象的透明代理，即不做任何拦截的情况下，也无法保证与目标对象的行为一致。主要原因就是在 Proxy 代理的情况下，目标对象内部的<code>this</code>关键字会指向 Proxy 代理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123;</span><br><span class=\"line\">  <span class=\"attr\">m</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span> === proxy);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">target.m() <span class=\"comment\">// false</span></span><br><span class=\"line\">proxy.m()  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，一旦<code>proxy</code>代理<code>target</code>，<code>target.m()</code>内部的<code>this</code>就是指向<code>proxy</code>，而不是<code>target</code>。</p>\n<p>下面是一个例子，由于<code>this</code>指向的变化，导致 Proxy 无法代理目标对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _name = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">    _name.set(<span class=\"built_in\">this</span>, name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title\">name</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _name.get(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> jane = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;Jane&#x27;</span>);</span><br><span class=\"line\">jane.name <span class=\"comment\">// &#x27;Jane&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(jane, &#123;&#125;);</span><br><span class=\"line\">proxy.name <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，目标对象<code>jane</code>的<code>name</code>属性，实际保存在外部<code>WeakMap</code>对象<code>_name</code>上面，通过<code>this</code>键区分。由于通过<code>proxy.name</code>访问时，<code>this</code>指向<code>proxy</code>，导致无法取到值，所以返回<code>undefined</code>。</p>\n<p>此外，有些原生对象的内部属性，只有通过正确的<code>this</code>才能拿到，所以 Proxy 也无法代理这些原生对象的属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.getDate();</span><br><span class=\"line\"><span class=\"comment\">// TypeError: this is not a Date object.</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>getDate()</code>方法只能在<code>Date</code>对象实例上面拿到，如果<code>this</code>不是<code>Date</code>对象实例就会报错。这时，<code>this</code>绑定原始对象，就可以解决这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;2015-01-01&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, prop</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop === <span class=\"string\">&#x27;getDate&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> target.getDate.bind(target);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, prop);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.getDate() <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>另外，Proxy 拦截函数内部的<code>this</code>，指向的是<code>handler</code>对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, key, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span> === handler);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Hello, &#x27;</span> + key;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, key, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span> === handler);</span><br><span class=\"line\">    target[key] = value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.foo</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// Hello, foo</span></span><br><span class=\"line\"></span><br><span class=\"line\">proxy.foo = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面例子中，<code>get()</code>和<code>set()</code>拦截函数内部的<code>this</code>，指向的都是<code>handler</code>对象。</p>\n<h2 id=\"实例：Web-服务的客户端\"><a href=\"#实例：Web-服务的客户端\" class=\"headerlink\" title=\"实例：Web 服务的客户端\"></a>实例：Web 服务的客户端</h2><p>Proxy 对象可以拦截目标对象的任意属性，这使得它很合适用来写 Web 服务的客户端。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> service = createWebService(<span class=\"string\">&#x27;http://example.com/data&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">service.employees().then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> employees = <span class=\"built_in\">JSON</span>.parse(json);</span><br><span class=\"line\">  <span class=\"comment\">// ···</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上面代码新建了一个 Web 服务的接口，这个接口返回各种数据。Proxy 可以拦截这个对象的任意属性，所以不用为每一种数据写一个适配方法，只要写一个 Proxy 拦截就可以了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createWebService</span>(<span class=\"params\">baseUrl</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, propKey, receiver</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> httpGet(baseUrl + <span class=\"string\">&#x27;/&#x27;</span> + propKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同理，Proxy 也可以用来实现数据库的 ORM 层。</p>\n<h2 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h2><p>以上内容均来自阮一峰老师的<a href=\"https://es6.ruanyifeng.com/#docs/proxy\">《ESMAScript6 入门》Proxy</a>一章，抄下来为了方便翻阅。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>​        Proxy用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种<strong>元编程</strong>（meta programming），即对编程语言进行编程。</p>\n<p>​        Proxy可以理解成，在目标对象之前架设一层”拦截“，外界对该对象的访问，都必须通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy这个词的原意是代理，用在这里表示由它来”代理“某些操作，可以译为”代理器”。</p>\n<p>​        翻译成大白话就是：Proxy可以改变对象的默认操作。</p>\n<p>Proxy中需要理解的三个属性：</p>\n<ul>\n<li><strong>target</strong>：an Object which the proxy virtualizes. （目标对象）</li>\n<li><strong>Handler</strong>：a Placeholder Object which contains traps. （包含重写方法的对象）</li>\n<li><strong>trap</strong>：the Method that provide property accss of the target object. （重写的方法，比如get和set）</li>\n</ul>\n<h3 id=\"可拦截操作\"><a href=\"#可拦截操作\" class=\"headerlink\" title=\"可拦截操作\"></a>可拦截操作</h3><p>其中<strong>trap</strong>可支持拦截的操作一共13种：</p>\n<ul>\n<li>**get(target, propKey, receiver)**：拦截对象属性的读取，比如<code>proxy.foo</code>和<code>proxy[&#39;foo&#39;]</code>。</li>\n<li>**set(target, propKey, value, receiver)**：拦截对象属性的设置，比如<code>proxy.foo = v</code>或<code>proxy[&#39;foo&#39;] = 123</code>，返回一个布尔值。</li>\n<li>**has(target, propKey)**：拦截<code>propKey in proxy</code>的操作，返回一个布尔值。</li>\n<li>**deleteProperty(target, propKey)**：拦截<code>delete proxy[propKey]</code>的操作，返回一个布尔值。</li>\n<li>**ownKeys(target)**：拦截<code>Object.getOwnPropertyNames(proxy)</code>、<code>Object.getOwnPropertySysmbols(proxy)</code>、<code>Object.keys(proxy)</code>、<code>for...in</code>循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而<code>Object.keys()</code>的返回结果仅包括目标对象自身的可遍历属性。</li>\n<li>**getOwnPropertyDescriptor(target, propKey)**：拦截<code>Object.getOwnPropertyDescriptor(proxy, propKey)</code>，返回属性的描述对象。</li>\n<li>**defineProperty(target, propKey, propDesc)**：拦截<code>Object.defineProperty(proxy, propKey, propDesc）</code>、<code>Object.defineProperties(proxy, propDescs)</code>，返回一个布尔值。</li>\n<li>**preventExtensions(target)**：拦截<code>Object.preventExtensions(proxy)</code>，返回一个布尔值。</li>\n<li>**getPrototypeOf(target)**：拦截<code>Object.getPrototypeOf(proxy)</code>，返回一个对象。</li>\n<li>**isExtensible(target)**：拦截<code>Object.isExtensible(proxy)</code>，返回一个布尔值。</li>\n<li>**setPrototypeOf(target, proto)**：拦截<code>Object.setPrototypeOf(proxy, proto)</code>，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</li>\n<li>**apply(target, object, args)**：拦截 Proxy 实例作为函数调用的操作，比如<code>proxy(...args)</code>、<code>proxy.call(object, ...args)</code>、<code>proxy.apply(...)</code>。</li>\n<li>**construct(target, args)**：拦截 Proxy 实例作为构造函数调用的操作，比如<code>new proxy(...args)</code>。</li>\n</ul>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><h3 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get()\"></a>get()</h3><p><code>get</code>方法用于拦截某个属性的读取操作，可以接受三个参数，依次为目标对象、属性名和 proxy 实例本身（严格地说，是操作行为所针对的对象），其中最后一个参数可选。</p>\n<p><code>get</code>方法的用法，上文已经有一个例子，下面是另一个拦截读取操作的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(person, &#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, propKey</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (propKey <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> target[propKey];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">ReferenceError</span>(<span class=\"string\">&quot;Prop name \\&quot;&quot;</span> + propKey + <span class=\"string\">&quot;\\&quot; does not exist.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.name <span class=\"comment\">// &quot;张三&quot;</span></span><br><span class=\"line\">proxy.age <span class=\"comment\">// 抛出一个错误</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码表示，如果访问目标对象不存在的属性，会抛出一个错误。如果没有这个拦截函数，访问不存在的属性，只会返回<code>undefined</code>。</p>\n<p><code>get</code>方法可以继承。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> proto = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, propertyKey, receiver</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;GET &#x27;</span> + propertyKey);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target[propertyKey];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"built_in\">Object</span>.create(proto);</span><br><span class=\"line\">obj.foo <span class=\"comment\">// &quot;GET foo&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，拦截操作定义在<code>Prototype</code>对象上面，所以如果读取<code>obj</code>对象继承的属性时，拦截会生效。</p>\n<p>下面的例子使用<code>get</code>拦截，实现数组读取负数的索引。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createArray</span>(<span class=\"params\">...elements</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, propKey, receiver</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> index = <span class=\"built_in\">Number</span>(propKey);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        propKey = <span class=\"built_in\">String</span>(target.length + index);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, propKey, receiver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> target = [];</span><br><span class=\"line\">  target.push(...elements);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = createArray(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\">arr[-<span class=\"number\">1</span>] <span class=\"comment\">// c</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，数组的位置参数是<code>-1</code>，就会输出数组的倒数第一个成员。</p>\n<p>利用 Proxy，可以将读取属性的操作（<code>get</code>），转变为执行某个函数，从而实现属性的链式操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pipe = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> funcStack = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> oproxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125; , &#123;</span><br><span class=\"line\">    <span class=\"attr\">get</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pipeObject, fnName</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (fnName === <span class=\"string\">&#x27;get&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> funcStack.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val, fn</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> fn(val);</span><br><span class=\"line\">        &#125;,value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      funcStack.push(<span class=\"built_in\">window</span>[fnName]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> oproxy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> oproxy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> double = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n * <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pow    = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n * n;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseInt = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n.toString().split(<span class=\"string\">&quot;&quot;</span>).reverse().join(<span class=\"string\">&quot;&quot;</span>) | <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">pipe(<span class=\"number\">3</span>).double.pow.reverseInt.get; <span class=\"comment\">// 63</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码设置 Proxy 以后，达到了将函数名链式使用的效果。</p>\n<p>下面的例子则是利用<code>get</code>拦截，实现一个生成各种 DOM 节点的通用函数<code>dom</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dom = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, property</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attrs = &#123;&#125;, ...children</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> el = <span class=\"built_in\">document</span>.createElement(property);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> prop <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(attrs)) &#123;</span><br><span class=\"line\">        el.setAttribute(prop, attrs[prop]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> child <span class=\"keyword\">of</span> children) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> child === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">          child = <span class=\"built_in\">document</span>.createTextNode(child);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        el.appendChild(child);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> el;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> el = dom.div(&#123;&#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;Hello, my name is &#x27;</span>,</span><br><span class=\"line\">  dom.a(&#123;<span class=\"attr\">href</span>: <span class=\"string\">&#x27;//example.com&#x27;</span>&#125;, <span class=\"string\">&#x27;Mark&#x27;</span>),</span><br><span class=\"line\">  <span class=\"string\">&#x27;. I like:&#x27;</span>,</span><br><span class=\"line\">  dom.ul(&#123;&#125;,</span><br><span class=\"line\">    dom.li(&#123;&#125;, <span class=\"string\">&#x27;The web&#x27;</span>),</span><br><span class=\"line\">    dom.li(&#123;&#125;, <span class=\"string\">&#x27;Food&#x27;</span>),</span><br><span class=\"line\">    dom.li(&#123;&#125;, <span class=\"string\">&#x27;…actually that\\&#x27;s it&#x27;</span>)</span><br><span class=\"line\">  )</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(el);</span><br></pre></td></tr></table></figure>\n\n<p>下面是一个<code>get</code>方法的第三个参数的例子，它总是指向原始的读操作所在的那个对象，一般情况下就是 Proxy 实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> receiver;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">proxy.getReceiver === proxy <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>proxy</code>对象的<code>getReceiver</code>属性是由<code>proxy</code>对象提供的，所以<code>receiver</code>指向<code>proxy</code>对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> receiver;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> d = <span class=\"built_in\">Object</span>.create(proxy);</span><br><span class=\"line\">d.a === d <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>d</code>对象本身没有<code>a</code>属性，所以读取<code>d.a</code>的时候，会去<code>d</code>的原型<code>proxy</code>对象找。这时，<code>receiver</code>就指向<code>d</code>，代表原始的读操作所在的那个对象。</p>\n<p>如果一个属性不可配置（configurable）且不可写（writable），则 Proxy 不能修改该属性，否则通过 Proxy 对象访问该属性会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = <span class=\"built_in\">Object</span>.defineProperties(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>: <span class=\"number\">123</span>,</span><br><span class=\"line\">    <span class=\"attr\">writable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, propKey</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.foo</span><br><span class=\"line\"><span class=\"comment\">// TypeError: Invariant check failed</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set()\"></a>set()</h3><p><code>set</code>方法用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和 Proxy 实例本身，其中最后一个参数可选。</p>\n<p>假定<code>Person</code>对象有一个<code>age</code>属性，该属性应该是一个不大于 200 的整数，那么可以使用<code>Proxy</code>保证<code>age</code>的属性值符合要求。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> validator = &#123;</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, prop, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop === <span class=\"string\">&#x27;age&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"built_in\">Number</span>.isInteger(value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&#x27;The age is not an integer&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RangeError</span>(<span class=\"string\">&#x27;The age seems invalid&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对于满足条件的 age 属性以及其他属性，直接保存</span></span><br><span class=\"line\">    obj[prop] = value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, validator);</span><br><span class=\"line\"></span><br><span class=\"line\">person.age = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">person.age <span class=\"comment\">// 100</span></span><br><span class=\"line\">person.age = <span class=\"string\">&#x27;young&#x27;</span> <span class=\"comment\">// 报错</span></span><br><span class=\"line\">person.age = <span class=\"number\">300</span> <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，由于设置了存值函数<code>set</code>，任何不符合要求的<code>age</code>属性赋值，都会抛出一个错误，这是数据验证的一种实现方法。利用<code>set</code>方法，还可以数据绑定，即每当对象发生变化时，会自动更新 DOM。</p>\n<p>有时，我们会在对象上面设置内部属性，属性名的第一个字符使用下划线开头，表示这些属性不应该被外部使用。结合<code>get</code>和<code>set</code>方法，就可以做到防止这些内部属性被外部读写。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  get (target, key) &#123;</span><br><span class=\"line\">    invariant(key, <span class=\"string\">&#x27;get&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target[key];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set (target, key, value) &#123;</span><br><span class=\"line\">    invariant(key, <span class=\"string\">&#x27;set&#x27;</span>);</span><br><span class=\"line\">    target[key] = value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invariant</span> (<span class=\"params\">key, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key[<span class=\"number\">0</span>] === <span class=\"string\">&#x27;_&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Invalid attempt to <span class=\"subst\">$&#123;action&#125;</span> private &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; property`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> target = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\">proxy._prop</span><br><span class=\"line\"><span class=\"comment\">// Error: Invalid attempt to get private &quot;_prop&quot; property</span></span><br><span class=\"line\">proxy._prop = <span class=\"string\">&#x27;c&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// Error: Invalid attempt to set private &quot;_prop&quot; property</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，只要读写的属性名的第一个字符是下划线，一律抛错，从而达到禁止读写内部属性的目的。</p>\n<p>下面是<code>set</code>方法第四个参数的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, prop, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    obj[prop] = receiver;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, handler);</span><br><span class=\"line\">proxy.foo = <span class=\"string\">&#x27;bar&#x27;</span>;</span><br><span class=\"line\">proxy.foo === proxy <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>set</code>方法的第四个参数<code>receiver</code>，指的是原始的操作行为所在的那个对象，一般情况下是<code>proxy</code>实例本身，请看下面的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, prop, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    obj[prop] = receiver;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, handler);</span><br><span class=\"line\"><span class=\"keyword\">const</span> myObj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(myObj, proxy);</span><br><span class=\"line\"></span><br><span class=\"line\">myObj.foo = <span class=\"string\">&#x27;bar&#x27;</span>;</span><br><span class=\"line\">myObj.foo === myObj <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，设置<code>myObj.foo</code>属性的值时，<code>myObj</code>并没有<code>foo</code>属性，因此引擎会到<code>myObj</code>的原型链去找<code>foo</code>属性。<code>myObj</code>的原型对象<code>proxy</code>是一个 Proxy 实例，设置它的<code>foo</code>属性会触发<code>set</code>方法。这时，第四个参数<code>receiver</code>就指向原始赋值行为所在的对象<code>myObj</code>。</p>\n<p>注意，如果目标对象自身的某个属性不可写，那么<code>set</code>方法将不起作用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">&#x27;foo&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, prop, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    obj[prop] = <span class=\"string\">&#x27;baz&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, handler);</span><br><span class=\"line\">proxy.foo = <span class=\"string\">&#x27;baz&#x27;</span>;</span><br><span class=\"line\">proxy.foo <span class=\"comment\">// &quot;bar&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>obj.foo</code>属性不可写，Proxy 对这个属性的<code>set</code>代理将不会生效。</p>\n<p>注意，<code>set</code>代理应当返回一个布尔值。严格模式下，<code>set</code>代理如果没有返回<code>true</code>，就会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, prop, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    obj[prop] = receiver;</span><br><span class=\"line\">    <span class=\"comment\">// 无论有没有下面这一行，都会报错</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, handler);</span><br><span class=\"line\">proxy.foo = <span class=\"string\">&#x27;bar&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// TypeError: &#x27;set&#x27; on proxy: trap returned falsish for property &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，严格模式下，<code>set</code>代理返回<code>false</code>或者<code>undefined</code>，都会报错。</p>\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply()\"></a>apply()</h3><p><code>apply</code>方法拦截函数的调用、<code>call</code>和<code>apply</code>操作。</p>\n<p><code>apply</code>方法可以接受三个参数，分别是目标对象、目标对象的上下文对象（<code>this</code>）和目标对象的参数数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  apply (target, ctx, args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.apply(...arguments);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>下面是一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> target = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">&#x27;I am the target&#x27;</span>; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"attr\">apply</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;I am the proxy&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">p()</span><br><span class=\"line\"><span class=\"comment\">// &quot;I am the proxy&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，变量<code>p</code>是 Proxy 的实例，当它作为函数调用时（<code>p()</code>），就会被<code>apply</code>方法拦截，返回一个字符串。</p>\n<p>下面是另外一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> twice = &#123;</span><br><span class=\"line\">  apply (target, ctx, args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.apply(...arguments) * <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span> (<span class=\"params\">left, right</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> left + right;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(sum, twice);</span><br><span class=\"line\">proxy(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 6</span></span><br><span class=\"line\">proxy.call(<span class=\"literal\">null</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>) <span class=\"comment\">// 22</span></span><br><span class=\"line\">proxy.apply(<span class=\"literal\">null</span>, [<span class=\"number\">7</span>, <span class=\"number\">8</span>]) <span class=\"comment\">// 30</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，每当执行<code>proxy</code>函数（直接调用或<code>call</code>和<code>apply</code>调用），就会被<code>apply</code>方法拦截。</p>\n<p>另外，直接调用<code>Reflect.apply</code>方法，也会被拦截。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.apply(proxy, <span class=\"literal\">null</span>, [<span class=\"number\">9</span>, <span class=\"number\">10</span>]) <span class=\"comment\">// 38</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"has\"><a href=\"#has\" class=\"headerlink\" title=\"has()\"></a>has()</h3><p><code>has()</code>方法用来拦截<code>HasProperty</code>操作，即判断对象是否具有某个属性时，这个方法会生效。典型的操作就是<code>in</code>运算符。</p>\n<p><code>has()</code>方法可以接受两个参数，分别是目标对象、需查询的属性名。</p>\n<p>下面的例子使用<code>has()</code>方法隐藏某些属性，不被<code>in</code>运算符发现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  has (target, key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key[<span class=\"number\">0</span>] === <span class=\"string\">&#x27;_&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; <span class=\"attr\">_prop</span>: <span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"attr\">prop</span>: <span class=\"string\">&#x27;foo&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"><span class=\"string\">&#x27;_prop&#x27;</span> <span class=\"keyword\">in</span> proxy <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，如果原对象的属性名的第一个字符是下划线，<code>proxy.has()</code>就会返回<code>false</code>，从而不会被<code>in</code>运算符发现。</p>\n<p>如果原对象不可配置或者禁止扩展，这时<code>has()</code>拦截会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">10</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.preventExtensions(obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">  <span class=\"attr\">has</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, prop</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> p <span class=\"comment\">// TypeError is thrown</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>obj</code>对象禁止扩展，结果使用<code>has</code>拦截就会报错。也就是说，如果某个属性不可配置（或者目标对象不可扩展），则<code>has()</code>方法就不得“隐藏”（即返回<code>false</code>）目标对象的该属性。</p>\n<p>值得注意的是，<code>has()</code>方法拦截的是<code>HasProperty</code>操作，而不是<code>HasOwnProperty</code>操作，即<code>has()</code>方法不判断一个属性是对象自身的属性，还是继承的属性。</p>\n<p>另外，虽然<code>for...in</code>循环也用到了<code>in</code>运算符，但是<code>has()</code>拦截对<code>for...in</code>循环不生效。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu1 = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"attr\">score</span>: <span class=\"number\">59</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> stu2 = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"attr\">score</span>: <span class=\"number\">99</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">has</span>(<span class=\"params\">target, prop</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop === <span class=\"string\">&#x27;score&#x27;</span> &amp;&amp; target[prop] &lt; <span class=\"number\">60</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;target.name&#125;</span> 不及格`</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> prop <span class=\"keyword\">in</span> target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> oproxy1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(stu1, handler);</span><br><span class=\"line\"><span class=\"keyword\">let</span> oproxy2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(stu2, handler);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;score&#x27;</span> <span class=\"keyword\">in</span> oproxy1</span><br><span class=\"line\"><span class=\"comment\">// 张三 不及格</span></span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;score&#x27;</span> <span class=\"keyword\">in</span> oproxy2</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> a <span class=\"keyword\">in</span> oproxy1) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(oproxy1[a]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 张三</span></span><br><span class=\"line\"><span class=\"comment\">// 59</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> b <span class=\"keyword\">in</span> oproxy2) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(oproxy2[b]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 李四</span></span><br><span class=\"line\"><span class=\"comment\">// 99</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>has()</code>拦截只对<code>in</code>运算符生效，对<code>for...in</code>循环不生效，导致不符合要求的属性没有被<code>for...in</code>循环所排除。</p>\n<h3 id=\"construct\"><a href=\"#construct\" class=\"headerlink\" title=\"construct()\"></a>construct()</h3><p><code>construct()</code>方法用于拦截<code>new</code>命令，下面是拦截对象的写法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  construct (target, args, newTarget) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> target(...args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>construct()</code>方法可以接受三个参数。</p>\n<ul>\n<li><code>target</code>：目标对象。</li>\n<li><code>args</code>：构造函数的参数数组。</li>\n<li><code>newTarget</code>：创造实例对象时，<code>new</code>命令作用的构造函数（下面例子的<code>p</code>）。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">construct</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;called: &#x27;</span> + args.join(<span class=\"string\">&#x27;, &#x27;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: args[<span class=\"number\">0</span>] * <span class=\"number\">10</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">new</span> p(<span class=\"number\">1</span>)).value</span><br><span class=\"line\"><span class=\"comment\">// &quot;called: 1&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n\n<p><code>construct()</code>方法返回的必须是一个对象，否则会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">construct</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, argumentsList</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> p() <span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"comment\">// Uncaught TypeError: &#x27;construct&#x27; on proxy: trap returned non-object (&#x27;1&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<p>另外，由于<code>construct()</code>拦截的是构造函数，所以它的目标对象必须是函数，否则就会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">construct</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, argumentsList</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> p() <span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"comment\">// Uncaught TypeError: p is not a constructor</span></span><br></pre></td></tr></table></figure>\n\n<p>上面例子中，拦截的目标对象不是一个函数，而是一个对象（<code>new Proxy()</code>的第一个参数），导致报错。</p>\n<p>注意，<code>construct()</code>方法中的<code>this</code>指向的是<code>handler</code>，而不是实例对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"attr\">construct</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span> === handler);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> target(...args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;, handler);</span><br><span class=\"line\"><span class=\"keyword\">new</span> p() <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deleteProperty\"><a href=\"#deleteProperty\" class=\"headerlink\" title=\"deleteProperty()\"></a>deleteProperty()</h3><p><code>deleteProperty</code>方法用于拦截<code>delete</code>操作，如果这个方法抛出错误或者返回<code>false</code>，当前属性就无法被<code>delete</code>命令删除。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  deleteProperty (target, key) &#123;</span><br><span class=\"line\">    invariant(key, <span class=\"string\">&#x27;delete&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> target[key];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invariant</span> (<span class=\"params\">key, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key[<span class=\"number\">0</span>] === <span class=\"string\">&#x27;_&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Invalid attempt to <span class=\"subst\">$&#123;action&#125;</span> private &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; property`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; <span class=\"attr\">_prop</span>: <span class=\"string\">&#x27;foo&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"><span class=\"keyword\">delete</span> proxy._prop</span><br><span class=\"line\"><span class=\"comment\">// Error: Invalid attempt to delete private &quot;_prop&quot; property</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>deleteProperty</code>方法拦截了<code>delete</code>操作符，删除第一个字符为下划线的属性会报错。</p>\n<p>注意，目标对象自身的不可配置（configurable）的属性，不能被<code>deleteProperty</code>方法删除，否则报错。</p>\n<h3 id=\"defineProperty\"><a href=\"#defineProperty\" class=\"headerlink\" title=\"defineProperty()\"></a>defineProperty()</h3><p><code>defineProperty()</code>方法拦截了<code>Object.defineProperty()</code>操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  defineProperty (target, key, descriptor) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> target = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\">proxy.foo = <span class=\"string\">&#x27;bar&#x27;</span> <span class=\"comment\">// 不会生效</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>defineProperty()</code>方法内部没有任何操作，只返回<code>false</code>，导致添加新属性总是无效。注意，这里的<code>false</code>只是用来提示操作失败，本身并不能阻止添加新属性。</p>\n<p>注意，如果目标对象不可扩展（non-extensible），则<code>defineProperty()</code>不能增加目标对象上不存在的属性，否则会报错。另外，如果目标对象的某个属性不可写（writable）或不可配置（configurable），则<code>defineProperty()</code>方法不得改变这两个设置。</p>\n<h3 id=\"getOwnPropertyDescriptor\"><a href=\"#getOwnPropertyDescriptor\" class=\"headerlink\" title=\"getOwnPropertyDescriptor()\"></a>getOwnPropertyDescriptor()</h3><p><code>getOwnPropertyDescriptor()</code>方法拦截<code>Object.getOwnPropertyDescriptor()</code>，返回一个属性描述对象或者<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  getOwnPropertyDescriptor (target, key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key[<span class=\"number\">0</span>] === <span class=\"string\">&#x27;_&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(target, key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; <span class=\"attr\">_foo</span>: <span class=\"string\">&#x27;bar&#x27;</span>, <span class=\"attr\">baz</span>: <span class=\"string\">&#x27;tar&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(proxy, <span class=\"string\">&#x27;wat&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(proxy, <span class=\"string\">&#x27;_foo&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(proxy, <span class=\"string\">&#x27;baz&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: &#x27;tar&#x27;, writable: true, enumerable: true, configurable: true &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>handler.getOwnPropertyDescriptor()</code>方法对于第一个字符为下划线的属性名会返回<code>undefined</code>。</p>\n<h3 id=\"getPrototypeOf\"><a href=\"#getPrototypeOf\" class=\"headerlink\" title=\"getPrototypeOf()\"></a>getPrototypeOf()</h3><p><code>getPrototypeOf()</code>方法主要用来拦截获取对象原型。具体来说，拦截下面这些操作。</p>\n<ul>\n<li><code>Object.prototype.__proto__</code></li>\n<li><code>Object.prototype.isPrototypeOf()</code></li>\n<li><code>Object.getPrototypeOf()</code></li>\n<li><code>Reflect.getPrototypeOf()</code></li>\n<li><code>instanceof</code></li>\n</ul>\n<p>下面是一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> proto = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getPrototypeOf</span>(<span class=\"params\">target</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> proto;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(p) === proto <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>getPrototypeOf()</code>方法拦截<code>Object.getPrototypeOf()</code>，返回<code>proto</code>对象。</p>\n<p>注意，<code>getPrototypeOf()</code>方法的返回值必须是对象或者<code>null</code>，否则报错。另外，如果目标对象不可扩展（non-extensible）， <code>getPrototypeOf()</code>方法必须返回目标对象的原型对象。</p>\n<h3 id=\"isExtensible\"><a href=\"#isExtensible\" class=\"headerlink\" title=\"isExtensible()\"></a>isExtensible()</h3><p><code>isExtensible()</code>方法拦截<code>Object.isExtensible()</code>操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">isExtensible</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;called&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.isExtensible(p)</span><br><span class=\"line\"><span class=\"comment\">// &quot;called&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码设置了<code>isExtensible()</code>方法，在调用<code>Object.isExtensible</code>时会输出<code>called</code>。</p>\n<p>注意，该方法只能返回布尔值，否则返回值会被自动转为布尔值。</p>\n<p>这个方法有一个强限制，它的返回值必须与目标对象的<code>isExtensible</code>属性保持一致，否则就会抛出错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.isExtensible(proxy) === <span class=\"built_in\">Object</span>.isExtensible(target)</span><br></pre></td></tr></table></figure>\n\n<p>下面是一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">isExtensible</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.isExtensible(p)</span><br><span class=\"line\"><span class=\"comment\">// Uncaught TypeError: &#x27;isExtensible&#x27; on proxy: trap result does not reflect extensibility of proxy target (which is &#x27;true&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ownKeys\"><a href=\"#ownKeys\" class=\"headerlink\" title=\"ownKeys()\"></a>ownKeys()</h3><p><code>ownKeys()</code>方法用来拦截对象自身属性的读取操作。具体来说，拦截以下操作。</p>\n<ul>\n<li><code>Object.getOwnPropertyNames()</code></li>\n<li><code>Object.getOwnPropertySymbols()</code></li>\n<li><code>Object.keys()</code></li>\n<li><code>for...in</code>循环</li>\n</ul>\n<p>下面是拦截<code>Object.keys()</code>的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> target = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ownKeys</span>(<span class=\"params\">target</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(proxy)</span><br><span class=\"line\"><span class=\"comment\">// [ &#x27;a&#x27; ]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码拦截了对于<code>target</code>对象的<code>Object.keys()</code>操作，只返回<code>a</code>、<code>b</code>、<code>c</code>三个属性之中的<code>a</code>属性。</p>\n<p>下面的例子是拦截第一个字符为下划线的属性名。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> target = &#123;</span><br><span class=\"line\">  <span class=\"attr\">_bar</span>: <span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">_prop</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">prop</span>: <span class=\"string\">&#x27;baz&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">  ownKeys (target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.ownKeys(target).filter(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> key[<span class=\"number\">0</span>] !== <span class=\"string\">&#x27;_&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(proxy)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(target[key]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &quot;baz&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，使用<code>Object.keys()</code>方法时，有三类属性会被<code>ownKeys()</code>方法自动过滤，不会返回。</p>\n<ul>\n<li>目标对象上不存在的属性</li>\n<li>属性名为 Symbol 值</li>\n<li>不可遍历（<code>enumerable</code>）的属性</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> target = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;secret&#x27;</span>)]: <span class=\"string\">&#x27;4&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(target, <span class=\"string\">&#x27;key&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"string\">&#x27;static&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ownKeys</span>(<span class=\"params\">target</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;secret&#x27;</span>), <span class=\"string\">&#x27;key&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(proxy)</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;a&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>ownKeys()</code>方法之中，显式返回不存在的属性（<code>d</code>）、Symbol 值（<code>Symbol.for(&#39;secret&#39;)</code>）、不可遍历的属性（<code>key</code>），结果都被自动过滤掉。</p>\n<p><code>ownKeys()</code>方法还可以拦截<code>Object.getOwnPropertyNames()</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">ownKeys</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(p)</span><br><span class=\"line\"><span class=\"comment\">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>for...in</code>循环也受到<code>ownKeys()</code>方法的拦截。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">hello</span>: <span class=\"string\">&#x27;world&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">  <span class=\"attr\">ownKeys</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> proxy) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key); <span class=\"comment\">// 没有任何输出</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>ownkeys()</code>指定只返回<code>a</code>和<code>b</code>属性，由于<code>obj</code>没有这两个属性，因此<code>for...in</code>循环不会有任何输出。</p>\n<p><code>ownKeys()</code>方法返回的数组成员，只能是字符串或 Symbol 值。如果有其他类型的值，或者返回的根本不是数组，就会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">  <span class=\"attr\">ownKeys</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">123</span>, <span class=\"literal\">true</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">null</span>, &#123;&#125;, []];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(p)</span><br><span class=\"line\"><span class=\"comment\">// Uncaught TypeError: 123 is not a valid property name</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>ownKeys()</code>方法虽然返回一个数组，但是每一个数组成员都不是字符串或 Symbol 值，因此就报错了。</p>\n<p>如果目标对象自身包含不可配置的属性，则该属性必须被<code>ownKeys()</code>方法返回，否则报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">&#x27;a&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"number\">10</span> &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">  <span class=\"attr\">ownKeys</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;b&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(p)</span><br><span class=\"line\"><span class=\"comment\">// Uncaught TypeError: &#x27;ownKeys&#x27; on proxy: trap result did not include &#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>obj</code>对象的<code>a</code>属性是不可配置的，这时<code>ownKeys()</code>方法返回的数组之中，必须包含<code>a</code>，否则会报错。</p>\n<p>另外，如果目标对象是不可扩展的（non-extensible），这时<code>ownKeys()</code>方法返回的数组之中，必须包含原对象的所有属性，且不能包含多余的属性，否则报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.preventExtensions(obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">  <span class=\"attr\">ownKeys</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(p)</span><br><span class=\"line\"><span class=\"comment\">// Uncaught TypeError: &#x27;ownKeys&#x27; on proxy: trap returned extra keys but proxy target is non-extensible</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>obj</code>对象是不可扩展的，这时<code>ownKeys()</code>方法返回的数组之中，包含了<code>obj</code>对象的多余属性<code>b</code>，所以导致了报错。</p>\n<h3 id=\"preventExtensions\"><a href=\"#preventExtensions\" class=\"headerlink\" title=\"preventExtensions()\"></a>preventExtensions()</h3><p><code>preventExtensions()</code>方法拦截<code>Object.preventExtensions()</code>。该方法必须返回一个布尔值，否则会被自动转为布尔值。</p>\n<p>这个方法有一个限制，只有目标对象不可扩展时（即<code>Object.isExtensible(proxy)</code>为<code>false</code>），<code>proxy.preventExtensions</code>才能返回<code>true</code>，否则会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">preventExtensions</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.preventExtensions(proxy)</span><br><span class=\"line\"><span class=\"comment\">// Uncaught TypeError: &#x27;preventExtensions&#x27; on proxy: trap returned truish but the proxy target is extensible</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>proxy.preventExtensions()</code>方法返回<code>true</code>，但这时<code>Object.isExtensible(proxy)</code>会返回<code>true</code>，因此报错。</p>\n<p>为了防止出现这个问题，通常要在<code>proxy.preventExtensions()</code>方法里面，调用一次<code>Object.preventExtensions()</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">preventExtensions</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;called&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.preventExtensions(target);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.preventExtensions(proxy)</span><br><span class=\"line\"><span class=\"comment\">// &quot;called&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// Proxy &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"setPrototypeOf\"><a href=\"#setPrototypeOf\" class=\"headerlink\" title=\"setPrototypeOf()\"></a>setPrototypeOf()</h3><p><code>setPrototypeOf()</code>方法主要用来拦截<code>Object.setPrototypeOf()</code>方法。</p>\n<p>下面是一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  setPrototypeOf (target, proto) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;Changing the prototype is forbidden&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proto = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> target = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(proxy, proto);</span><br><span class=\"line\"><span class=\"comment\">// Error: Changing the prototype is forbidden</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，只要修改<code>target</code>的原型对象，就会报错。</p>\n<p>注意，该方法只能返回布尔值，否则会被自动转为布尔值。另外，如果目标对象不可扩展（non-extensible），<code>setPrototypeOf()</code>方法不得改变目标对象的原型。</p>\n<h2 id=\"Proxy-revocable\"><a href=\"#Proxy-revocable\" class=\"headerlink\" title=\"Proxy.revocable()\"></a>Proxy.revocable()</h2><p><code>Proxy.revocable()</code>方法返回一个可取消的 Proxy 实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> target = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> handler = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;proxy, revoke&#125; = <span class=\"built_in\">Proxy</span>.revocable(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.foo = <span class=\"number\">123</span>;</span><br><span class=\"line\">proxy.foo <span class=\"comment\">// 123</span></span><br><span class=\"line\"></span><br><span class=\"line\">revoke();</span><br><span class=\"line\">proxy.foo <span class=\"comment\">// TypeError: Revoked</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Proxy.revocable()</code>方法返回一个对象，该对象的<code>proxy</code>属性是<code>Proxy</code>实例，<code>revoke</code>属性是一个函数，可以取消<code>Proxy</code>实例。上面代码中，当执行<code>revoke</code>函数之后，再访问<code>Proxy</code>实例，就会抛出一个错误。</p>\n<p><code>Proxy.revocable()</code>的一个使用场景是，目标对象不允许直接访问，必须通过代理访问，一旦访问结束，就收回代理权，不允许再次访问。</p>\n<h2 id=\"this-问题\"><a href=\"#this-问题\" class=\"headerlink\" title=\"this 问题\"></a>this 问题</h2><p>虽然 Proxy 可以代理针对目标对象的访问，但它不是目标对象的透明代理，即不做任何拦截的情况下，也无法保证与目标对象的行为一致。主要原因就是在 Proxy 代理的情况下，目标对象内部的<code>this</code>关键字会指向 Proxy 代理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123;</span><br><span class=\"line\">  <span class=\"attr\">m</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span> === proxy);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">target.m() <span class=\"comment\">// false</span></span><br><span class=\"line\">proxy.m()  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，一旦<code>proxy</code>代理<code>target</code>，<code>target.m()</code>内部的<code>this</code>就是指向<code>proxy</code>，而不是<code>target</code>。</p>\n<p>下面是一个例子，由于<code>this</code>指向的变化，导致 Proxy 无法代理目标对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _name = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">    _name.set(<span class=\"built_in\">this</span>, name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title\">name</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _name.get(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> jane = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;Jane&#x27;</span>);</span><br><span class=\"line\">jane.name <span class=\"comment\">// &#x27;Jane&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(jane, &#123;&#125;);</span><br><span class=\"line\">proxy.name <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，目标对象<code>jane</code>的<code>name</code>属性，实际保存在外部<code>WeakMap</code>对象<code>_name</code>上面，通过<code>this</code>键区分。由于通过<code>proxy.name</code>访问时，<code>this</code>指向<code>proxy</code>，导致无法取到值，所以返回<code>undefined</code>。</p>\n<p>此外，有些原生对象的内部属性，只有通过正确的<code>this</code>才能拿到，所以 Proxy 也无法代理这些原生对象的属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.getDate();</span><br><span class=\"line\"><span class=\"comment\">// TypeError: this is not a Date object.</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>getDate()</code>方法只能在<code>Date</code>对象实例上面拿到，如果<code>this</code>不是<code>Date</code>对象实例就会报错。这时，<code>this</code>绑定原始对象，就可以解决这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;2015-01-01&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, prop</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop === <span class=\"string\">&#x27;getDate&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> target.getDate.bind(target);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, prop);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.getDate() <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>另外，Proxy 拦截函数内部的<code>this</code>，指向的是<code>handler</code>对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, key, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span> === handler);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Hello, &#x27;</span> + key;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, key, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span> === handler);</span><br><span class=\"line\">    target[key] = value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.foo</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// Hello, foo</span></span><br><span class=\"line\"></span><br><span class=\"line\">proxy.foo = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面例子中，<code>get()</code>和<code>set()</code>拦截函数内部的<code>this</code>，指向的都是<code>handler</code>对象。</p>\n<h2 id=\"实例：Web-服务的客户端\"><a href=\"#实例：Web-服务的客户端\" class=\"headerlink\" title=\"实例：Web 服务的客户端\"></a>实例：Web 服务的客户端</h2><p>Proxy 对象可以拦截目标对象的任意属性，这使得它很合适用来写 Web 服务的客户端。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> service = createWebService(<span class=\"string\">&#x27;http://example.com/data&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">service.employees().then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> employees = <span class=\"built_in\">JSON</span>.parse(json);</span><br><span class=\"line\">  <span class=\"comment\">// ···</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上面代码新建了一个 Web 服务的接口，这个接口返回各种数据。Proxy 可以拦截这个对象的任意属性，所以不用为每一种数据写一个适配方法，只要写一个 Proxy 拦截就可以了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createWebService</span>(<span class=\"params\">baseUrl</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, propKey, receiver</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> httpGet(baseUrl + <span class=\"string\">&#x27;/&#x27;</span> + propKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同理，Proxy 也可以用来实现数据库的 ORM 层。</p>\n<h2 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h2><p>以上内容均来自阮一峰老师的<a href=\"https://es6.ruanyifeng.com/#docs/proxy\">《ESMAScript6 入门》Proxy</a>一章，抄下来为了方便翻阅。</p>\n"},{"title":"Webpack面试题","date":"2021-09-03T09:54:58.000Z","updated":"2021-11-05T06:00:00.000Z","type":"tags","cover":"https://img.showydream.com/img/m2XSRQ-2019-07-04-01.png","description":"Webpack Q&A笔记，持续更新","keywords":"Webpack，面试题，面经","_content":"\n\n\n## 对Webpack的理解，解决了什么问题？\n\n\u0017`\u0013Webpack`是一个用于现代`JavaScript`应用程序的静态模块打包工具。\n\n### 静态模块\n\n这里的静态模块指的是开发阶段，可以被`webpack`直接引用的资源（可以直接被获取打包进`bundle.js`的资源）\n\n当`webpack`处理应用程序时，它会在内部构建一个依赖图，此依赖图对应映射到项目所需的每个模块（不再局限于`js`文件），并生成一个或多个`bundle`\n\n<img src=\"https://img.showydream.com/img/1CmJJS-image-20210827122030611.png\" alt=\"image-20210827122030611\" style=\"zoom:50%;\" />\n\n### webpack的能力和解决的问题\n\n- 编译代码能力\n\n  在开发过程中，我们经常会使用一些高级的特性来加快我们的开发效率或者安全性，比如通过`ES6`+`TypeScript`开发脚本逻辑，通过`sass`、`less`等方式来编写`css`样式代码。`webpack`可以通过编译的形式，把不同特性的代码编译成浏览器能识别的`ES5`语法或者`css`文件，解决浏览器兼容问题\n\n  压缩代码，优化网站性能\n\n- 模块整合能力\n\n  提高性能，可维护性，解决浏览器频繁请求文件的问题\n\n- 万物皆可模块化能力\n\n  项目维护性增强，支持不同种类的前端模块类型，统一的模块化方案，所有资源文件的加载可以通过代码控制\n\n## webpack的构建流程\n\n### 运行流程\n\n<img src=\"https://user-images.githubusercontent.com/26785201/89747816-fe344280-daf2-11ea-820a-6a1a99e34f14.png\" alt=\"img\"/>\n\n`webpack`的运行过程是一个串行的过程，从启动到结束会依次执行以下流程：\n\n1. 首先会从配置文件和`Shell`语句中读取与合并参数，并初始化需要使用的插件和配置插件等执行环境所需要的参数。\n2. 初始化完成后会调用`Complier`的`run`来真正启动`webpack`编译构建过程，`webpack`的构建流程包括`compile`、`make`、`build`、`seal`、`emit`阶段，执行完这些阶段就完成了构建过程。\n\n\n\n### 初始化\n\n#### entry-options 启动\n\n从配置文件和 `Shell` 语句中读取与合并参数，得出最终的参数。\n\n#### run 实例化\n\n`compiler`：用上一步得到的参数初始化 `Compiler` 对象，加载所有配置的插件，执行对象的 `run` 方法开始执行编译\n\n### 编译构建\n\n#### entry 确定入口\n\n根据配置中的 `entry` 找出所有的入口文件\n\n#### make 编译模块\n\n从入口文件出发，调用所有配置的 `Loader` 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理\n\n#### build module 完成模块编译\n\n经过上面一步使用 `Loader` 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系\n\n#### seal 输出资源\n\n根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 `Chunk`，再把每个 `Chunk` 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会\n\n#### emit 输出完成\n\n在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统\n\n<img src=\"https://img.showydream.com/img/XRGqwK-image-20210903115330607.png\" alt=\"image-20210903115330607\" style=\"zoom:50%;\" />\n\n\n## webpack.config.js 配置Demo\n\n```javascript\nvar path = require('path');\nvar node_modules = path.resolve(__dirname, 'node_modules');\nvar pathToReact = path.resolve(node_modules, 'react/dist/react.min.js');\n\nmodule.exports = {\n  // 入口文件，是模块构建的起点，同时每一个入口文件对应最后生成的一个 chunk。\n  entry: {\n    bundle: [\n      'webpack/hot/dev-server',\n      'webpack-dev-server/client?http://localhost:8080',\n      path.resolve(__dirname, 'app/app.js')\n    ]\n  },\n  // 文件路径指向(可加快打包过程)。\n  resolve: {\n    alias: {\n      'react': pathToReact\n    }\n  },\n  // 生成文件，是模块构建的终点，包括输出文件与输出路径。\n  output: {\n    path: path.resolve(__dirname, 'build'),\n    filename: '[name].js'\n  },\n  // 这里配置了处理各模块的 loader ，包括 css 预处理 loader ，es6 编译 loader，图片处理 loader。\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        loader: 'babel',\n        query: {\n          presets: ['es2015', 'react']\n        }\n      }\n    ],\n    noParse: [pathToReact]\n  },\n  // webpack 各插件对象，在 webpack 的事件流中执行对应的方法。\n  plugins: [\n    new webpack.HotModuleReplacementPlugin()\n  ]\n};\n```\n\n除此之外再大致介绍下webpack的一些核心概念：\n\n- ##### loader\n\n  能转换各类资源，并处理成对应模块的加载器。\n\n  loader间可以串行使用。\n\n- ##### chunk\n\n  code splitting后的产物，也就是按需加载的分块，装载了不同的module。\n\n对于 module 和 chunk 的关系可以参照 webpack 官方的这张图：\n\n![img](https://img.showydream.com/img/VXlztt-TB1B0DXNXXXXXXdXFXXXXXXXXXX-368-522.jpg)\n\n- ##### plugin\n\n  webpack插件的实体，这里以`UglifyJsPlugin`为例\n\n  ```javascript\n  function UglifyJsPlugin(options) {\n    this.options = options;\n  }\n  \n  module.exports = UglifyJsPlugin;\n  \n  UglifyJsPlugin.prototype.apply = function(compiler) {\n    compiler.plugin(\"compilation\", function(compilation) {\n      compilation.plugin(\"build-module\", function(module) {\n      });\n      compilation.plugin(\"optimize-chunk-assets\", function(chunks, callback) {\n        // Uglify 逻辑\n      });\n      compilation.plugin(\"normal-module-loader\", function(context) {\n      });\n    });\n  };\n  ```\n\n  在webpack中你经常可以看到`compilation.plugin('xxx',callback)`，你可以把它当做一个事件的绑定，这些事件在打包时由webpack来触发。\n\n# webpack中的Loader总结\n\n## Loader介绍\n\nwebpack做的事情，仅仅是分析出各种模块的依赖关系，然后整理成资源列表，最终打包生成到指定的文件中。\n\n上一节我们说过，在webpack内部，任何文件都是模块，不仅仅是`js`文件。但是在默认情况下，在遇到`require`和`import`的时候，webpack只支持对`js`和`json`文件的打包，像`css`、`scss`、`jpg`等这些类型的文件，webpack就无能为力了，这时候就用到了loader来对文件的内容进行解析\n\n> loader的定义：loader用于对模块的源代码进行转换，在import或加载模块时预处理文件\n\n在加载模块时，执行顺序如下：\n\n<img src=\"https://img.showydream.com/img/TFRENB-image-20211104120757749.png\" alt=\"image-20211104120757749\" style=\"zoom:50%;\" />\n\n##### 当webpack碰到识别不了的文件时，就会从配置中找该文件的解析规则，来看个示例：\n\n使用 loader 告诉 webpack 加载 CSS 文件，或者将 TypeScript 转为 JavaScript。为此，首先安装相对应的 loader：\n\n```bash\nnpm install --save-dev css-loader ts-loader\n```\n\n然后指示 webpack 对每个 `.css` 使用 [`css-loader`](https://webpack.docschina.org/loaders/css-loader)，以及对所有 `.ts` 文件使用 [`ts-loader`](https://github.com/TypeStrong/ts-loader)：\n\n**webpack.config.js**\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [\n      // 将所有TypeScript 转为 JavaScript，\n      // 也就意味着我们使用ts来开发，最终转换成js运行在浏览器端\n      { test: /\\.ts$/, use: 'ts-loader' }\n    ]\n  }\n};\n```\n\n[`module.rules`](https://webpack.docschina.org/configuration/module/#modulerules) 允许你在 webpack 配置中指定多个 loader。 这种方式是展示 loader 的一种简明方式，并且有助于使代码变得简洁和易于维护。同时让你对各个 loader 有个全局概览：\n\nloader **从右到左**（或**从下到上**）地取值(evaluate)/执行(execute)。在下面的示例中，从 sass-loader 开始执行，然后继续执行 css-loader，最后以 style-loader 为结束。\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          // [style-loader](/loaders/style-loader)\n          { loader: 'style-loader' },\n          // [css-loader](/loaders/css-loader)\n          {\n            loader: 'css-loader',\n            options: {\n              modules: true\n            }\n          },\n          // [sass-loader](/loaders/sass-loader)\n          { loader: 'sass-loader' }\n        ]\n      }\n    ]\n  }\n};\n```\n\n## loader 特性\n\n- loader 支持链式调用。链中的每个 loader 会将转换应用在已处理过的资源上。一组链式的 loader 将按照相反的顺序执行。链中的第一个 loader 将其结果（也就是应用过转换后的资源）传递给下一个 loader，依此类推。最后，链中的最后一个 loader，返回 webpack 所期望的 JavaScript。\n- loader 可以是同步的，也可以是异步的。\n- loader 运行在 Node.js 中，并且能够执行任何操作。\n- loader 可以通过 `options` 对象配置（仍然支持使用 `query` 参数来设置选项，但是这种方式已被废弃）。\n- 除了常见的通过 `package.json` 的 `main` 来将一个 npm 模块导出为 loader，还可以在 module.rules 中使用 `loader` 字段直接引用一个模块。\n- 插件(plugin)可以为 loader 带来更多特性。\n- loader 能够产生额外的任意文件。\n\n可以通过 loader 的预处理函数，为 JavaScript 生态系统提供更多能力。用户现在可以更加灵活地引入细粒度逻辑，例如：压缩、打包、语言转译（或编译）\n\n## 常见的Loader\n\n### 文件\n\n- [`val-loader`](https://webpack.docschina.org/loaders/val-loader) 将代码作为模块执行，并将其导出为 JS 代码\n- [`ref-loader`](https://www.npmjs.com/package/ref-loader) 用于手动建立文件之间的依赖关系\n\n### JSON\n\n- [`cson-loader`](https://github.com/awnist/cson-loader) 加载并转换 [CSON](https://github.com/bevry/cson#what-is-cson) 文件\n\n### 语法转换\n\n- [`babel-loader`](https://webpack.docschina.org/loaders/babel-loader) 使用 [Babel](https://babeljs.io/) 加载 ES2015+ 代码并将其转换为 ES5\n- [`buble-loader`](https://github.com/sairion/buble-loader) 使用 [Bublé](https://buble.surge.sh/guide/) 加载 ES2015+ 代码并将其转换为 ES5\n- [`traceur-loader`](https://github.com/jupl/traceur-loader) 使用 [Traceur](https://github.com/google/traceur-compiler#readme) 加载 ES2015+ 代码并将其转换为 ES5\n- [`ts-loader`](https://github.com/TypeStrong/ts-loader) 像加载 JavaScript 一样加载 [TypeScript](https://www.typescriptlang.org/) 2.0+\n- [`coffee-loader`](https://webpack.docschina.org/loaders/coffee-loader) 像加载 JavaScript 一样加载 [CoffeeScript](http://coffeescript.org/)\n- [`fengari-loader`](https://github.com/fengari-lua/fengari-loader/) 使用 [fengari](https://fengari.io/) 加载 Lua 代码\n- [`elm-webpack-loader`](https://github.com/elm-community/elm-webpack-loader) 像加载 JavaScript 一样加载 [Elm](https://elm-lang.org/)\n\n### 模板\n\n- [`html-loader`](https://webpack.docschina.org/loaders/html-loader) 将 HTML 导出为字符串，需要传入静态资源的引用路径\n- [`pug-loader`](https://github.com/pugjs/pug-loader) 加载 Pug 和 Jade 模板并返回一个函数\n- [`markdown-loader`](https://github.com/peerigon/markdown-loader) 将 Markdown 编译为 HTML\n- [`react-markdown-loader`](https://github.com/javiercf/react-markdown-loader) 使用 markdown-parse 解析器将 Markdown 编译为 React 组件\n- [`posthtml-loader`](https://github.com/posthtml/posthtml-loader) 使用 [PostHTML](https://github.com/posthtml/posthtml) 加载并转换 HTML 文件\n- [`handlebars-loader`](https://github.com/pcardune/handlebars-loader) 将 Handlebars 文件编译为 HTML\n- [`markup-inline-loader`](https://github.com/asnowwolf/markup-inline-loader) 将 SVG/MathML 文件内嵌到 HTML 中。在将图标字体或 CSS 动画应用于 SVG 时，此功能非常实用。\n- [`twig-loader`](https://github.com/zimmo-be/twig-loader) 编译 Twig 模板并返回一个函数\n- [`remark-loader`](https://github.com/webpack-contrib/remark-loader) 通过 `remark` 加载 markdown，且支持解析内容中的图片\n\n### 样式\n\n- [`style-loader`](https://webpack.docschina.org/loaders/style-loader) 将模块导出的内容作为样式并添加到 DOM 中\n- [`css-loader`](https://webpack.docschina.org/loaders/css-loader) 加载 CSS 文件并解析 import 的 CSS 文件，最终返回 CSS 代码\n- [`less-loader`](https://webpack.docschina.org/loaders/less-loader) 加载并编译 LESS 文件\n- [`sass-loader`](https://webpack.docschina.org/loaders/sass-loader) 加载并编译 SASS/SCSS 文件\n- [`postcss-loader`](https://webpack.docschina.org/loaders/postcss-loader) 使用 [PostCSS](http://postcss.org/) 加载并转换 CSS/SSS 文件\n- [`stylus-loader`](https://webpack.docschina.org/loaders/stylus-loader/) 加载并编译 Stylus 文件\n\n### 框架\n\n- [`vue-loader`](https://github.com/vuejs/vue-loader) 加载并编译 [Vue 组件](https://vuejs.org/v2/guide/components.html)\n- [`angular2-template-loader`](https://github.com/TheLarkInn/angular2-template-loader) 加载并编译 [Angular](https://angular.io/) 组件\n\n### Awesome\n\n有关更多第三方 loader，请参阅 [awesome-webpack](https://webpack.docschina.org/awesome-webpack/#loaders) 中的列表。\n\n\n\n# Webpack中的Plugin总结\n\n\n\n### Plugin介绍\n\n顾名思义，plugin是插件的意思，它是一种遵循Webpack应用程序接口规范编写的程序，在webpack规定的系统下运行。plugin赋予其各种灵活的功能，例如打包优化、资源管理、环境变量注入等，它们会在webpack不同阶段（钩子函数、生命周期）中运行，贯穿了webpack的整个编译周期。\n\n<img src=\"https://img.showydream.com/img/v34XjV-9a04ec40-a7c2-11eb-ab90-d9ae814b240d-20211105151809349.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n插件目的在于解决 loader无法实现的**其他事**。Webpack 提供很多开箱即用的插件\n\n### 用法\n\n由于**插件**可以携带参数/选项，你必须在 webpack 配置中，向 `plugins` 属性传入一个 `new` 实例。\n\n取决于你的 webpack 用法，对应有多种使用插件的方式。\n\n**webpack.config.js**\n\n```javascript\nconst HtmlWebpackPlugin = require('html-webpack-plugin'); // 通过 npm 安装\nconst webpack = require('webpack'); // 访问内置的插件\nconst path = require('path');\n\nmodule.exports = {\n  entry: './path/to/my/entry/file.js',\n  output: {\n    filename: 'my-first-webpack.bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        use: 'babel-loader',\n      },\n    ],\n  },\n  plugins: [\n    new webpack.ProgressPlugin(),\n    new HtmlWebpackPlugin({ template: './src/index.html' }),\n  ],\n};\n```\n\n### 常用插件\n\n| **Name**                                                     | **Description**                                              |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [`BabelMinifyWebpackPlugin`](https://v4.webpack.docschina.org/plugins/babel-minify-webpack-plugin) | 使用 [babel-minify](https://github.com/babel/minify)进行压缩 |\n| [`BannerPlugin`](https://v4.webpack.docschina.org/plugins/banner-plugin) | 在每个生成的 chunk 顶部添加 banner                           |\n| [`CommonsChunkPlugin`](https://v4.webpack.docschina.org/plugins/commons-chunk-plugin) | 提取 chunks 之间共享的通用模块                               |\n| [`CompressionWebpackPlugin`](https://v4.webpack.docschina.org/plugins/compression-webpack-plugin) | 预先准备的资源压缩版本，使用 Content-Encoding 提供访问服务   |\n| [`ContextReplacementPlugin`](https://v4.webpack.docschina.org/plugins/context-replacement-plugin) | 重写 `require` 表达式的推断上下文                            |\n| [`CopyWebpackPlugin`](https://v4.webpack.docschina.org/plugins/copy-webpack-plugin) | 将单个文件或整个目录复制到构建目录                           |\n| [`DefinePlugin`](https://v4.webpack.docschina.org/plugins/define-plugin) | 允许在编译时(compile time)配置的全局常量                     |\n| [`DllPlugin`](https://v4.webpack.docschina.org/plugins/dll-plugin) | 为了极大减少构建时间，进行分离打包                           |\n| [`EnvironmentPlugin`](https://v4.webpack.docschina.org/plugins/environment-plugin) | [`DefinePlugin`](https://v4.webpack.docschina.org/plugins/define-plugin) 中 `process.env` 键的简写方式。 |\n| [`ExtractTextWebpackPlugin`](https://v4.webpack.docschina.org/plugins/extract-text-webpack-plugin) | 从 bundle 中提取文本（CSS）到单独的文件                      |\n| [`HotModuleReplacementPlugin`](https://v4.webpack.docschina.org/plugins/hot-module-replacement-plugin) | 启用模块热替换(Enable Hot Module Replacement - HMR)          |\n| [`HtmlWebpackPlugin`](https://v4.webpack.docschina.org/plugins/html-webpack-plugin) | 简单创建 HTML 文件，用于服务器访问                           |\n| [`I18nWebpackPlugin`](https://v4.webpack.docschina.org/plugins/i18n-webpack-plugin) | 为 bundle 增加国际化支持                                     |\n| [`IgnorePlugin`](https://v4.webpack.docschina.org/plugins/ignore-plugin) | 从 bundle 中排除某些模块                                     |\n| [`LimitChunkCountPlugin`](https://v4.webpack.docschina.org/plugins/limit-chunk-count-plugin) | 设置 chunk 的最小/最大限制，以微调和控制 chunk               |\n| [`LoaderOptionsPlugin`](https://v4.webpack.docschina.org/plugins/loader-options-plugin) | 用于从 webpack 1 迁移到 webpack 2                            |\n| [`MinChunkSizePlugin`](https://v4.webpack.docschina.org/plugins/min-chunk-size-plugin) | 确保 chunk 大小超过指定限制                                  |\n| [`MiniCssExtractPlugin`](https://v4.webpack.docschina.org/plugins/mini-css-extract-plugin) | 为每个引入 CSS 的 JS 文件创建一个 CSS 文件                   |\n| [`NoEmitOnErrorsPlugin`](https://v4.webpack.docschina.org/configuration/optimization/#optimization-noemitonerrors) | 在输出阶段时，遇到编译错误跳过                               |\n| [`NormalModuleReplacementPlugin`](https://v4.webpack.docschina.org/plugins/normal-module-replacement-plugin) | 替换与正则表达式匹配的资源                                   |\n| [`NpmInstallWebpackPlugin`](https://v4.webpack.docschina.org/plugins/npm-install-webpack-plugin) | 在开发环境下自动安装缺少的依赖                               |\n| [`ProgressPlugin`](https://v4.webpack.docschina.org/plugins/progress-plugin) | 报告编译进度                                                 |\n| [`ProvidePlugin`](https://v4.webpack.docschina.org/plugins/provide-plugin) | 不必通过 import/require 使用模块                             |\n| [`SourceMapDevToolPlugin`](https://v4.webpack.docschina.org/plugins/source-map-dev-tool-plugin) | 对 source map 进行更细粒度的控制                             |\n| [`EvalSourceMapDevToolPlugin`](https://v4.webpack.docschina.org/plugins/eval-source-map-dev-tool-plugin) | 对 eval source map 进行更细粒度的控制                        |\n| [`UglifyjsWebpackPlugin`](https://v4.webpack.docschina.org/plugins/uglifyjs-webpack-plugin) | 可以控制项目中 UglifyJS 的版本                               |\n| [`TerserPlugin`](https://v4.webpack.docschina.org/plugins/terser-webpack-plugin) | 允许控制项目中 Terser 的版本                                 |\n| [`ZopfliWebpackPlugin`](https://v4.webpack.docschina.org/plugins/zopfli-webpack-plugin) | 通过 node-zopfli 将资源预先压缩的版本                        |\n\n\n\n### HtmlWebpackPlugin\n\n在打包结束后，⾃动生成⼀个 `html` ⽂文件，并把打包生成的`js` 模块引⼊到该 `html` 中\n\n```bash\nnpm install --save-dev html-webpack-plugin\n```\n\n```javascript\n// webpack.config.js\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nmodule.exports = {\n ...\n  plugins: [\n     new HtmlWebpackPlugin({\n       title: \"My App\",\n       filename: \"app.html\",\n       template: \"./src/html/index.html\"\n     }) \n  ]\n};\n```\n\n```html\n<!--./src/html/index.html-->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title><%=htmlWebpackPlugin.options.title%></title>\n</head>\n<body>\n    <h1>html-webpack-plugin</h1>\n</body>\n</html>\n```\n\n在 `html` 模板中，可以通过 `<%=htmlWebpackPlugin.options.XXX%>` 的方式获取配置的值\n\n更多的配置可以自寻查找\n\n### clean-webpack-plugin\n\n删除（清理）构建目录\n\n```bash\nnpm install --save-dev clean-webpack-plugin\n```\n\n```javascript\nconst {CleanWebpackPlugin} = require('clean-webpack-plugin');\nmodule.exports = {\n ...\n  plugins: [\n    ...,\n    new CleanWebpackPlugin(),\n    ...\n  ]\n}\n```\n\n### mini-css-extract-plugin\n\n提取 `CSS` 到一个单独的文件中\n\n```bash\nnpm install --save-dev mini-css-extract-plugin\n```\n\n```javascript\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nmodule.exports = {\n ...,\n  module: {\n   rules: [\n    {\n     test: /\\.s[ac]ss$/,\n     use: [\n      {\n       loader: MiniCssExtractPlugin.loader\n     },\n          'css-loader',\n          'sass-loader'\n        ]\n   }\n   ]\n },\n  plugins: [\n    ...,\n    new MiniCssExtractPlugin({\n     filename: '[name].css'\n    }),\n    ...\n  ]\n}\n```\n\n### DefinePlugin\n\n允许在编译时创建配置的全局对象，是一个`webpack`内置的插件，不需要安装\n\n```javascript\nconst { DefinePlugun } = require('webpack')\n\nmodule.exports = {\n ...\n    plugins:[\n        new DefinePlugin({\n            BASE_URL:'\"./\"'\n        })\n    ]\n}\n```\n\n这时候编译`template`模块的时候，就能通过下述形式获取全局对象\n\n```html\n<link rel=\"icon\" href=\"<%= BASE_URL%>favicon.ico>\"\n```\n\n### copy-webpack-plugin\n\n复制文件或目录到执行区域，如`vue`的打包过程中，如果我们将一些文件放到`public`的目录下，那么这个目录会被复制到`dist`文件夹中\n\n```text\nnpm install copy-webpack-plugin -D\n```\n\n1\n\n```javascript\nnew CopyWebpackPlugin({\n    parrerns:[\n        {\n            from:\"public\",\n            globOptions:{\n                ignore:[\n                    '**/index.html'\n                ]\n            }\n        }\n    ]\n})\n```\n\n复制的规则在`patterns`属性中设置：\n\n- from：设置从哪一个源中开始复制\n- to：复制到的位置，可以省略，会默认复制到打包的目录下\n- globOptions：设置一些额外的选项，其中可以编写需要忽略的文件\n\n# Weback使用小技巧\n\n\n\n#### 批量导入文件：require.context\n\n通过执行require.context函数获取一个特定的上下文,主要用来实现自动化导入模块,在前端工程中,如果遇到从一个文件夹引入很多模块的情况,可以使用这个api,它会遍历文件夹中的指定文件,然后自动导入,使得不需要每次显式的调用import导入模块\n\n##### 使用语法\n\nWebpack 会在构建中解析代码中的 `require.context()` 。\n\n```javascript\nrequire.context(\n  directory,\n  (useSubdirectories = true),\n  (regExp = /^\\.\\/.*$/),\n  (mode = 'sync')\n);\n```\n\n示例：\n\n```javascript\nrequire.context('./test', false, /\\.test\\.js$/);\n//（创建出）一个 context，其中文件来自 test 目录，request 以 `.test.js` 结尾。\nrequire.context('../', true, /\\.stories\\.js$/);\n// （创建出）一个 context，其中所有文件都来自父文件夹及其所有子级文件夹，request 以 `.stories.js` 结尾。\n```\n\n**require.context() 返回的结果是一个函数，该函数包含3个属性**\n\n- resolve{Function} : 是一个函数，返回已分析请求的模块id\n- keys : 返回上下文模块可以处理的所有可能请求的数组的函数\n- id : 是上下文模块的模块id。这可能对module.hot.acce有用\n\n\n\n使用示例：\n\n```javascript\n// vue store中 批量拿到module文件夹中的state文件\nconst modulesFiles = require.context('./modules', true, /\\.js$/)\nconst modules = modulesFiles.keys().reduce((modules, modulePath) => {\n  const moduleName = modulePath.replace(/^\\.\\/(.*)\\.\\w+$/, '$1')\n  const value = modulesFiles(modulePath)\n  modules[moduleName] = value.default\n  return modules\n}, {})\n```\n\n","source":"_posts/Webpack面试题.md","raw":"---\ntitle: Webpack面试题\ndate: 2021-9-3 17:54:58\nupdated: 2021-11-5 14:00:00\ntype: \"tags\"\ncover: https://img.showydream.com/img/m2XSRQ-2019-07-04-01.png\ndescription: Webpack Q&A笔记，持续更新\nkeywords: Webpack，面试题，面经\ntags: Webpack\ncategories: \n  - Webpack\n---\n\n\n\n## 对Webpack的理解，解决了什么问题？\n\n\u0017`\u0013Webpack`是一个用于现代`JavaScript`应用程序的静态模块打包工具。\n\n### 静态模块\n\n这里的静态模块指的是开发阶段，可以被`webpack`直接引用的资源（可以直接被获取打包进`bundle.js`的资源）\n\n当`webpack`处理应用程序时，它会在内部构建一个依赖图，此依赖图对应映射到项目所需的每个模块（不再局限于`js`文件），并生成一个或多个`bundle`\n\n<img src=\"https://img.showydream.com/img/1CmJJS-image-20210827122030611.png\" alt=\"image-20210827122030611\" style=\"zoom:50%;\" />\n\n### webpack的能力和解决的问题\n\n- 编译代码能力\n\n  在开发过程中，我们经常会使用一些高级的特性来加快我们的开发效率或者安全性，比如通过`ES6`+`TypeScript`开发脚本逻辑，通过`sass`、`less`等方式来编写`css`样式代码。`webpack`可以通过编译的形式，把不同特性的代码编译成浏览器能识别的`ES5`语法或者`css`文件，解决浏览器兼容问题\n\n  压缩代码，优化网站性能\n\n- 模块整合能力\n\n  提高性能，可维护性，解决浏览器频繁请求文件的问题\n\n- 万物皆可模块化能力\n\n  项目维护性增强，支持不同种类的前端模块类型，统一的模块化方案，所有资源文件的加载可以通过代码控制\n\n## webpack的构建流程\n\n### 运行流程\n\n<img src=\"https://user-images.githubusercontent.com/26785201/89747816-fe344280-daf2-11ea-820a-6a1a99e34f14.png\" alt=\"img\"/>\n\n`webpack`的运行过程是一个串行的过程，从启动到结束会依次执行以下流程：\n\n1. 首先会从配置文件和`Shell`语句中读取与合并参数，并初始化需要使用的插件和配置插件等执行环境所需要的参数。\n2. 初始化完成后会调用`Complier`的`run`来真正启动`webpack`编译构建过程，`webpack`的构建流程包括`compile`、`make`、`build`、`seal`、`emit`阶段，执行完这些阶段就完成了构建过程。\n\n\n\n### 初始化\n\n#### entry-options 启动\n\n从配置文件和 `Shell` 语句中读取与合并参数，得出最终的参数。\n\n#### run 实例化\n\n`compiler`：用上一步得到的参数初始化 `Compiler` 对象，加载所有配置的插件，执行对象的 `run` 方法开始执行编译\n\n### 编译构建\n\n#### entry 确定入口\n\n根据配置中的 `entry` 找出所有的入口文件\n\n#### make 编译模块\n\n从入口文件出发，调用所有配置的 `Loader` 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理\n\n#### build module 完成模块编译\n\n经过上面一步使用 `Loader` 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系\n\n#### seal 输出资源\n\n根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 `Chunk`，再把每个 `Chunk` 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会\n\n#### emit 输出完成\n\n在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统\n\n<img src=\"https://img.showydream.com/img/XRGqwK-image-20210903115330607.png\" alt=\"image-20210903115330607\" style=\"zoom:50%;\" />\n\n\n## webpack.config.js 配置Demo\n\n```javascript\nvar path = require('path');\nvar node_modules = path.resolve(__dirname, 'node_modules');\nvar pathToReact = path.resolve(node_modules, 'react/dist/react.min.js');\n\nmodule.exports = {\n  // 入口文件，是模块构建的起点，同时每一个入口文件对应最后生成的一个 chunk。\n  entry: {\n    bundle: [\n      'webpack/hot/dev-server',\n      'webpack-dev-server/client?http://localhost:8080',\n      path.resolve(__dirname, 'app/app.js')\n    ]\n  },\n  // 文件路径指向(可加快打包过程)。\n  resolve: {\n    alias: {\n      'react': pathToReact\n    }\n  },\n  // 生成文件，是模块构建的终点，包括输出文件与输出路径。\n  output: {\n    path: path.resolve(__dirname, 'build'),\n    filename: '[name].js'\n  },\n  // 这里配置了处理各模块的 loader ，包括 css 预处理 loader ，es6 编译 loader，图片处理 loader。\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        loader: 'babel',\n        query: {\n          presets: ['es2015', 'react']\n        }\n      }\n    ],\n    noParse: [pathToReact]\n  },\n  // webpack 各插件对象，在 webpack 的事件流中执行对应的方法。\n  plugins: [\n    new webpack.HotModuleReplacementPlugin()\n  ]\n};\n```\n\n除此之外再大致介绍下webpack的一些核心概念：\n\n- ##### loader\n\n  能转换各类资源，并处理成对应模块的加载器。\n\n  loader间可以串行使用。\n\n- ##### chunk\n\n  code splitting后的产物，也就是按需加载的分块，装载了不同的module。\n\n对于 module 和 chunk 的关系可以参照 webpack 官方的这张图：\n\n![img](https://img.showydream.com/img/VXlztt-TB1B0DXNXXXXXXdXFXXXXXXXXXX-368-522.jpg)\n\n- ##### plugin\n\n  webpack插件的实体，这里以`UglifyJsPlugin`为例\n\n  ```javascript\n  function UglifyJsPlugin(options) {\n    this.options = options;\n  }\n  \n  module.exports = UglifyJsPlugin;\n  \n  UglifyJsPlugin.prototype.apply = function(compiler) {\n    compiler.plugin(\"compilation\", function(compilation) {\n      compilation.plugin(\"build-module\", function(module) {\n      });\n      compilation.plugin(\"optimize-chunk-assets\", function(chunks, callback) {\n        // Uglify 逻辑\n      });\n      compilation.plugin(\"normal-module-loader\", function(context) {\n      });\n    });\n  };\n  ```\n\n  在webpack中你经常可以看到`compilation.plugin('xxx',callback)`，你可以把它当做一个事件的绑定，这些事件在打包时由webpack来触发。\n\n# webpack中的Loader总结\n\n## Loader介绍\n\nwebpack做的事情，仅仅是分析出各种模块的依赖关系，然后整理成资源列表，最终打包生成到指定的文件中。\n\n上一节我们说过，在webpack内部，任何文件都是模块，不仅仅是`js`文件。但是在默认情况下，在遇到`require`和`import`的时候，webpack只支持对`js`和`json`文件的打包，像`css`、`scss`、`jpg`等这些类型的文件，webpack就无能为力了，这时候就用到了loader来对文件的内容进行解析\n\n> loader的定义：loader用于对模块的源代码进行转换，在import或加载模块时预处理文件\n\n在加载模块时，执行顺序如下：\n\n<img src=\"https://img.showydream.com/img/TFRENB-image-20211104120757749.png\" alt=\"image-20211104120757749\" style=\"zoom:50%;\" />\n\n##### 当webpack碰到识别不了的文件时，就会从配置中找该文件的解析规则，来看个示例：\n\n使用 loader 告诉 webpack 加载 CSS 文件，或者将 TypeScript 转为 JavaScript。为此，首先安装相对应的 loader：\n\n```bash\nnpm install --save-dev css-loader ts-loader\n```\n\n然后指示 webpack 对每个 `.css` 使用 [`css-loader`](https://webpack.docschina.org/loaders/css-loader)，以及对所有 `.ts` 文件使用 [`ts-loader`](https://github.com/TypeStrong/ts-loader)：\n\n**webpack.config.js**\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [\n      // 将所有TypeScript 转为 JavaScript，\n      // 也就意味着我们使用ts来开发，最终转换成js运行在浏览器端\n      { test: /\\.ts$/, use: 'ts-loader' }\n    ]\n  }\n};\n```\n\n[`module.rules`](https://webpack.docschina.org/configuration/module/#modulerules) 允许你在 webpack 配置中指定多个 loader。 这种方式是展示 loader 的一种简明方式，并且有助于使代码变得简洁和易于维护。同时让你对各个 loader 有个全局概览：\n\nloader **从右到左**（或**从下到上**）地取值(evaluate)/执行(execute)。在下面的示例中，从 sass-loader 开始执行，然后继续执行 css-loader，最后以 style-loader 为结束。\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          // [style-loader](/loaders/style-loader)\n          { loader: 'style-loader' },\n          // [css-loader](/loaders/css-loader)\n          {\n            loader: 'css-loader',\n            options: {\n              modules: true\n            }\n          },\n          // [sass-loader](/loaders/sass-loader)\n          { loader: 'sass-loader' }\n        ]\n      }\n    ]\n  }\n};\n```\n\n## loader 特性\n\n- loader 支持链式调用。链中的每个 loader 会将转换应用在已处理过的资源上。一组链式的 loader 将按照相反的顺序执行。链中的第一个 loader 将其结果（也就是应用过转换后的资源）传递给下一个 loader，依此类推。最后，链中的最后一个 loader，返回 webpack 所期望的 JavaScript。\n- loader 可以是同步的，也可以是异步的。\n- loader 运行在 Node.js 中，并且能够执行任何操作。\n- loader 可以通过 `options` 对象配置（仍然支持使用 `query` 参数来设置选项，但是这种方式已被废弃）。\n- 除了常见的通过 `package.json` 的 `main` 来将一个 npm 模块导出为 loader，还可以在 module.rules 中使用 `loader` 字段直接引用一个模块。\n- 插件(plugin)可以为 loader 带来更多特性。\n- loader 能够产生额外的任意文件。\n\n可以通过 loader 的预处理函数，为 JavaScript 生态系统提供更多能力。用户现在可以更加灵活地引入细粒度逻辑，例如：压缩、打包、语言转译（或编译）\n\n## 常见的Loader\n\n### 文件\n\n- [`val-loader`](https://webpack.docschina.org/loaders/val-loader) 将代码作为模块执行，并将其导出为 JS 代码\n- [`ref-loader`](https://www.npmjs.com/package/ref-loader) 用于手动建立文件之间的依赖关系\n\n### JSON\n\n- [`cson-loader`](https://github.com/awnist/cson-loader) 加载并转换 [CSON](https://github.com/bevry/cson#what-is-cson) 文件\n\n### 语法转换\n\n- [`babel-loader`](https://webpack.docschina.org/loaders/babel-loader) 使用 [Babel](https://babeljs.io/) 加载 ES2015+ 代码并将其转换为 ES5\n- [`buble-loader`](https://github.com/sairion/buble-loader) 使用 [Bublé](https://buble.surge.sh/guide/) 加载 ES2015+ 代码并将其转换为 ES5\n- [`traceur-loader`](https://github.com/jupl/traceur-loader) 使用 [Traceur](https://github.com/google/traceur-compiler#readme) 加载 ES2015+ 代码并将其转换为 ES5\n- [`ts-loader`](https://github.com/TypeStrong/ts-loader) 像加载 JavaScript 一样加载 [TypeScript](https://www.typescriptlang.org/) 2.0+\n- [`coffee-loader`](https://webpack.docschina.org/loaders/coffee-loader) 像加载 JavaScript 一样加载 [CoffeeScript](http://coffeescript.org/)\n- [`fengari-loader`](https://github.com/fengari-lua/fengari-loader/) 使用 [fengari](https://fengari.io/) 加载 Lua 代码\n- [`elm-webpack-loader`](https://github.com/elm-community/elm-webpack-loader) 像加载 JavaScript 一样加载 [Elm](https://elm-lang.org/)\n\n### 模板\n\n- [`html-loader`](https://webpack.docschina.org/loaders/html-loader) 将 HTML 导出为字符串，需要传入静态资源的引用路径\n- [`pug-loader`](https://github.com/pugjs/pug-loader) 加载 Pug 和 Jade 模板并返回一个函数\n- [`markdown-loader`](https://github.com/peerigon/markdown-loader) 将 Markdown 编译为 HTML\n- [`react-markdown-loader`](https://github.com/javiercf/react-markdown-loader) 使用 markdown-parse 解析器将 Markdown 编译为 React 组件\n- [`posthtml-loader`](https://github.com/posthtml/posthtml-loader) 使用 [PostHTML](https://github.com/posthtml/posthtml) 加载并转换 HTML 文件\n- [`handlebars-loader`](https://github.com/pcardune/handlebars-loader) 将 Handlebars 文件编译为 HTML\n- [`markup-inline-loader`](https://github.com/asnowwolf/markup-inline-loader) 将 SVG/MathML 文件内嵌到 HTML 中。在将图标字体或 CSS 动画应用于 SVG 时，此功能非常实用。\n- [`twig-loader`](https://github.com/zimmo-be/twig-loader) 编译 Twig 模板并返回一个函数\n- [`remark-loader`](https://github.com/webpack-contrib/remark-loader) 通过 `remark` 加载 markdown，且支持解析内容中的图片\n\n### 样式\n\n- [`style-loader`](https://webpack.docschina.org/loaders/style-loader) 将模块导出的内容作为样式并添加到 DOM 中\n- [`css-loader`](https://webpack.docschina.org/loaders/css-loader) 加载 CSS 文件并解析 import 的 CSS 文件，最终返回 CSS 代码\n- [`less-loader`](https://webpack.docschina.org/loaders/less-loader) 加载并编译 LESS 文件\n- [`sass-loader`](https://webpack.docschina.org/loaders/sass-loader) 加载并编译 SASS/SCSS 文件\n- [`postcss-loader`](https://webpack.docschina.org/loaders/postcss-loader) 使用 [PostCSS](http://postcss.org/) 加载并转换 CSS/SSS 文件\n- [`stylus-loader`](https://webpack.docschina.org/loaders/stylus-loader/) 加载并编译 Stylus 文件\n\n### 框架\n\n- [`vue-loader`](https://github.com/vuejs/vue-loader) 加载并编译 [Vue 组件](https://vuejs.org/v2/guide/components.html)\n- [`angular2-template-loader`](https://github.com/TheLarkInn/angular2-template-loader) 加载并编译 [Angular](https://angular.io/) 组件\n\n### Awesome\n\n有关更多第三方 loader，请参阅 [awesome-webpack](https://webpack.docschina.org/awesome-webpack/#loaders) 中的列表。\n\n\n\n# Webpack中的Plugin总结\n\n\n\n### Plugin介绍\n\n顾名思义，plugin是插件的意思，它是一种遵循Webpack应用程序接口规范编写的程序，在webpack规定的系统下运行。plugin赋予其各种灵活的功能，例如打包优化、资源管理、环境变量注入等，它们会在webpack不同阶段（钩子函数、生命周期）中运行，贯穿了webpack的整个编译周期。\n\n<img src=\"https://img.showydream.com/img/v34XjV-9a04ec40-a7c2-11eb-ab90-d9ae814b240d-20211105151809349.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n插件目的在于解决 loader无法实现的**其他事**。Webpack 提供很多开箱即用的插件\n\n### 用法\n\n由于**插件**可以携带参数/选项，你必须在 webpack 配置中，向 `plugins` 属性传入一个 `new` 实例。\n\n取决于你的 webpack 用法，对应有多种使用插件的方式。\n\n**webpack.config.js**\n\n```javascript\nconst HtmlWebpackPlugin = require('html-webpack-plugin'); // 通过 npm 安装\nconst webpack = require('webpack'); // 访问内置的插件\nconst path = require('path');\n\nmodule.exports = {\n  entry: './path/to/my/entry/file.js',\n  output: {\n    filename: 'my-first-webpack.bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        use: 'babel-loader',\n      },\n    ],\n  },\n  plugins: [\n    new webpack.ProgressPlugin(),\n    new HtmlWebpackPlugin({ template: './src/index.html' }),\n  ],\n};\n```\n\n### 常用插件\n\n| **Name**                                                     | **Description**                                              |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [`BabelMinifyWebpackPlugin`](https://v4.webpack.docschina.org/plugins/babel-minify-webpack-plugin) | 使用 [babel-minify](https://github.com/babel/minify)进行压缩 |\n| [`BannerPlugin`](https://v4.webpack.docschina.org/plugins/banner-plugin) | 在每个生成的 chunk 顶部添加 banner                           |\n| [`CommonsChunkPlugin`](https://v4.webpack.docschina.org/plugins/commons-chunk-plugin) | 提取 chunks 之间共享的通用模块                               |\n| [`CompressionWebpackPlugin`](https://v4.webpack.docschina.org/plugins/compression-webpack-plugin) | 预先准备的资源压缩版本，使用 Content-Encoding 提供访问服务   |\n| [`ContextReplacementPlugin`](https://v4.webpack.docschina.org/plugins/context-replacement-plugin) | 重写 `require` 表达式的推断上下文                            |\n| [`CopyWebpackPlugin`](https://v4.webpack.docschina.org/plugins/copy-webpack-plugin) | 将单个文件或整个目录复制到构建目录                           |\n| [`DefinePlugin`](https://v4.webpack.docschina.org/plugins/define-plugin) | 允许在编译时(compile time)配置的全局常量                     |\n| [`DllPlugin`](https://v4.webpack.docschina.org/plugins/dll-plugin) | 为了极大减少构建时间，进行分离打包                           |\n| [`EnvironmentPlugin`](https://v4.webpack.docschina.org/plugins/environment-plugin) | [`DefinePlugin`](https://v4.webpack.docschina.org/plugins/define-plugin) 中 `process.env` 键的简写方式。 |\n| [`ExtractTextWebpackPlugin`](https://v4.webpack.docschina.org/plugins/extract-text-webpack-plugin) | 从 bundle 中提取文本（CSS）到单独的文件                      |\n| [`HotModuleReplacementPlugin`](https://v4.webpack.docschina.org/plugins/hot-module-replacement-plugin) | 启用模块热替换(Enable Hot Module Replacement - HMR)          |\n| [`HtmlWebpackPlugin`](https://v4.webpack.docschina.org/plugins/html-webpack-plugin) | 简单创建 HTML 文件，用于服务器访问                           |\n| [`I18nWebpackPlugin`](https://v4.webpack.docschina.org/plugins/i18n-webpack-plugin) | 为 bundle 增加国际化支持                                     |\n| [`IgnorePlugin`](https://v4.webpack.docschina.org/plugins/ignore-plugin) | 从 bundle 中排除某些模块                                     |\n| [`LimitChunkCountPlugin`](https://v4.webpack.docschina.org/plugins/limit-chunk-count-plugin) | 设置 chunk 的最小/最大限制，以微调和控制 chunk               |\n| [`LoaderOptionsPlugin`](https://v4.webpack.docschina.org/plugins/loader-options-plugin) | 用于从 webpack 1 迁移到 webpack 2                            |\n| [`MinChunkSizePlugin`](https://v4.webpack.docschina.org/plugins/min-chunk-size-plugin) | 确保 chunk 大小超过指定限制                                  |\n| [`MiniCssExtractPlugin`](https://v4.webpack.docschina.org/plugins/mini-css-extract-plugin) | 为每个引入 CSS 的 JS 文件创建一个 CSS 文件                   |\n| [`NoEmitOnErrorsPlugin`](https://v4.webpack.docschina.org/configuration/optimization/#optimization-noemitonerrors) | 在输出阶段时，遇到编译错误跳过                               |\n| [`NormalModuleReplacementPlugin`](https://v4.webpack.docschina.org/plugins/normal-module-replacement-plugin) | 替换与正则表达式匹配的资源                                   |\n| [`NpmInstallWebpackPlugin`](https://v4.webpack.docschina.org/plugins/npm-install-webpack-plugin) | 在开发环境下自动安装缺少的依赖                               |\n| [`ProgressPlugin`](https://v4.webpack.docschina.org/plugins/progress-plugin) | 报告编译进度                                                 |\n| [`ProvidePlugin`](https://v4.webpack.docschina.org/plugins/provide-plugin) | 不必通过 import/require 使用模块                             |\n| [`SourceMapDevToolPlugin`](https://v4.webpack.docschina.org/plugins/source-map-dev-tool-plugin) | 对 source map 进行更细粒度的控制                             |\n| [`EvalSourceMapDevToolPlugin`](https://v4.webpack.docschina.org/plugins/eval-source-map-dev-tool-plugin) | 对 eval source map 进行更细粒度的控制                        |\n| [`UglifyjsWebpackPlugin`](https://v4.webpack.docschina.org/plugins/uglifyjs-webpack-plugin) | 可以控制项目中 UglifyJS 的版本                               |\n| [`TerserPlugin`](https://v4.webpack.docschina.org/plugins/terser-webpack-plugin) | 允许控制项目中 Terser 的版本                                 |\n| [`ZopfliWebpackPlugin`](https://v4.webpack.docschina.org/plugins/zopfli-webpack-plugin) | 通过 node-zopfli 将资源预先压缩的版本                        |\n\n\n\n### HtmlWebpackPlugin\n\n在打包结束后，⾃动生成⼀个 `html` ⽂文件，并把打包生成的`js` 模块引⼊到该 `html` 中\n\n```bash\nnpm install --save-dev html-webpack-plugin\n```\n\n```javascript\n// webpack.config.js\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nmodule.exports = {\n ...\n  plugins: [\n     new HtmlWebpackPlugin({\n       title: \"My App\",\n       filename: \"app.html\",\n       template: \"./src/html/index.html\"\n     }) \n  ]\n};\n```\n\n```html\n<!--./src/html/index.html-->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title><%=htmlWebpackPlugin.options.title%></title>\n</head>\n<body>\n    <h1>html-webpack-plugin</h1>\n</body>\n</html>\n```\n\n在 `html` 模板中，可以通过 `<%=htmlWebpackPlugin.options.XXX%>` 的方式获取配置的值\n\n更多的配置可以自寻查找\n\n### clean-webpack-plugin\n\n删除（清理）构建目录\n\n```bash\nnpm install --save-dev clean-webpack-plugin\n```\n\n```javascript\nconst {CleanWebpackPlugin} = require('clean-webpack-plugin');\nmodule.exports = {\n ...\n  plugins: [\n    ...,\n    new CleanWebpackPlugin(),\n    ...\n  ]\n}\n```\n\n### mini-css-extract-plugin\n\n提取 `CSS` 到一个单独的文件中\n\n```bash\nnpm install --save-dev mini-css-extract-plugin\n```\n\n```javascript\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nmodule.exports = {\n ...,\n  module: {\n   rules: [\n    {\n     test: /\\.s[ac]ss$/,\n     use: [\n      {\n       loader: MiniCssExtractPlugin.loader\n     },\n          'css-loader',\n          'sass-loader'\n        ]\n   }\n   ]\n },\n  plugins: [\n    ...,\n    new MiniCssExtractPlugin({\n     filename: '[name].css'\n    }),\n    ...\n  ]\n}\n```\n\n### DefinePlugin\n\n允许在编译时创建配置的全局对象，是一个`webpack`内置的插件，不需要安装\n\n```javascript\nconst { DefinePlugun } = require('webpack')\n\nmodule.exports = {\n ...\n    plugins:[\n        new DefinePlugin({\n            BASE_URL:'\"./\"'\n        })\n    ]\n}\n```\n\n这时候编译`template`模块的时候，就能通过下述形式获取全局对象\n\n```html\n<link rel=\"icon\" href=\"<%= BASE_URL%>favicon.ico>\"\n```\n\n### copy-webpack-plugin\n\n复制文件或目录到执行区域，如`vue`的打包过程中，如果我们将一些文件放到`public`的目录下，那么这个目录会被复制到`dist`文件夹中\n\n```text\nnpm install copy-webpack-plugin -D\n```\n\n1\n\n```javascript\nnew CopyWebpackPlugin({\n    parrerns:[\n        {\n            from:\"public\",\n            globOptions:{\n                ignore:[\n                    '**/index.html'\n                ]\n            }\n        }\n    ]\n})\n```\n\n复制的规则在`patterns`属性中设置：\n\n- from：设置从哪一个源中开始复制\n- to：复制到的位置，可以省略，会默认复制到打包的目录下\n- globOptions：设置一些额外的选项，其中可以编写需要忽略的文件\n\n# Weback使用小技巧\n\n\n\n#### 批量导入文件：require.context\n\n通过执行require.context函数获取一个特定的上下文,主要用来实现自动化导入模块,在前端工程中,如果遇到从一个文件夹引入很多模块的情况,可以使用这个api,它会遍历文件夹中的指定文件,然后自动导入,使得不需要每次显式的调用import导入模块\n\n##### 使用语法\n\nWebpack 会在构建中解析代码中的 `require.context()` 。\n\n```javascript\nrequire.context(\n  directory,\n  (useSubdirectories = true),\n  (regExp = /^\\.\\/.*$/),\n  (mode = 'sync')\n);\n```\n\n示例：\n\n```javascript\nrequire.context('./test', false, /\\.test\\.js$/);\n//（创建出）一个 context，其中文件来自 test 目录，request 以 `.test.js` 结尾。\nrequire.context('../', true, /\\.stories\\.js$/);\n// （创建出）一个 context，其中所有文件都来自父文件夹及其所有子级文件夹，request 以 `.stories.js` 结尾。\n```\n\n**require.context() 返回的结果是一个函数，该函数包含3个属性**\n\n- resolve{Function} : 是一个函数，返回已分析请求的模块id\n- keys : 返回上下文模块可以处理的所有可能请求的数组的函数\n- id : 是上下文模块的模块id。这可能对module.hot.acce有用\n\n\n\n使用示例：\n\n```javascript\n// vue store中 批量拿到module文件夹中的state文件\nconst modulesFiles = require.context('./modules', true, /\\.js$/)\nconst modules = modulesFiles.keys().reduce((modules, modulePath) => {\n  const moduleName = modulePath.replace(/^\\.\\/(.*)\\.\\w+$/, '$1')\n  const value = modulesFiles(modulePath)\n  modules[moduleName] = value.default\n  return modules\n}, {})\n```\n\n","slug":"Webpack面试题","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62dn002lrify07bx1jlj","content":"<h2 id=\"对Webpack的理解，解决了什么问题？\"><a href=\"#对Webpack的理解，解决了什么问题？\" class=\"headerlink\" title=\"对Webpack的理解，解决了什么问题？\"></a>对Webpack的理解，解决了什么问题？</h2><p>\u0017<code>\u0013Webpack</code>是一个用于现代<code>JavaScript</code>应用程序的静态模块打包工具。</p>\n<h3 id=\"静态模块\"><a href=\"#静态模块\" class=\"headerlink\" title=\"静态模块\"></a>静态模块</h3><p>这里的静态模块指的是开发阶段，可以被<code>webpack</code>直接引用的资源（可以直接被获取打包进<code>bundle.js</code>的资源）</p>\n<p>当<code>webpack</code>处理应用程序时，它会在内部构建一个依赖图，此依赖图对应映射到项目所需的每个模块（不再局限于<code>js</code>文件），并生成一个或多个<code>bundle</code></p>\n<img src=\"https://img.showydream.com/img/1CmJJS-image-20210827122030611.png\" alt=\"image-20210827122030611\" style=\"zoom:50%;\" />\n\n<h3 id=\"webpack的能力和解决的问题\"><a href=\"#webpack的能力和解决的问题\" class=\"headerlink\" title=\"webpack的能力和解决的问题\"></a>webpack的能力和解决的问题</h3><ul>\n<li><p>编译代码能力</p>\n<p>在开发过程中，我们经常会使用一些高级的特性来加快我们的开发效率或者安全性，比如通过<code>ES6</code>+<code>TypeScript</code>开发脚本逻辑，通过<code>sass</code>、<code>less</code>等方式来编写<code>css</code>样式代码。<code>webpack</code>可以通过编译的形式，把不同特性的代码编译成浏览器能识别的<code>ES5</code>语法或者<code>css</code>文件，解决浏览器兼容问题</p>\n<p>压缩代码，优化网站性能</p>\n</li>\n<li><p>模块整合能力</p>\n<p>提高性能，可维护性，解决浏览器频繁请求文件的问题</p>\n</li>\n<li><p>万物皆可模块化能力</p>\n<p>项目维护性增强，支持不同种类的前端模块类型，统一的模块化方案，所有资源文件的加载可以通过代码控制</p>\n</li>\n</ul>\n<h2 id=\"webpack的构建流程\"><a href=\"#webpack的构建流程\" class=\"headerlink\" title=\"webpack的构建流程\"></a>webpack的构建流程</h2><h3 id=\"运行流程\"><a href=\"#运行流程\" class=\"headerlink\" title=\"运行流程\"></a>运行流程</h3><img src=\"https://user-images.githubusercontent.com/26785201/89747816-fe344280-daf2-11ea-820a-6a1a99e34f14.png\" alt=\"img\"/>\n\n<p><code>webpack</code>的运行过程是一个串行的过程，从启动到结束会依次执行以下流程：</p>\n<ol>\n<li>首先会从配置文件和<code>Shell</code>语句中读取与合并参数，并初始化需要使用的插件和配置插件等执行环境所需要的参数。</li>\n<li>初始化完成后会调用<code>Complier</code>的<code>run</code>来真正启动<code>webpack</code>编译构建过程，<code>webpack</code>的构建流程包括<code>compile</code>、<code>make</code>、<code>build</code>、<code>seal</code>、<code>emit</code>阶段，执行完这些阶段就完成了构建过程。</li>\n</ol>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><h4 id=\"entry-options-启动\"><a href=\"#entry-options-启动\" class=\"headerlink\" title=\"entry-options 启动\"></a>entry-options 启动</h4><p>从配置文件和 <code>Shell</code> 语句中读取与合并参数，得出最终的参数。</p>\n<h4 id=\"run-实例化\"><a href=\"#run-实例化\" class=\"headerlink\" title=\"run 实例化\"></a>run 实例化</h4><p><code>compiler</code>：用上一步得到的参数初始化 <code>Compiler</code> 对象，加载所有配置的插件，执行对象的 <code>run</code> 方法开始执行编译</p>\n<h3 id=\"编译构建\"><a href=\"#编译构建\" class=\"headerlink\" title=\"编译构建\"></a>编译构建</h3><h4 id=\"entry-确定入口\"><a href=\"#entry-确定入口\" class=\"headerlink\" title=\"entry 确定入口\"></a>entry 确定入口</h4><p>根据配置中的 <code>entry</code> 找出所有的入口文件</p>\n<h4 id=\"make-编译模块\"><a href=\"#make-编译模块\" class=\"headerlink\" title=\"make 编译模块\"></a>make 编译模块</h4><p>从入口文件出发，调用所有配置的 <code>Loader</code> 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理</p>\n<h4 id=\"build-module-完成模块编译\"><a href=\"#build-module-完成模块编译\" class=\"headerlink\" title=\"build module 完成模块编译\"></a>build module 完成模块编译</h4><p>经过上面一步使用 <code>Loader</code> 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系</p>\n<h4 id=\"seal-输出资源\"><a href=\"#seal-输出资源\" class=\"headerlink\" title=\"seal 输出资源\"></a>seal 输出资源</h4><p>根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 <code>Chunk</code>，再把每个 <code>Chunk</code> 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会</p>\n<h4 id=\"emit-输出完成\"><a href=\"#emit-输出完成\" class=\"headerlink\" title=\"emit 输出完成\"></a>emit 输出完成</h4><p>在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</p>\n<img src=\"https://img.showydream.com/img/XRGqwK-image-20210903115330607.png\" alt=\"image-20210903115330607\" style=\"zoom:50%;\" />\n\n\n<h2 id=\"webpack-config-js-配置Demo\"><a href=\"#webpack-config-js-配置Demo\" class=\"headerlink\" title=\"webpack.config.js 配置Demo\"></a>webpack.config.js 配置Demo</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> node_modules = path.resolve(__dirname, <span class=\"string\">&#x27;node_modules&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> pathToReact = path.resolve(node_modules, <span class=\"string\">&#x27;react/dist/react.min.js&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口文件，是模块构建的起点，同时每一个入口文件对应最后生成的一个 chunk。</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">bundle</span>: [</span><br><span class=\"line\">      <span class=\"string\">&#x27;webpack/hot/dev-server&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;webpack-dev-server/client?http://localhost:8080&#x27;</span>,</span><br><span class=\"line\">      path.resolve(__dirname, <span class=\"string\">&#x27;app/app.js&#x27;</span>)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 文件路径指向(可加快打包过程)。</span></span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;react&#x27;</span>: pathToReact</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 生成文件，是模块构建的终点，包括输出文件与输出路径。</span></span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">&#x27;build&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 这里配置了处理各模块的 loader ，包括 css 预处理 loader ，es6 编译 loader，图片处理 loader。</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">loaders</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">&#x27;babel&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">query</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;es2015&#x27;</span>, <span class=\"string\">&#x27;react&#x27;</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">noParse</span>: [pathToReact]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// webpack 各插件对象，在 webpack 的事件流中执行对应的方法。</span></span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>除此之外再大致介绍下webpack的一些核心概念：</p>\n<ul>\n<li><h5 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h5><p>能转换各类资源，并处理成对应模块的加载器。</p>\n<p>loader间可以串行使用。</p>\n</li>\n<li><h5 id=\"chunk\"><a href=\"#chunk\" class=\"headerlink\" title=\"chunk\"></a>chunk</h5><p>code splitting后的产物，也就是按需加载的分块，装载了不同的module。</p>\n</li>\n</ul>\n<p>对于 module 和 chunk 的关系可以参照 webpack 官方的这张图：</p>\n<p><img src=\"https://img.showydream.com/img/VXlztt-TB1B0DXNXXXXXXdXFXXXXXXXXXX-368-522.jpg\" alt=\"img\"></p>\n<ul>\n<li><h5 id=\"plugin\"><a href=\"#plugin\" class=\"headerlink\" title=\"plugin\"></a>plugin</h5><p>webpack插件的实体，这里以<code>UglifyJsPlugin</code>为例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UglifyJsPlugin</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.options = options;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = UglifyJsPlugin;</span><br><span class=\"line\"></span><br><span class=\"line\">UglifyJsPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">&quot;compilation&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation</span>) </span>&#123;</span><br><span class=\"line\">    compilation.plugin(<span class=\"string\">&quot;build-module&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">module</span></span>) </span>&#123;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    compilation.plugin(<span class=\"string\">&quot;optimize-chunk-assets&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunks, callback</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Uglify 逻辑</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    compilation.plugin(<span class=\"string\">&quot;normal-module-loader&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在webpack中你经常可以看到<code>compilation.plugin(&#39;xxx&#39;,callback)</code>，你可以把它当做一个事件的绑定，这些事件在打包时由webpack来触发。</p>\n</li>\n</ul>\n<h1 id=\"webpack中的Loader总结\"><a href=\"#webpack中的Loader总结\" class=\"headerlink\" title=\"webpack中的Loader总结\"></a>webpack中的Loader总结</h1><h2 id=\"Loader介绍\"><a href=\"#Loader介绍\" class=\"headerlink\" title=\"Loader介绍\"></a>Loader介绍</h2><p>webpack做的事情，仅仅是分析出各种模块的依赖关系，然后整理成资源列表，最终打包生成到指定的文件中。</p>\n<p>上一节我们说过，在webpack内部，任何文件都是模块，不仅仅是<code>js</code>文件。但是在默认情况下，在遇到<code>require</code>和<code>import</code>的时候，webpack只支持对<code>js</code>和<code>json</code>文件的打包，像<code>css</code>、<code>scss</code>、<code>jpg</code>等这些类型的文件，webpack就无能为力了，这时候就用到了loader来对文件的内容进行解析</p>\n<blockquote>\n<p>loader的定义：loader用于对模块的源代码进行转换，在import或加载模块时预处理文件</p>\n</blockquote>\n<p>在加载模块时，执行顺序如下：</p>\n<img src=\"https://img.showydream.com/img/TFRENB-image-20211104120757749.png\" alt=\"image-20211104120757749\" style=\"zoom:50%;\" />\n\n<h5 id=\"当webpack碰到识别不了的文件时，就会从配置中找该文件的解析规则，来看个示例：\"><a href=\"#当webpack碰到识别不了的文件时，就会从配置中找该文件的解析规则，来看个示例：\" class=\"headerlink\" title=\"当webpack碰到识别不了的文件时，就会从配置中找该文件的解析规则，来看个示例：\"></a>当webpack碰到识别不了的文件时，就会从配置中找该文件的解析规则，来看个示例：</h5><p>使用 loader 告诉 webpack 加载 CSS 文件，或者将 TypeScript 转为 JavaScript。为此，首先安装相对应的 loader：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev css-loader ts-loader</span><br></pre></td></tr></table></figure>\n\n<p>然后指示 webpack 对每个 <code>.css</code> 使用 <a href=\"https://webpack.docschina.org/loaders/css-loader\"><code>css-loader</code></a>，以及对所有 <code>.ts</code> 文件使用 <a href=\"https://github.com/TypeStrong/ts-loader\"><code>ts-loader</code></a>：</p>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// 将所有TypeScript 转为 JavaScript，</span></span><br><span class=\"line\">      <span class=\"comment\">// 也就意味着我们使用ts来开发，最终转换成js运行在浏览器端</span></span><br><span class=\"line\">      &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.ts$/</span>, use: <span class=\"string\">&#x27;ts-loader&#x27;</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://webpack.docschina.org/configuration/module/#modulerules\"><code>module.rules</code></a> 允许你在 webpack 配置中指定多个 loader。 这种方式是展示 loader 的一种简明方式，并且有助于使代码变得简洁和易于维护。同时让你对各个 loader 有个全局概览：</p>\n<p>loader <strong>从右到左</strong>（或<strong>从下到上</strong>）地取值(evaluate)/执行(execute)。在下面的示例中，从 sass-loader 开始执行，然后继续执行 css-loader，最后以 style-loader 为结束。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"comment\">// [style-loader](/loaders/style-loader)</span></span><br><span class=\"line\">          &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;style-loader&#x27;</span> &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// [css-loader](/loaders/css-loader)</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">modules</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// [sass-loader](/loaders/sass-loader)</span></span><br><span class=\"line\">          &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;sass-loader&#x27;</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"loader-特性\"><a href=\"#loader-特性\" class=\"headerlink\" title=\"loader 特性\"></a>loader 特性</h2><ul>\n<li>loader 支持链式调用。链中的每个 loader 会将转换应用在已处理过的资源上。一组链式的 loader 将按照相反的顺序执行。链中的第一个 loader 将其结果（也就是应用过转换后的资源）传递给下一个 loader，依此类推。最后，链中的最后一个 loader，返回 webpack 所期望的 JavaScript。</li>\n<li>loader 可以是同步的，也可以是异步的。</li>\n<li>loader 运行在 Node.js 中，并且能够执行任何操作。</li>\n<li>loader 可以通过 <code>options</code> 对象配置（仍然支持使用 <code>query</code> 参数来设置选项，但是这种方式已被废弃）。</li>\n<li>除了常见的通过 <code>package.json</code> 的 <code>main</code> 来将一个 npm 模块导出为 loader，还可以在 module.rules 中使用 <code>loader</code> 字段直接引用一个模块。</li>\n<li>插件(plugin)可以为 loader 带来更多特性。</li>\n<li>loader 能够产生额外的任意文件。</li>\n</ul>\n<p>可以通过 loader 的预处理函数，为 JavaScript 生态系统提供更多能力。用户现在可以更加灵活地引入细粒度逻辑，例如：压缩、打包、语言转译（或编译）</p>\n<h2 id=\"常见的Loader\"><a href=\"#常见的Loader\" class=\"headerlink\" title=\"常见的Loader\"></a>常见的Loader</h2><h3 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h3><ul>\n<li><a href=\"https://webpack.docschina.org/loaders/val-loader\"><code>val-loader</code></a> 将代码作为模块执行，并将其导出为 JS 代码</li>\n<li><a href=\"https://www.npmjs.com/package/ref-loader\"><code>ref-loader</code></a> 用于手动建立文件之间的依赖关系</li>\n</ul>\n<h3 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h3><ul>\n<li><a href=\"https://github.com/awnist/cson-loader\"><code>cson-loader</code></a> 加载并转换 <a href=\"https://github.com/bevry/cson#what-is-cson\">CSON</a> 文件</li>\n</ul>\n<h3 id=\"语法转换\"><a href=\"#语法转换\" class=\"headerlink\" title=\"语法转换\"></a>语法转换</h3><ul>\n<li><a href=\"https://webpack.docschina.org/loaders/babel-loader\"><code>babel-loader</code></a> 使用 <a href=\"https://babeljs.io/\">Babel</a> 加载 ES2015+ 代码并将其转换为 ES5</li>\n<li><a href=\"https://github.com/sairion/buble-loader\"><code>buble-loader</code></a> 使用 <a href=\"https://buble.surge.sh/guide/\">Bublé</a> 加载 ES2015+ 代码并将其转换为 ES5</li>\n<li><a href=\"https://github.com/jupl/traceur-loader\"><code>traceur-loader</code></a> 使用 <a href=\"https://github.com/google/traceur-compiler#readme\">Traceur</a> 加载 ES2015+ 代码并将其转换为 ES5</li>\n<li><a href=\"https://github.com/TypeStrong/ts-loader\"><code>ts-loader</code></a> 像加载 JavaScript 一样加载 <a href=\"https://www.typescriptlang.org/\">TypeScript</a> 2.0+</li>\n<li><a href=\"https://webpack.docschina.org/loaders/coffee-loader\"><code>coffee-loader</code></a> 像加载 JavaScript 一样加载 <a href=\"http://coffeescript.org/\">CoffeeScript</a></li>\n<li><a href=\"https://github.com/fengari-lua/fengari-loader/\"><code>fengari-loader</code></a> 使用 <a href=\"https://fengari.io/\">fengari</a> 加载 Lua 代码</li>\n<li><a href=\"https://github.com/elm-community/elm-webpack-loader\"><code>elm-webpack-loader</code></a> 像加载 JavaScript 一样加载 <a href=\"https://elm-lang.org/\">Elm</a></li>\n</ul>\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><ul>\n<li><a href=\"https://webpack.docschina.org/loaders/html-loader\"><code>html-loader</code></a> 将 HTML 导出为字符串，需要传入静态资源的引用路径</li>\n<li><a href=\"https://github.com/pugjs/pug-loader\"><code>pug-loader</code></a> 加载 Pug 和 Jade 模板并返回一个函数</li>\n<li><a href=\"https://github.com/peerigon/markdown-loader\"><code>markdown-loader</code></a> 将 Markdown 编译为 HTML</li>\n<li><a href=\"https://github.com/javiercf/react-markdown-loader\"><code>react-markdown-loader</code></a> 使用 markdown-parse 解析器将 Markdown 编译为 React 组件</li>\n<li><a href=\"https://github.com/posthtml/posthtml-loader\"><code>posthtml-loader</code></a> 使用 <a href=\"https://github.com/posthtml/posthtml\">PostHTML</a> 加载并转换 HTML 文件</li>\n<li><a href=\"https://github.com/pcardune/handlebars-loader\"><code>handlebars-loader</code></a> 将 Handlebars 文件编译为 HTML</li>\n<li><a href=\"https://github.com/asnowwolf/markup-inline-loader\"><code>markup-inline-loader</code></a> 将 SVG/MathML 文件内嵌到 HTML 中。在将图标字体或 CSS 动画应用于 SVG 时，此功能非常实用。</li>\n<li><a href=\"https://github.com/zimmo-be/twig-loader\"><code>twig-loader</code></a> 编译 Twig 模板并返回一个函数</li>\n<li><a href=\"https://github.com/webpack-contrib/remark-loader\"><code>remark-loader</code></a> 通过 <code>remark</code> 加载 markdown，且支持解析内容中的图片</li>\n</ul>\n<h3 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h3><ul>\n<li><a href=\"https://webpack.docschina.org/loaders/style-loader\"><code>style-loader</code></a> 将模块导出的内容作为样式并添加到 DOM 中</li>\n<li><a href=\"https://webpack.docschina.org/loaders/css-loader\"><code>css-loader</code></a> 加载 CSS 文件并解析 import 的 CSS 文件，最终返回 CSS 代码</li>\n<li><a href=\"https://webpack.docschina.org/loaders/less-loader\"><code>less-loader</code></a> 加载并编译 LESS 文件</li>\n<li><a href=\"https://webpack.docschina.org/loaders/sass-loader\"><code>sass-loader</code></a> 加载并编译 SASS/SCSS 文件</li>\n<li><a href=\"https://webpack.docschina.org/loaders/postcss-loader\"><code>postcss-loader</code></a> 使用 <a href=\"http://postcss.org/\">PostCSS</a> 加载并转换 CSS/SSS 文件</li>\n<li><a href=\"https://webpack.docschina.org/loaders/stylus-loader/\"><code>stylus-loader</code></a> 加载并编译 Stylus 文件</li>\n</ul>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><ul>\n<li><a href=\"https://github.com/vuejs/vue-loader\"><code>vue-loader</code></a> 加载并编译 <a href=\"https://vuejs.org/v2/guide/components.html\">Vue 组件</a></li>\n<li><a href=\"https://github.com/TheLarkInn/angular2-template-loader\"><code>angular2-template-loader</code></a> 加载并编译 <a href=\"https://angular.io/\">Angular</a> 组件</li>\n</ul>\n<h3 id=\"Awesome\"><a href=\"#Awesome\" class=\"headerlink\" title=\"Awesome\"></a>Awesome</h3><p>有关更多第三方 loader，请参阅 <a href=\"https://webpack.docschina.org/awesome-webpack/#loaders\">awesome-webpack</a> 中的列表。</p>\n<h1 id=\"Webpack中的Plugin总结\"><a href=\"#Webpack中的Plugin总结\" class=\"headerlink\" title=\"Webpack中的Plugin总结\"></a>Webpack中的Plugin总结</h1><h3 id=\"Plugin介绍\"><a href=\"#Plugin介绍\" class=\"headerlink\" title=\"Plugin介绍\"></a>Plugin介绍</h3><p>顾名思义，plugin是插件的意思，它是一种遵循Webpack应用程序接口规范编写的程序，在webpack规定的系统下运行。plugin赋予其各种灵活的功能，例如打包优化、资源管理、环境变量注入等，它们会在webpack不同阶段（钩子函数、生命周期）中运行，贯穿了webpack的整个编译周期。</p>\n<img src=\"https://img.showydream.com/img/v34XjV-9a04ec40-a7c2-11eb-ab90-d9ae814b240d-20211105151809349.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p>插件目的在于解决 loader无法实现的<strong>其他事</strong>。Webpack 提供很多开箱即用的插件</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>由于<strong>插件</strong>可以携带参数/选项，你必须在 webpack 配置中，向 <code>plugins</code> 属性传入一个 <code>new</code> 实例。</p>\n<p>取决于你的 webpack 用法，对应有多种使用插件的方式。</p>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>); <span class=\"comment\">// 通过 npm 安装</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>); <span class=\"comment\">// 访问内置的插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./path/to/my/entry/file.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;my-first-webpack.bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">        use: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.ProgressPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123; <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./src/index.html&#x27;</span> &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h3><table>\n<thead>\n<tr>\n<th><strong>Name</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/babel-minify-webpack-plugin\"><code>BabelMinifyWebpackPlugin</code></a></td>\n<td>使用 <a href=\"https://github.com/babel/minify\">babel-minify</a>进行压缩</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/banner-plugin\"><code>BannerPlugin</code></a></td>\n<td>在每个生成的 chunk 顶部添加 banner</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/commons-chunk-plugin\"><code>CommonsChunkPlugin</code></a></td>\n<td>提取 chunks 之间共享的通用模块</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/compression-webpack-plugin\"><code>CompressionWebpackPlugin</code></a></td>\n<td>预先准备的资源压缩版本，使用 Content-Encoding 提供访问服务</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/context-replacement-plugin\"><code>ContextReplacementPlugin</code></a></td>\n<td>重写 <code>require</code> 表达式的推断上下文</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/copy-webpack-plugin\"><code>CopyWebpackPlugin</code></a></td>\n<td>将单个文件或整个目录复制到构建目录</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/define-plugin\"><code>DefinePlugin</code></a></td>\n<td>允许在编译时(compile time)配置的全局常量</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/dll-plugin\"><code>DllPlugin</code></a></td>\n<td>为了极大减少构建时间，进行分离打包</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/environment-plugin\"><code>EnvironmentPlugin</code></a></td>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/define-plugin\"><code>DefinePlugin</code></a> 中 <code>process.env</code> 键的简写方式。</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/extract-text-webpack-plugin\"><code>ExtractTextWebpackPlugin</code></a></td>\n<td>从 bundle 中提取文本（CSS）到单独的文件</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/hot-module-replacement-plugin\"><code>HotModuleReplacementPlugin</code></a></td>\n<td>启用模块热替换(Enable Hot Module Replacement - HMR)</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/html-webpack-plugin\"><code>HtmlWebpackPlugin</code></a></td>\n<td>简单创建 HTML 文件，用于服务器访问</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/i18n-webpack-plugin\"><code>I18nWebpackPlugin</code></a></td>\n<td>为 bundle 增加国际化支持</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/ignore-plugin\"><code>IgnorePlugin</code></a></td>\n<td>从 bundle 中排除某些模块</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/limit-chunk-count-plugin\"><code>LimitChunkCountPlugin</code></a></td>\n<td>设置 chunk 的最小/最大限制，以微调和控制 chunk</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/loader-options-plugin\"><code>LoaderOptionsPlugin</code></a></td>\n<td>用于从 webpack 1 迁移到 webpack 2</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/min-chunk-size-plugin\"><code>MinChunkSizePlugin</code></a></td>\n<td>确保 chunk 大小超过指定限制</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/mini-css-extract-plugin\"><code>MiniCssExtractPlugin</code></a></td>\n<td>为每个引入 CSS 的 JS 文件创建一个 CSS 文件</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/configuration/optimization/#optimization-noemitonerrors\"><code>NoEmitOnErrorsPlugin</code></a></td>\n<td>在输出阶段时，遇到编译错误跳过</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/normal-module-replacement-plugin\"><code>NormalModuleReplacementPlugin</code></a></td>\n<td>替换与正则表达式匹配的资源</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/npm-install-webpack-plugin\"><code>NpmInstallWebpackPlugin</code></a></td>\n<td>在开发环境下自动安装缺少的依赖</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/progress-plugin\"><code>ProgressPlugin</code></a></td>\n<td>报告编译进度</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/provide-plugin\"><code>ProvidePlugin</code></a></td>\n<td>不必通过 import/require 使用模块</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/source-map-dev-tool-plugin\"><code>SourceMapDevToolPlugin</code></a></td>\n<td>对 source map 进行更细粒度的控制</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/eval-source-map-dev-tool-plugin\"><code>EvalSourceMapDevToolPlugin</code></a></td>\n<td>对 eval source map 进行更细粒度的控制</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/uglifyjs-webpack-plugin\"><code>UglifyjsWebpackPlugin</code></a></td>\n<td>可以控制项目中 UglifyJS 的版本</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/terser-webpack-plugin\"><code>TerserPlugin</code></a></td>\n<td>允许控制项目中 Terser 的版本</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/zopfli-webpack-plugin\"><code>ZopfliWebpackPlugin</code></a></td>\n<td>通过 node-zopfli 将资源预先压缩的版本</td>\n</tr>\n</tbody></table>\n<h3 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a>HtmlWebpackPlugin</h3><p>在打包结束后，⾃动生成⼀个 <code>html</code> ⽂文件，并把打包生成的<code>js</code> 模块引⼊到该 <code>html</code> 中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;html-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"> ...</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">     <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">       <span class=\"attr\">title</span>: <span class=\"string\">&quot;My App&quot;</span>,</span><br><span class=\"line\">       <span class=\"attr\">filename</span>: <span class=\"string\">&quot;app.html&quot;</span>,</span><br><span class=\"line\">       <span class=\"attr\">template</span>: <span class=\"string\">&quot;./src/html/index.html&quot;</span></span><br><span class=\"line\">     &#125;) </span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--./src/html/index.html--&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>&lt;%=htmlWebpackPlugin.options.title%&gt;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>html-webpack-plugin<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>html</code> 模板中，可以通过 <code>&lt;%=htmlWebpackPlugin.options.XXX%&gt;</code> 的方式获取配置的值</p>\n<p>更多的配置可以自寻查找</p>\n<h3 id=\"clean-webpack-plugin\"><a href=\"#clean-webpack-plugin\" class=\"headerlink\" title=\"clean-webpack-plugin\"></a>clean-webpack-plugin</h3><p>删除（清理）构建目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev clean-webpack-plugin</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;CleanWebpackPlugin&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"> ...</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    ...,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mini-css-extract-plugin\"><a href=\"#mini-css-extract-plugin\" class=\"headerlink\" title=\"mini-css-extract-plugin\"></a>mini-css-extract-plugin</h3><p>提取 <code>CSS</code> 到一个单独的文件中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev mini-css-extract-plugin</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MiniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"> ...,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">   <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/</span>,</span><br><span class=\"line\">     use: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">       <span class=\"attr\">loader</span>: MiniCssExtractPlugin.loader</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">          <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;sass-loader&#x27;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   ]</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    ...,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">     <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].css&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DefinePlugin\"><a href=\"#DefinePlugin\" class=\"headerlink\" title=\"DefinePlugin\"></a>DefinePlugin</h3><p>允许在编译时创建配置的全局对象，是一个<code>webpack</code>内置的插件，不需要安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; DefinePlugun &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"> ...</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>:[</span><br><span class=\"line\">        <span class=\"keyword\">new</span> DefinePlugin(&#123;</span><br><span class=\"line\">            <span class=\"attr\">BASE_URL</span>:<span class=\"string\">&#x27;&quot;./&quot;&#x27;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候编译<code>template</code>模块的时候，就能通过下述形式获取全局对象</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;icon&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= BASE_URL%&gt;favicon.ico&gt;&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"copy-webpack-plugin\"><a href=\"#copy-webpack-plugin\" class=\"headerlink\" title=\"copy-webpack-plugin\"></a>copy-webpack-plugin</h3><p>复制文件或目录到执行区域，如<code>vue</code>的打包过程中，如果我们将一些文件放到<code>public</code>的目录下，那么这个目录会被复制到<code>dist</code>文件夹中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install copy-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n<p>1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> CopyWebpackPlugin(&#123;</span><br><span class=\"line\">    <span class=\"attr\">parrerns</span>:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">from</span>:<span class=\"string\">&quot;public&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">globOptions</span>:&#123;</span><br><span class=\"line\">                <span class=\"attr\">ignore</span>:[</span><br><span class=\"line\">                    <span class=\"string\">&#x27;**/index.html&#x27;</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>复制的规则在<code>patterns</code>属性中设置：</p>\n<ul>\n<li>from：设置从哪一个源中开始复制</li>\n<li>to：复制到的位置，可以省略，会默认复制到打包的目录下</li>\n<li>globOptions：设置一些额外的选项，其中可以编写需要忽略的文件</li>\n</ul>\n<h1 id=\"Weback使用小技巧\"><a href=\"#Weback使用小技巧\" class=\"headerlink\" title=\"Weback使用小技巧\"></a>Weback使用小技巧</h1><h4 id=\"批量导入文件：require-context\"><a href=\"#批量导入文件：require-context\" class=\"headerlink\" title=\"批量导入文件：require.context\"></a>批量导入文件：require.context</h4><p>通过执行require.context函数获取一个特定的上下文,主要用来实现自动化导入模块,在前端工程中,如果遇到从一个文件夹引入很多模块的情况,可以使用这个api,它会遍历文件夹中的指定文件,然后自动导入,使得不需要每次显式的调用import导入模块</p>\n<h5 id=\"使用语法\"><a href=\"#使用语法\" class=\"headerlink\" title=\"使用语法\"></a>使用语法</h5><p>Webpack 会在构建中解析代码中的 <code>require.context()</code> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>.context(</span><br><span class=\"line\">  directory,</span><br><span class=\"line\">  (useSubdirectories = <span class=\"literal\">true</span>),</span><br><span class=\"line\">  (regExp = <span class=\"regexp\">/^\\.\\/.*$/</span>),</span><br><span class=\"line\">  (mode = <span class=\"string\">&#x27;sync&#x27;</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>.context(<span class=\"string\">&#x27;./test&#x27;</span>, <span class=\"literal\">false</span>, <span class=\"regexp\">/\\.test\\.js$/</span>);</span><br><span class=\"line\"><span class=\"comment\">//（创建出）一个 context，其中文件来自 test 目录，request 以 `.test.js` 结尾。</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>.context(<span class=\"string\">&#x27;../&#x27;</span>, <span class=\"literal\">true</span>, <span class=\"regexp\">/\\.stories\\.js$/</span>);</span><br><span class=\"line\"><span class=\"comment\">// （创建出）一个 context，其中所有文件都来自父文件夹及其所有子级文件夹，request 以 `.stories.js` 结尾。</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>require.context() 返回的结果是一个函数，该函数包含3个属性</strong></p>\n<ul>\n<li>resolve{Function} : 是一个函数，返回已分析请求的模块id</li>\n<li>keys : 返回上下文模块可以处理的所有可能请求的数组的函数</li>\n<li>id : 是上下文模块的模块id。这可能对module.hot.acce有用</li>\n</ul>\n<p>使用示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue store中 批量拿到module文件夹中的state文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> modulesFiles = <span class=\"built_in\">require</span>.context(<span class=\"string\">&#x27;./modules&#x27;</span>, <span class=\"literal\">true</span>, <span class=\"regexp\">/\\.js$/</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> modules = modulesFiles.keys().reduce(<span class=\"function\">(<span class=\"params\">modules, modulePath</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> moduleName = modulePath.replace(<span class=\"regexp\">/^\\.\\/(.*)\\.\\w+$/</span>, <span class=\"string\">&#x27;$1&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = modulesFiles(modulePath)</span><br><span class=\"line\">  modules[moduleName] = value.default</span><br><span class=\"line\">  <span class=\"keyword\">return</span> modules</span><br><span class=\"line\">&#125;, &#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"对Webpack的理解，解决了什么问题？\"><a href=\"#对Webpack的理解，解决了什么问题？\" class=\"headerlink\" title=\"对Webpack的理解，解决了什么问题？\"></a>对Webpack的理解，解决了什么问题？</h2><p>\u0017<code>\u0013Webpack</code>是一个用于现代<code>JavaScript</code>应用程序的静态模块打包工具。</p>\n<h3 id=\"静态模块\"><a href=\"#静态模块\" class=\"headerlink\" title=\"静态模块\"></a>静态模块</h3><p>这里的静态模块指的是开发阶段，可以被<code>webpack</code>直接引用的资源（可以直接被获取打包进<code>bundle.js</code>的资源）</p>\n<p>当<code>webpack</code>处理应用程序时，它会在内部构建一个依赖图，此依赖图对应映射到项目所需的每个模块（不再局限于<code>js</code>文件），并生成一个或多个<code>bundle</code></p>\n<img src=\"https://img.showydream.com/img/1CmJJS-image-20210827122030611.png\" alt=\"image-20210827122030611\" style=\"zoom:50%;\" />\n\n<h3 id=\"webpack的能力和解决的问题\"><a href=\"#webpack的能力和解决的问题\" class=\"headerlink\" title=\"webpack的能力和解决的问题\"></a>webpack的能力和解决的问题</h3><ul>\n<li><p>编译代码能力</p>\n<p>在开发过程中，我们经常会使用一些高级的特性来加快我们的开发效率或者安全性，比如通过<code>ES6</code>+<code>TypeScript</code>开发脚本逻辑，通过<code>sass</code>、<code>less</code>等方式来编写<code>css</code>样式代码。<code>webpack</code>可以通过编译的形式，把不同特性的代码编译成浏览器能识别的<code>ES5</code>语法或者<code>css</code>文件，解决浏览器兼容问题</p>\n<p>压缩代码，优化网站性能</p>\n</li>\n<li><p>模块整合能力</p>\n<p>提高性能，可维护性，解决浏览器频繁请求文件的问题</p>\n</li>\n<li><p>万物皆可模块化能力</p>\n<p>项目维护性增强，支持不同种类的前端模块类型，统一的模块化方案，所有资源文件的加载可以通过代码控制</p>\n</li>\n</ul>\n<h2 id=\"webpack的构建流程\"><a href=\"#webpack的构建流程\" class=\"headerlink\" title=\"webpack的构建流程\"></a>webpack的构建流程</h2><h3 id=\"运行流程\"><a href=\"#运行流程\" class=\"headerlink\" title=\"运行流程\"></a>运行流程</h3><img src=\"https://user-images.githubusercontent.com/26785201/89747816-fe344280-daf2-11ea-820a-6a1a99e34f14.png\" alt=\"img\"/>\n\n<p><code>webpack</code>的运行过程是一个串行的过程，从启动到结束会依次执行以下流程：</p>\n<ol>\n<li>首先会从配置文件和<code>Shell</code>语句中读取与合并参数，并初始化需要使用的插件和配置插件等执行环境所需要的参数。</li>\n<li>初始化完成后会调用<code>Complier</code>的<code>run</code>来真正启动<code>webpack</code>编译构建过程，<code>webpack</code>的构建流程包括<code>compile</code>、<code>make</code>、<code>build</code>、<code>seal</code>、<code>emit</code>阶段，执行完这些阶段就完成了构建过程。</li>\n</ol>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><h4 id=\"entry-options-启动\"><a href=\"#entry-options-启动\" class=\"headerlink\" title=\"entry-options 启动\"></a>entry-options 启动</h4><p>从配置文件和 <code>Shell</code> 语句中读取与合并参数，得出最终的参数。</p>\n<h4 id=\"run-实例化\"><a href=\"#run-实例化\" class=\"headerlink\" title=\"run 实例化\"></a>run 实例化</h4><p><code>compiler</code>：用上一步得到的参数初始化 <code>Compiler</code> 对象，加载所有配置的插件，执行对象的 <code>run</code> 方法开始执行编译</p>\n<h3 id=\"编译构建\"><a href=\"#编译构建\" class=\"headerlink\" title=\"编译构建\"></a>编译构建</h3><h4 id=\"entry-确定入口\"><a href=\"#entry-确定入口\" class=\"headerlink\" title=\"entry 确定入口\"></a>entry 确定入口</h4><p>根据配置中的 <code>entry</code> 找出所有的入口文件</p>\n<h4 id=\"make-编译模块\"><a href=\"#make-编译模块\" class=\"headerlink\" title=\"make 编译模块\"></a>make 编译模块</h4><p>从入口文件出发，调用所有配置的 <code>Loader</code> 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理</p>\n<h4 id=\"build-module-完成模块编译\"><a href=\"#build-module-完成模块编译\" class=\"headerlink\" title=\"build module 完成模块编译\"></a>build module 完成模块编译</h4><p>经过上面一步使用 <code>Loader</code> 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系</p>\n<h4 id=\"seal-输出资源\"><a href=\"#seal-输出资源\" class=\"headerlink\" title=\"seal 输出资源\"></a>seal 输出资源</h4><p>根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 <code>Chunk</code>，再把每个 <code>Chunk</code> 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会</p>\n<h4 id=\"emit-输出完成\"><a href=\"#emit-输出完成\" class=\"headerlink\" title=\"emit 输出完成\"></a>emit 输出完成</h4><p>在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</p>\n<img src=\"https://img.showydream.com/img/XRGqwK-image-20210903115330607.png\" alt=\"image-20210903115330607\" style=\"zoom:50%;\" />\n\n\n<h2 id=\"webpack-config-js-配置Demo\"><a href=\"#webpack-config-js-配置Demo\" class=\"headerlink\" title=\"webpack.config.js 配置Demo\"></a>webpack.config.js 配置Demo</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> node_modules = path.resolve(__dirname, <span class=\"string\">&#x27;node_modules&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> pathToReact = path.resolve(node_modules, <span class=\"string\">&#x27;react/dist/react.min.js&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口文件，是模块构建的起点，同时每一个入口文件对应最后生成的一个 chunk。</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">bundle</span>: [</span><br><span class=\"line\">      <span class=\"string\">&#x27;webpack/hot/dev-server&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;webpack-dev-server/client?http://localhost:8080&#x27;</span>,</span><br><span class=\"line\">      path.resolve(__dirname, <span class=\"string\">&#x27;app/app.js&#x27;</span>)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 文件路径指向(可加快打包过程)。</span></span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;react&#x27;</span>: pathToReact</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 生成文件，是模块构建的终点，包括输出文件与输出路径。</span></span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">&#x27;build&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 这里配置了处理各模块的 loader ，包括 css 预处理 loader ，es6 编译 loader，图片处理 loader。</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">loaders</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">&#x27;babel&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">query</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;es2015&#x27;</span>, <span class=\"string\">&#x27;react&#x27;</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">noParse</span>: [pathToReact]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// webpack 各插件对象，在 webpack 的事件流中执行对应的方法。</span></span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>除此之外再大致介绍下webpack的一些核心概念：</p>\n<ul>\n<li><h5 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h5><p>能转换各类资源，并处理成对应模块的加载器。</p>\n<p>loader间可以串行使用。</p>\n</li>\n<li><h5 id=\"chunk\"><a href=\"#chunk\" class=\"headerlink\" title=\"chunk\"></a>chunk</h5><p>code splitting后的产物，也就是按需加载的分块，装载了不同的module。</p>\n</li>\n</ul>\n<p>对于 module 和 chunk 的关系可以参照 webpack 官方的这张图：</p>\n<p><img src=\"https://img.showydream.com/img/VXlztt-TB1B0DXNXXXXXXdXFXXXXXXXXXX-368-522.jpg\" alt=\"img\"></p>\n<ul>\n<li><h5 id=\"plugin\"><a href=\"#plugin\" class=\"headerlink\" title=\"plugin\"></a>plugin</h5><p>webpack插件的实体，这里以<code>UglifyJsPlugin</code>为例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UglifyJsPlugin</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.options = options;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = UglifyJsPlugin;</span><br><span class=\"line\"></span><br><span class=\"line\">UglifyJsPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</span><br><span class=\"line\">  compiler.plugin(<span class=\"string\">&quot;compilation&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation</span>) </span>&#123;</span><br><span class=\"line\">    compilation.plugin(<span class=\"string\">&quot;build-module&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">module</span></span>) </span>&#123;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    compilation.plugin(<span class=\"string\">&quot;optimize-chunk-assets&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunks, callback</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Uglify 逻辑</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    compilation.plugin(<span class=\"string\">&quot;normal-module-loader&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在webpack中你经常可以看到<code>compilation.plugin(&#39;xxx&#39;,callback)</code>，你可以把它当做一个事件的绑定，这些事件在打包时由webpack来触发。</p>\n</li>\n</ul>\n<h1 id=\"webpack中的Loader总结\"><a href=\"#webpack中的Loader总结\" class=\"headerlink\" title=\"webpack中的Loader总结\"></a>webpack中的Loader总结</h1><h2 id=\"Loader介绍\"><a href=\"#Loader介绍\" class=\"headerlink\" title=\"Loader介绍\"></a>Loader介绍</h2><p>webpack做的事情，仅仅是分析出各种模块的依赖关系，然后整理成资源列表，最终打包生成到指定的文件中。</p>\n<p>上一节我们说过，在webpack内部，任何文件都是模块，不仅仅是<code>js</code>文件。但是在默认情况下，在遇到<code>require</code>和<code>import</code>的时候，webpack只支持对<code>js</code>和<code>json</code>文件的打包，像<code>css</code>、<code>scss</code>、<code>jpg</code>等这些类型的文件，webpack就无能为力了，这时候就用到了loader来对文件的内容进行解析</p>\n<blockquote>\n<p>loader的定义：loader用于对模块的源代码进行转换，在import或加载模块时预处理文件</p>\n</blockquote>\n<p>在加载模块时，执行顺序如下：</p>\n<img src=\"https://img.showydream.com/img/TFRENB-image-20211104120757749.png\" alt=\"image-20211104120757749\" style=\"zoom:50%;\" />\n\n<h5 id=\"当webpack碰到识别不了的文件时，就会从配置中找该文件的解析规则，来看个示例：\"><a href=\"#当webpack碰到识别不了的文件时，就会从配置中找该文件的解析规则，来看个示例：\" class=\"headerlink\" title=\"当webpack碰到识别不了的文件时，就会从配置中找该文件的解析规则，来看个示例：\"></a>当webpack碰到识别不了的文件时，就会从配置中找该文件的解析规则，来看个示例：</h5><p>使用 loader 告诉 webpack 加载 CSS 文件，或者将 TypeScript 转为 JavaScript。为此，首先安装相对应的 loader：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev css-loader ts-loader</span><br></pre></td></tr></table></figure>\n\n<p>然后指示 webpack 对每个 <code>.css</code> 使用 <a href=\"https://webpack.docschina.org/loaders/css-loader\"><code>css-loader</code></a>，以及对所有 <code>.ts</code> 文件使用 <a href=\"https://github.com/TypeStrong/ts-loader\"><code>ts-loader</code></a>：</p>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// 将所有TypeScript 转为 JavaScript，</span></span><br><span class=\"line\">      <span class=\"comment\">// 也就意味着我们使用ts来开发，最终转换成js运行在浏览器端</span></span><br><span class=\"line\">      &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.ts$/</span>, use: <span class=\"string\">&#x27;ts-loader&#x27;</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://webpack.docschina.org/configuration/module/#modulerules\"><code>module.rules</code></a> 允许你在 webpack 配置中指定多个 loader。 这种方式是展示 loader 的一种简明方式，并且有助于使代码变得简洁和易于维护。同时让你对各个 loader 有个全局概览：</p>\n<p>loader <strong>从右到左</strong>（或<strong>从下到上</strong>）地取值(evaluate)/执行(execute)。在下面的示例中，从 sass-loader 开始执行，然后继续执行 css-loader，最后以 style-loader 为结束。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"comment\">// [style-loader](/loaders/style-loader)</span></span><br><span class=\"line\">          &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;style-loader&#x27;</span> &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// [css-loader](/loaders/css-loader)</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">modules</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// [sass-loader](/loaders/sass-loader)</span></span><br><span class=\"line\">          &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;sass-loader&#x27;</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"loader-特性\"><a href=\"#loader-特性\" class=\"headerlink\" title=\"loader 特性\"></a>loader 特性</h2><ul>\n<li>loader 支持链式调用。链中的每个 loader 会将转换应用在已处理过的资源上。一组链式的 loader 将按照相反的顺序执行。链中的第一个 loader 将其结果（也就是应用过转换后的资源）传递给下一个 loader，依此类推。最后，链中的最后一个 loader，返回 webpack 所期望的 JavaScript。</li>\n<li>loader 可以是同步的，也可以是异步的。</li>\n<li>loader 运行在 Node.js 中，并且能够执行任何操作。</li>\n<li>loader 可以通过 <code>options</code> 对象配置（仍然支持使用 <code>query</code> 参数来设置选项，但是这种方式已被废弃）。</li>\n<li>除了常见的通过 <code>package.json</code> 的 <code>main</code> 来将一个 npm 模块导出为 loader，还可以在 module.rules 中使用 <code>loader</code> 字段直接引用一个模块。</li>\n<li>插件(plugin)可以为 loader 带来更多特性。</li>\n<li>loader 能够产生额外的任意文件。</li>\n</ul>\n<p>可以通过 loader 的预处理函数，为 JavaScript 生态系统提供更多能力。用户现在可以更加灵活地引入细粒度逻辑，例如：压缩、打包、语言转译（或编译）</p>\n<h2 id=\"常见的Loader\"><a href=\"#常见的Loader\" class=\"headerlink\" title=\"常见的Loader\"></a>常见的Loader</h2><h3 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h3><ul>\n<li><a href=\"https://webpack.docschina.org/loaders/val-loader\"><code>val-loader</code></a> 将代码作为模块执行，并将其导出为 JS 代码</li>\n<li><a href=\"https://www.npmjs.com/package/ref-loader\"><code>ref-loader</code></a> 用于手动建立文件之间的依赖关系</li>\n</ul>\n<h3 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h3><ul>\n<li><a href=\"https://github.com/awnist/cson-loader\"><code>cson-loader</code></a> 加载并转换 <a href=\"https://github.com/bevry/cson#what-is-cson\">CSON</a> 文件</li>\n</ul>\n<h3 id=\"语法转换\"><a href=\"#语法转换\" class=\"headerlink\" title=\"语法转换\"></a>语法转换</h3><ul>\n<li><a href=\"https://webpack.docschina.org/loaders/babel-loader\"><code>babel-loader</code></a> 使用 <a href=\"https://babeljs.io/\">Babel</a> 加载 ES2015+ 代码并将其转换为 ES5</li>\n<li><a href=\"https://github.com/sairion/buble-loader\"><code>buble-loader</code></a> 使用 <a href=\"https://buble.surge.sh/guide/\">Bublé</a> 加载 ES2015+ 代码并将其转换为 ES5</li>\n<li><a href=\"https://github.com/jupl/traceur-loader\"><code>traceur-loader</code></a> 使用 <a href=\"https://github.com/google/traceur-compiler#readme\">Traceur</a> 加载 ES2015+ 代码并将其转换为 ES5</li>\n<li><a href=\"https://github.com/TypeStrong/ts-loader\"><code>ts-loader</code></a> 像加载 JavaScript 一样加载 <a href=\"https://www.typescriptlang.org/\">TypeScript</a> 2.0+</li>\n<li><a href=\"https://webpack.docschina.org/loaders/coffee-loader\"><code>coffee-loader</code></a> 像加载 JavaScript 一样加载 <a href=\"http://coffeescript.org/\">CoffeeScript</a></li>\n<li><a href=\"https://github.com/fengari-lua/fengari-loader/\"><code>fengari-loader</code></a> 使用 <a href=\"https://fengari.io/\">fengari</a> 加载 Lua 代码</li>\n<li><a href=\"https://github.com/elm-community/elm-webpack-loader\"><code>elm-webpack-loader</code></a> 像加载 JavaScript 一样加载 <a href=\"https://elm-lang.org/\">Elm</a></li>\n</ul>\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><ul>\n<li><a href=\"https://webpack.docschina.org/loaders/html-loader\"><code>html-loader</code></a> 将 HTML 导出为字符串，需要传入静态资源的引用路径</li>\n<li><a href=\"https://github.com/pugjs/pug-loader\"><code>pug-loader</code></a> 加载 Pug 和 Jade 模板并返回一个函数</li>\n<li><a href=\"https://github.com/peerigon/markdown-loader\"><code>markdown-loader</code></a> 将 Markdown 编译为 HTML</li>\n<li><a href=\"https://github.com/javiercf/react-markdown-loader\"><code>react-markdown-loader</code></a> 使用 markdown-parse 解析器将 Markdown 编译为 React 组件</li>\n<li><a href=\"https://github.com/posthtml/posthtml-loader\"><code>posthtml-loader</code></a> 使用 <a href=\"https://github.com/posthtml/posthtml\">PostHTML</a> 加载并转换 HTML 文件</li>\n<li><a href=\"https://github.com/pcardune/handlebars-loader\"><code>handlebars-loader</code></a> 将 Handlebars 文件编译为 HTML</li>\n<li><a href=\"https://github.com/asnowwolf/markup-inline-loader\"><code>markup-inline-loader</code></a> 将 SVG/MathML 文件内嵌到 HTML 中。在将图标字体或 CSS 动画应用于 SVG 时，此功能非常实用。</li>\n<li><a href=\"https://github.com/zimmo-be/twig-loader\"><code>twig-loader</code></a> 编译 Twig 模板并返回一个函数</li>\n<li><a href=\"https://github.com/webpack-contrib/remark-loader\"><code>remark-loader</code></a> 通过 <code>remark</code> 加载 markdown，且支持解析内容中的图片</li>\n</ul>\n<h3 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h3><ul>\n<li><a href=\"https://webpack.docschina.org/loaders/style-loader\"><code>style-loader</code></a> 将模块导出的内容作为样式并添加到 DOM 中</li>\n<li><a href=\"https://webpack.docschina.org/loaders/css-loader\"><code>css-loader</code></a> 加载 CSS 文件并解析 import 的 CSS 文件，最终返回 CSS 代码</li>\n<li><a href=\"https://webpack.docschina.org/loaders/less-loader\"><code>less-loader</code></a> 加载并编译 LESS 文件</li>\n<li><a href=\"https://webpack.docschina.org/loaders/sass-loader\"><code>sass-loader</code></a> 加载并编译 SASS/SCSS 文件</li>\n<li><a href=\"https://webpack.docschina.org/loaders/postcss-loader\"><code>postcss-loader</code></a> 使用 <a href=\"http://postcss.org/\">PostCSS</a> 加载并转换 CSS/SSS 文件</li>\n<li><a href=\"https://webpack.docschina.org/loaders/stylus-loader/\"><code>stylus-loader</code></a> 加载并编译 Stylus 文件</li>\n</ul>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><ul>\n<li><a href=\"https://github.com/vuejs/vue-loader\"><code>vue-loader</code></a> 加载并编译 <a href=\"https://vuejs.org/v2/guide/components.html\">Vue 组件</a></li>\n<li><a href=\"https://github.com/TheLarkInn/angular2-template-loader\"><code>angular2-template-loader</code></a> 加载并编译 <a href=\"https://angular.io/\">Angular</a> 组件</li>\n</ul>\n<h3 id=\"Awesome\"><a href=\"#Awesome\" class=\"headerlink\" title=\"Awesome\"></a>Awesome</h3><p>有关更多第三方 loader，请参阅 <a href=\"https://webpack.docschina.org/awesome-webpack/#loaders\">awesome-webpack</a> 中的列表。</p>\n<h1 id=\"Webpack中的Plugin总结\"><a href=\"#Webpack中的Plugin总结\" class=\"headerlink\" title=\"Webpack中的Plugin总结\"></a>Webpack中的Plugin总结</h1><h3 id=\"Plugin介绍\"><a href=\"#Plugin介绍\" class=\"headerlink\" title=\"Plugin介绍\"></a>Plugin介绍</h3><p>顾名思义，plugin是插件的意思，它是一种遵循Webpack应用程序接口规范编写的程序，在webpack规定的系统下运行。plugin赋予其各种灵活的功能，例如打包优化、资源管理、环境变量注入等，它们会在webpack不同阶段（钩子函数、生命周期）中运行，贯穿了webpack的整个编译周期。</p>\n<img src=\"https://img.showydream.com/img/v34XjV-9a04ec40-a7c2-11eb-ab90-d9ae814b240d-20211105151809349.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p>插件目的在于解决 loader无法实现的<strong>其他事</strong>。Webpack 提供很多开箱即用的插件</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>由于<strong>插件</strong>可以携带参数/选项，你必须在 webpack 配置中，向 <code>plugins</code> 属性传入一个 <code>new</code> 实例。</p>\n<p>取决于你的 webpack 用法，对应有多种使用插件的方式。</p>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>); <span class=\"comment\">// 通过 npm 安装</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>); <span class=\"comment\">// 访问内置的插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./path/to/my/entry/file.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;my-first-webpack.bundle.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">        use: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.ProgressPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123; <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./src/index.html&#x27;</span> &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h3><table>\n<thead>\n<tr>\n<th><strong>Name</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/babel-minify-webpack-plugin\"><code>BabelMinifyWebpackPlugin</code></a></td>\n<td>使用 <a href=\"https://github.com/babel/minify\">babel-minify</a>进行压缩</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/banner-plugin\"><code>BannerPlugin</code></a></td>\n<td>在每个生成的 chunk 顶部添加 banner</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/commons-chunk-plugin\"><code>CommonsChunkPlugin</code></a></td>\n<td>提取 chunks 之间共享的通用模块</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/compression-webpack-plugin\"><code>CompressionWebpackPlugin</code></a></td>\n<td>预先准备的资源压缩版本，使用 Content-Encoding 提供访问服务</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/context-replacement-plugin\"><code>ContextReplacementPlugin</code></a></td>\n<td>重写 <code>require</code> 表达式的推断上下文</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/copy-webpack-plugin\"><code>CopyWebpackPlugin</code></a></td>\n<td>将单个文件或整个目录复制到构建目录</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/define-plugin\"><code>DefinePlugin</code></a></td>\n<td>允许在编译时(compile time)配置的全局常量</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/dll-plugin\"><code>DllPlugin</code></a></td>\n<td>为了极大减少构建时间，进行分离打包</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/environment-plugin\"><code>EnvironmentPlugin</code></a></td>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/define-plugin\"><code>DefinePlugin</code></a> 中 <code>process.env</code> 键的简写方式。</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/extract-text-webpack-plugin\"><code>ExtractTextWebpackPlugin</code></a></td>\n<td>从 bundle 中提取文本（CSS）到单独的文件</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/hot-module-replacement-plugin\"><code>HotModuleReplacementPlugin</code></a></td>\n<td>启用模块热替换(Enable Hot Module Replacement - HMR)</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/html-webpack-plugin\"><code>HtmlWebpackPlugin</code></a></td>\n<td>简单创建 HTML 文件，用于服务器访问</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/i18n-webpack-plugin\"><code>I18nWebpackPlugin</code></a></td>\n<td>为 bundle 增加国际化支持</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/ignore-plugin\"><code>IgnorePlugin</code></a></td>\n<td>从 bundle 中排除某些模块</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/limit-chunk-count-plugin\"><code>LimitChunkCountPlugin</code></a></td>\n<td>设置 chunk 的最小/最大限制，以微调和控制 chunk</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/loader-options-plugin\"><code>LoaderOptionsPlugin</code></a></td>\n<td>用于从 webpack 1 迁移到 webpack 2</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/min-chunk-size-plugin\"><code>MinChunkSizePlugin</code></a></td>\n<td>确保 chunk 大小超过指定限制</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/mini-css-extract-plugin\"><code>MiniCssExtractPlugin</code></a></td>\n<td>为每个引入 CSS 的 JS 文件创建一个 CSS 文件</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/configuration/optimization/#optimization-noemitonerrors\"><code>NoEmitOnErrorsPlugin</code></a></td>\n<td>在输出阶段时，遇到编译错误跳过</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/normal-module-replacement-plugin\"><code>NormalModuleReplacementPlugin</code></a></td>\n<td>替换与正则表达式匹配的资源</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/npm-install-webpack-plugin\"><code>NpmInstallWebpackPlugin</code></a></td>\n<td>在开发环境下自动安装缺少的依赖</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/progress-plugin\"><code>ProgressPlugin</code></a></td>\n<td>报告编译进度</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/provide-plugin\"><code>ProvidePlugin</code></a></td>\n<td>不必通过 import/require 使用模块</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/source-map-dev-tool-plugin\"><code>SourceMapDevToolPlugin</code></a></td>\n<td>对 source map 进行更细粒度的控制</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/eval-source-map-dev-tool-plugin\"><code>EvalSourceMapDevToolPlugin</code></a></td>\n<td>对 eval source map 进行更细粒度的控制</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/uglifyjs-webpack-plugin\"><code>UglifyjsWebpackPlugin</code></a></td>\n<td>可以控制项目中 UglifyJS 的版本</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/terser-webpack-plugin\"><code>TerserPlugin</code></a></td>\n<td>允许控制项目中 Terser 的版本</td>\n</tr>\n<tr>\n<td><a href=\"https://v4.webpack.docschina.org/plugins/zopfli-webpack-plugin\"><code>ZopfliWebpackPlugin</code></a></td>\n<td>通过 node-zopfli 将资源预先压缩的版本</td>\n</tr>\n</tbody></table>\n<h3 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a>HtmlWebpackPlugin</h3><p>在打包结束后，⾃动生成⼀个 <code>html</code> ⽂文件，并把打包生成的<code>js</code> 模块引⼊到该 <code>html</code> 中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;html-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"> ...</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">     <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">       <span class=\"attr\">title</span>: <span class=\"string\">&quot;My App&quot;</span>,</span><br><span class=\"line\">       <span class=\"attr\">filename</span>: <span class=\"string\">&quot;app.html&quot;</span>,</span><br><span class=\"line\">       <span class=\"attr\">template</span>: <span class=\"string\">&quot;./src/html/index.html&quot;</span></span><br><span class=\"line\">     &#125;) </span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--./src/html/index.html--&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>&lt;%=htmlWebpackPlugin.options.title%&gt;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>html-webpack-plugin<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>html</code> 模板中，可以通过 <code>&lt;%=htmlWebpackPlugin.options.XXX%&gt;</code> 的方式获取配置的值</p>\n<p>更多的配置可以自寻查找</p>\n<h3 id=\"clean-webpack-plugin\"><a href=\"#clean-webpack-plugin\" class=\"headerlink\" title=\"clean-webpack-plugin\"></a>clean-webpack-plugin</h3><p>删除（清理）构建目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev clean-webpack-plugin</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;CleanWebpackPlugin&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"> ...</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    ...,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mini-css-extract-plugin\"><a href=\"#mini-css-extract-plugin\" class=\"headerlink\" title=\"mini-css-extract-plugin\"></a>mini-css-extract-plugin</h3><p>提取 <code>CSS</code> 到一个单独的文件中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev mini-css-extract-plugin</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MiniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"> ...,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">   <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/</span>,</span><br><span class=\"line\">     use: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">       <span class=\"attr\">loader</span>: MiniCssExtractPlugin.loader</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">          <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;sass-loader&#x27;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   ]</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    ...,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">     <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].css&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DefinePlugin\"><a href=\"#DefinePlugin\" class=\"headerlink\" title=\"DefinePlugin\"></a>DefinePlugin</h3><p>允许在编译时创建配置的全局对象，是一个<code>webpack</code>内置的插件，不需要安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; DefinePlugun &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"> ...</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>:[</span><br><span class=\"line\">        <span class=\"keyword\">new</span> DefinePlugin(&#123;</span><br><span class=\"line\">            <span class=\"attr\">BASE_URL</span>:<span class=\"string\">&#x27;&quot;./&quot;&#x27;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候编译<code>template</code>模块的时候，就能通过下述形式获取全局对象</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;icon&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= BASE_URL%&gt;favicon.ico&gt;&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"copy-webpack-plugin\"><a href=\"#copy-webpack-plugin\" class=\"headerlink\" title=\"copy-webpack-plugin\"></a>copy-webpack-plugin</h3><p>复制文件或目录到执行区域，如<code>vue</code>的打包过程中，如果我们将一些文件放到<code>public</code>的目录下，那么这个目录会被复制到<code>dist</code>文件夹中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install copy-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n<p>1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> CopyWebpackPlugin(&#123;</span><br><span class=\"line\">    <span class=\"attr\">parrerns</span>:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">from</span>:<span class=\"string\">&quot;public&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">globOptions</span>:&#123;</span><br><span class=\"line\">                <span class=\"attr\">ignore</span>:[</span><br><span class=\"line\">                    <span class=\"string\">&#x27;**/index.html&#x27;</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>复制的规则在<code>patterns</code>属性中设置：</p>\n<ul>\n<li>from：设置从哪一个源中开始复制</li>\n<li>to：复制到的位置，可以省略，会默认复制到打包的目录下</li>\n<li>globOptions：设置一些额外的选项，其中可以编写需要忽略的文件</li>\n</ul>\n<h1 id=\"Weback使用小技巧\"><a href=\"#Weback使用小技巧\" class=\"headerlink\" title=\"Weback使用小技巧\"></a>Weback使用小技巧</h1><h4 id=\"批量导入文件：require-context\"><a href=\"#批量导入文件：require-context\" class=\"headerlink\" title=\"批量导入文件：require.context\"></a>批量导入文件：require.context</h4><p>通过执行require.context函数获取一个特定的上下文,主要用来实现自动化导入模块,在前端工程中,如果遇到从一个文件夹引入很多模块的情况,可以使用这个api,它会遍历文件夹中的指定文件,然后自动导入,使得不需要每次显式的调用import导入模块</p>\n<h5 id=\"使用语法\"><a href=\"#使用语法\" class=\"headerlink\" title=\"使用语法\"></a>使用语法</h5><p>Webpack 会在构建中解析代码中的 <code>require.context()</code> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>.context(</span><br><span class=\"line\">  directory,</span><br><span class=\"line\">  (useSubdirectories = <span class=\"literal\">true</span>),</span><br><span class=\"line\">  (regExp = <span class=\"regexp\">/^\\.\\/.*$/</span>),</span><br><span class=\"line\">  (mode = <span class=\"string\">&#x27;sync&#x27;</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>.context(<span class=\"string\">&#x27;./test&#x27;</span>, <span class=\"literal\">false</span>, <span class=\"regexp\">/\\.test\\.js$/</span>);</span><br><span class=\"line\"><span class=\"comment\">//（创建出）一个 context，其中文件来自 test 目录，request 以 `.test.js` 结尾。</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>.context(<span class=\"string\">&#x27;../&#x27;</span>, <span class=\"literal\">true</span>, <span class=\"regexp\">/\\.stories\\.js$/</span>);</span><br><span class=\"line\"><span class=\"comment\">// （创建出）一个 context，其中所有文件都来自父文件夹及其所有子级文件夹，request 以 `.stories.js` 结尾。</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>require.context() 返回的结果是一个函数，该函数包含3个属性</strong></p>\n<ul>\n<li>resolve{Function} : 是一个函数，返回已分析请求的模块id</li>\n<li>keys : 返回上下文模块可以处理的所有可能请求的数组的函数</li>\n<li>id : 是上下文模块的模块id。这可能对module.hot.acce有用</li>\n</ul>\n<p>使用示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue store中 批量拿到module文件夹中的state文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> modulesFiles = <span class=\"built_in\">require</span>.context(<span class=\"string\">&#x27;./modules&#x27;</span>, <span class=\"literal\">true</span>, <span class=\"regexp\">/\\.js$/</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> modules = modulesFiles.keys().reduce(<span class=\"function\">(<span class=\"params\">modules, modulePath</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> moduleName = modulePath.replace(<span class=\"regexp\">/^\\.\\/(.*)\\.\\w+$/</span>, <span class=\"string\">&#x27;$1&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = modulesFiles(modulePath)</span><br><span class=\"line\">  modules[moduleName] = value.default</span><br><span class=\"line\">  <span class=\"keyword\">return</span> modules</span><br><span class=\"line\">&#125;, &#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"常用正则表达式","date":"2019-09-12T06:35:36.000Z","cover":"https://img.showydream.com/img/iZX9MU-picography-food-platters-beach-restaurant-small-768x512.jpg","description":"常用正则表达式","keywords":"正则表达式","_content":"\n\n\n## 基本匹配\n\n正则表达式只是我们用于在文本中检索字母和数字的模式。例如正则表达式 `cat`，表示: 字母 `c` 后面跟着一个字母 `a`，再后面跟着一个字母 `t`。\n\n```\n\"cat\" => The cat sat on the mat\n```\n\n正则表达式 `123` 会匹配字符串 \"123\"。通过将正则表达式中的每个字符逐个与要匹配的字符串中的每个字符进行比较，来完成正则匹配。 正则表达式通常区分大小写，因此正则表达式 `Cat` 与字符串 \"cat\" 不匹配。\n\n```\n\"Cat\" => The cat sat on the Cat\n```\n\n## 元字符\n\n元字符是正则表达式的基本组成元素。元字符在这里跟它通常表达的意思不一样，而是以某种特殊的含义去解释。有些元字符写在方括号内的时候有特殊含义。 元字符如下:\n\n| 元字符 | 描述                                                         |\n| ------ | ------------------------------------------------------------ |\n| .      | 匹配除换行符以外的任意字符。                                 |\n| [ ]    | 字符类，匹配方括号中包含的任意字符。                         |\n| [^ ]   | 否定字符类。匹配方括号中不包含的任意字符                     |\n| *      | 匹配前面的子表达式零次或多次                                 |\n| +      | 匹配前面的子表达式一次或多次                                 |\n| ?      | 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。       |\n| {n,m}  | 花括号，匹配前面字符至少 n 次，但是不超过 m 次。             |\n| (xyz)  | 字符组，按照确切的顺序匹配字符xyz。                          |\n| \\|     | 分支结构，匹配符号之前的字符或后面的字符。                   |\n| \\      | 转义符，它可以还原元字符原来的含义，允许你匹配保留字符 `[ ] ( ) { } . * + ? ^ $ \\ |` |\n| ^      | 匹配行的开始                                                 |\n| $      | 匹配行的结束                                                 |\n\n## 英文句号\n\n英文句号 `.` 是元字符的最简单的例子。元字符 `.` 可以匹配任意单个字符。它不会匹配换行符和新行的字符。例如正则表达式 `.ar`，表示: 任意字符后面跟着一个字母 `a`， 再后面跟着一个字母 `r`。\n\n```\n\".ar\" => The car parked in the garage.\n```\n\n## 字符集\n\n字符集也称为字符类。方括号被用于指定字符集。使用字符集内的连字符来指定字符范围。方括号内的字符范围的顺序并不重要。 例如正则表达式 `[Tt]he`，表示: 大写 `T` 或小写 `t` ，后跟字母 `h`，再后跟字母 `e`。\n\n```\n\"[Tt]he\" => The car parked in the garage.\n```\n\n然而，字符集中的英文句号表示它字面的含义。正则表达式 `ar[.]`，表示小写字母 `a`，后面跟着一个字母 `r`，再后面跟着一个英文句号 `.` 字符。\n\n```\n\"ar[.]\" => A garage is a good place to park a car.\n```\n\n### 否定字符集\n\n一般来说插入字符 `^` 表示一个字符串的开始，但是当它在方括号内出现时，它会取消字符集。例如正则表达式 `[^c]ar`，表示: 除了字母 `c` 以外的任意字符，后面跟着字符 `a`， 再后面跟着一个字母 `r`。\n\n```\n\"[^c]ar\" => The car parked in the garage.\n```\n\n## 重复\n\n以下元字符 `+`，`*` 或 `?` 用于指定子模式可以出现多少次。这些元字符在不同情况下的作用不同。\n\n### 星号\n\n该符号 `*` 表示匹配上一个匹配规则的零次或多次。正则表达式 `a*` 表示小写字母 `a` 可以重复零次或者多次。但是它如果出现在字符集或者字符类之后，它表示整个字符集的重复。 例如正则表达式 `[a-z]*`，表示: 一行中可以包含任意数量的小写字母。\n\n```\n\"[a-z]*\" => The car parked in the garage #21.\n```\n\n该 `*` 符号可以与元符号 `.` 用在一起，用来匹配任意字符串 `.*`。该 `*` 符号可以与空格符 `\\s` 一起使用，用来匹配一串空格字符。 例如正则表达式 `\\s*cat\\s*`，表示: 零个或多个空格，后面跟小写字母 `c`，再后面跟小写字母 `a`，再再后面跟小写字母 `t`，后面再跟零个或多个空格。\n\n```\n\"\\s*cat\\s*\" => The fat cat sat on the cat.\n```\n\n### 加号\n\n该符号 `+` 匹配上一个字符的一次或多次。例如正则表达式 `c.+t`，表示: 一个小写字母 `c`，后跟任意数量的字符，后跟小写字母 `t`。\n\n```\n\"c.+t\" => The fat cat sat on the mat.\n```\n\n### 问号\n\n在正则表达式中，元字符 `?` 用来表示前一个字符是可选的。该符号匹配前一个字符的零次或一次。 例如正则表达式 `[T]?he`，表示: 可选的大写字母 `T`，后面跟小写字母 `h`，后跟小写字母 `e`。\n\n```\n\"[T]he\" => The car is parked in the garage.\n\"[T]?he\" => The car is parked in the garage.\n```\n\n## 花括号\n\n在正则表达式中花括号(也被称为量词 ?)用于指定字符或一组字符可以重复的次数。例如正则表达式 `[0-9]{2,3}`，表示: 匹配至少2位数字但不超过3位(0到9范围内的字符)。\n\n```\n\"[0-9]{2,3}\" => The number was 9.9997 but we rounded it off to 10.0.\n```\n\n我们可以省略第二个数字。例如正则表达式 `[0-9]{2,}`，表示: 匹配2个或更多个数字。如果我们也删除逗号，则正则表达式 `[0-9]{2}`，表示: 匹配正好为2位数的数字。\n\n```\n\"[0-9]{2,}\" => The number was 9.9997 but we rounded it off to 10.0.\n\"[0-9]{2}\" => The number was 9.9997 but we rounded it off to 10.0.\n```\n\n## 字符组\n\n字符组是一组写在圆括号内的子模式 `(...)`。正如我们在正则表达式中讨论的那样，如果我们把一个量词放在一个字符之后，它会重复前一个字符。 但是，如果我们把量词放在一个字符组之后，它会重复整个字符组。 例如正则表达式 `(ab)*` 表示匹配零个或多个的字符串 \"ab\"。我们还可以在字符组中使用元字符 `|`。例如正则表达式 `(c|g|p)ar`，表示: 小写字母 `c`、`g` 或 `p` 后面跟字母 `a`，后跟字母 `r`。\n\n```\n\"(c|g|p)ar\" => The car is parked in the garage.\n```\n\n## 分支结构\n\n在正则表达式中垂直条 `|` 用来定义分支结构，分支结构就像多个表达式之间的条件。现在你可能认为这个字符集和分支机构的工作方式一样。 但是字符集和分支结构巨大的区别是字符集只在字符级别上有作用，然而分支结构在表达式级别上依然可以使用。 例如正则表达式 `(T|t)he|car`，表示: 大写字母 `T` 或小写字母 `t`，后面跟小写字母 `h`，后跟小写字母 `e` 或小写字母 `c`，后跟小写字母 `a`，后跟小写字母 `r`。\n\n```\n\"(T|t)he|car\" => The car is parked in the garage.\n```\n\n## 转义特殊字符\n\n正则表达式中使用反斜杠 `\\` 来转义下一个字符。这将允许你使用保留字符来作为匹配字符 `{ } [ ] / \\ + * . $ ^ | ?`。在特殊字符前面加 `\\`，就可以使用它来做匹配字符。 例如正则表达式 `.` 是用来匹配除了换行符以外的任意字符。现在要在输入字符串中匹配 `.` 字符，正则表达式 `(f|c|m)at\\.?`，表示: 小写字母 `f`、`c` 或者 `m` 后跟小写字母 `a`，后跟小写字母 `t`，后跟可选的 `.` 字符。\n\n```\n\"(f|c|m)at\\.?\" => The fat cat sat on the mat.\n```\n\n## 定位符\n\n在正则表达式中，为了检查匹配符号是否是起始符号或结尾符号，我们使用定位符。 定位符有两种类型: 第一种类型是 `^` 检查匹配字符是否是起始字符，第二种类型是 `$`，它检查匹配字符是否是输入字符串的最后一个字符。\n\n### 插入符号\n\n插入符号 `^` 符号用于检查匹配字符是否是输入字符串的第一个字符。如果我们使用正则表达式 `^a` (如果a是起始符号)匹配字符串 `abc`，它会匹配到 `a`。 但是如果我们使用正则表达式 `^b`，它是匹配不到任何东西的，因为在字符串 `abc` 中 \"b\" 不是起始字符。 让我们来看看另一个正则表达式 `^(T|t)he`，这表示: 大写字母 `T` 或小写字母 `t` 是输入字符串的起始符号，后面跟着小写字母 `h`，后跟小写字母 `e`。\n\n```\n\"(T|t)he\" => The car is parked in the garage.\n\"^(T|t)he\" => The car is parked in the garage.\n```\n\n### 美元符号\n\n美元 `$` 符号用于检查匹配字符是否是输入字符串的最后一个字符。例如正则表达式 `(at\\.)$`，表示: 小写字母 `a`，后跟小写字母 `t`，后跟一个 `.` 字符，且这个匹配器必须是字符串的结尾。\n\n```\n\"(at\\.)\" => The fat cat. sat. on the mat.\n\"(at\\.)$\" => The fat cat sat on the mat.\n```\n\n## 简写字符集\n\n正则表达式为常用的字符集和常用的正则表达式提供了简写。简写字符集如下:\n\n| 简写 | 描述                                     |\n| ---- | ---------------------------------------- |\n| .    | 匹配除换行符以外的任意字符               |\n| \\w   | 匹配所有字母和数字的字符: `[a-zA-Z0-9_]` |\n| \\W   | 匹配非字母和数字的字符: `[^\\w]`          |\n| \\d   | 匹配数字: `[0-9]`                        |\n| \\D   | 匹配非数字: `[^\\d]`                      |\n| \\s   | 匹配空格符: `[\\t\\n\\f\\r\\p{Z}]`            |\n| \\S   | 匹配非空格符: `[^\\s]`                    |\n\n## 断言\n\n后行断言和先行断言有时候被称为断言，它们是特殊类型的 ***非捕获组*** (用于匹配模式，但不包括在匹配列表中)。当我们在一种特定模式之前或者之后有这种模式时，会优先使用断言。 例如我们想获取输入字符串 `$4.44 and $10.88` 中带有前缀 `$` 的所有数字。我们可以使用这个正则表达式 `(?<=\\$)[0-9\\.]*`，表示: 获取包含 `.` 字符且前缀为 `$` 的所有数字。 以下是正则表达式中使用的断言:\n\n| 符号 | 描述         |\n| ---- | ------------ |\n| ?=   | 正向先行断言 |\n| ?!   | 负向先行断言 |\n| ?<=  | 正向后行断言 |\n| ?<!  | 负向后行断言 |\n\n### 正向先行断言\n\n正向先行断言认为第一部分的表达式必须是先行断言表达式。返回的匹配结果仅包含与第一部分表达式匹配的文本。 要在一个括号内定义一个正向先行断言，在括号中问号和等号是这样使用的 `(?=...)`。先行断言表达式写在括号中的等号后面。 例如正则表达式 `(T|t)he(?=\\sfat)`，表示: 匹配大写字母 `T` 或小写字母 `t`，后面跟字母 `h`，后跟字母 `e`。 在括号中，我们定义了正向先行断言，它会引导正则表达式引擎匹配 `The` 或 `the` 后面跟着 `fat`。\n\n```\n\"(T|t)he(?=\\sfat)\" => The fat cat sat on the mat.\n```\n\n### 负向先行断言\n\n当我们需要从输入字符串中获取不匹配表达式的内容时，使用负向先行断言。负向先行断言的定义跟我们定义的正向先行断言一样， 唯一的区别是不是等号 `=`，我们使用否定符号 `!`，例如 `(?!...)`。 我们来看看下面的正则表达式 `(T|t)he(?!\\sfat)`，表示: 从输入字符串中获取全部 `The` 或者 `the` 且不匹配 `fat` 前面加上一个空格字符。\n\n```\n\"(T|t)he(?!\\sfat)\" => The fat cat sat on the mat.\n```\n\n### 正向后行断言\n\n正向后行断言是用于获取在特定模式之前的所有匹配内容。正向后行断言表示为 `(?<=...)`。例如正则表达式 `(?<=(T|t)he\\s)(fat|mat)`，表示: 从输入字符串中获取在单词 `The` 或 `the` 之后的所有 `fat` 和 `mat` 单词。\n\n```\n\"(?<=(T|t)he\\s)(fat|mat)\" => The fat cat sat on the mat.\n```\n\n### 负向后行断言\n\n负向后行断言是用于获取不在特定模式之前的所有匹配的内容。负向后行断言表示为 `(?<!...)`。例如正则表达式 `(?<!(T|t)he\\s)(cat)`，表示: 在输入字符中获取所有不在 `The` 或 `the` 之后的所有单词 `cat`。\n\n```\n\"(?<!(T|t)he\\s)(cat)\" => The cat sat on cat.\n```\n\n## 标记\n\n标记也称为修饰符，因为它会修改正则表达式的输出。这些标志可以以任意顺序或组合使用，并且是正则表达式的一部分。\n\n| 标记 | 描述                                       |\n| ---- | ------------------------------------------ |\n| i    | 不区分大小写: 将匹配设置为不区分大小写。   |\n| g    | 全局搜索: 搜索整个输入字符串中的所有匹配。 |\n| m    | 多行匹配: 会匹配输入字符串每一行。         |\n\n### 不区分大小写\n\n`i` 修饰符用于执行不区分大小写匹配。例如正则表达式 `/The/gi`，表示: 大写字母 `T`，后跟小写字母 `h`，后跟字母 `e`。 但是在正则匹配结束时 `i` 标记会告诉正则表达式引擎忽略这种情况。正如你所看到的，我们还使用了 `g` 标记，因为我们要在整个输入字符串中搜索匹配。\n\n```\n\"The\" => The fat cat sat on the mat.\n\"/The/gi\" => The fat cat sat on the mat.\n```\n\n### 全局搜索\n\n`g` 修饰符用于执行全局匹配 (会查找所有匹配，不会在查找到第一个匹配时就停止)。 例如正则表达式 `/.(at)/g`，表示: 除换行符之外的任意字符，后跟小写字母 `a`，后跟小写字母 `t`。 因为我们在正则表达式的末尾使用了 `g` 标记，它会从整个输入字符串中找到每个匹配项。\n\n```\n\".(at)\" => The fat cat sat on the mat.\n\"/.(at)/g\" => The fat cat sat on the mat.\n```\n\n### 多行匹配\n\n`m` 修饰符被用来执行多行的匹配。正如我们前面讨论过的 `(^, $)`，使用定位符来检查匹配字符是输入字符串开始或者结束。但是我们希望每一行都使用定位符，所以我们就使用 `m` 修饰符。 例如正则表达式 `/at(.)?$/gm`，表示: 小写字母 `a`，后跟小写字母 `t`，匹配除了换行符以外任意字符零次或一次。而且因为 `m` 标记，现在正则表达式引擎匹配字符串中每一行的末尾。\n\n```\n\"/.at(.)?$/\" => The fat\n                cat sat\n                on the mat.\n\"/.at(.)?$/gm\" => The fat\n                  cat sat\n                  on the mat.\n```\n\n## 常用正则表达式\n\n### 手机号\n\n#### 匹配所有\n\n```\n^(?:\\+?86)?1(?:3\\d{3}|5[^4\\D]\\d{2}|8\\d{3}|7(?:[35678]\\d{2}|4(?:0\\d|1[0-2]|9\\d))|9[189]\\d{2}|66\\d{2})\\d{6}$\n```\n\n#### 匹配中国移动\n\n```\n^(?:\\+?86)?1(?:3(?:4[^9\\D]|[5-9]\\d)|5[^3-6\\D]\\d|8[23478]\\d|(?:78|98)\\d)\\d{7}$\n```\n\n#### 匹配中国联通\n\n```\n^(?:\\+?86)?1(?:3[0-2]|[578][56]|66)\\d{8}$\n```\n\n#### 匹配中国电信\n\n```\n^(?:\\+?86)?1(?:3(?:3\\d|49)\\d|53\\d{2}|8[019]\\d{2}|7(?:[37]\\d{2}|40[0-5])|9[19]\\d{2})\\d{6}$\n```\n\n#### 手机号码中间四位用*代替\n\n```\nfunction encryptPhone(val){\n    if(!val) return;\n    return val.replace(/^(\\d{3})(\\d{4})(\\d+)/, '$1****$3')\n}\n\nencryptPhone('13173786224'); // 131****6224\n```\n\n### 数字\n\n#### 验证是不是数字\n\n```\n^[0-9]*$\n```\n\n#### 验证n位的数字\n\n```\n^\\d{n}$\n```\n\n#### 正整数\n\n```\n^[0-9]*[1-9][0-9]*$\n```\n\n#### 正浮点数\n\n```\n^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$\n```\n\n#### 负整数\n\n```\n^-[0-9]*[1-9][0-9]*$\n```\n\n#### 负浮点数\n\n```\n^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$\n```\n\n#### 浮点数\n\n```\n^(-?\\d+)(\\.\\d+)?$\n```\n\n#### 大于等于0, 小于等于150, 支持小数位出现5, 如145.5, 用于判断考卷分数\n\n```\n^150$|^(?:\\d|[1-9]\\d|1[0-4]\\d)(?:.5)?$\n```\n\n### 字符串\n\n#### 纯中文/汉字\n\n```\n^(?:[\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uFA0E\\uFA0F\\uFA11\\uFA13\\uFA14\\uFA1F\\uFA21\\uFA23\\uFA24\\uFA27-\\uFA29]|[\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0])+$\n```\n\n#### 纯英文字母\n\n```\n^[a-zA-Z]+$\n```\n\n#### 密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符\n\n```\n^.*(?=.{6,})(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*? ]).*$\n```\n\n#### 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线组合\n\n```\n^[a-zA-Z][a-zA-Z0-9_]{4,15}$\n```\n\n#### 是否由数字和字母组成\n\n```\n^[A-Za-z0-9]+$\n```\n\n#### 去除字符串中空格\n\n```\nstr.replace(/\\s/g,'')\n```\n\n### 电子邮件\n\n```\n^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4})*$\n```\n\n### 身份证\n\n#### 身份证号, 支持1/2代(15位/18位数字)\n\n```\n(^\\d{8}(0\\d|10|11|12)([0-2]\\d|30|31)\\d{3}$)|(^\\d{6}(18|19|20)\\d{2}(0\\d|10|11|12)([0-2]\\d|30|31)\\d{3}(\\d|X|x)$)\n```\n\n\n\n#### 一代身份证号(15位数字)\n\n```\n^\\d{8}(0\\d|10|11|12)([0-2]\\d|30|31)\\d{3}$\n```\n\n#### 二代身份证号(18位数字),最后一位是校验位,可能为数字或字符X\n\n```\n^\\d{6}(18|19|20)\\d{2}(0\\d|10|11|12)([0-2]\\d|30|31)\\d{3}(\\d|X|x)$\n```\n\n\n\n","source":"_posts/常用正则表达式.md","raw":"---\ntitle: 常用正则表达式\ndate: 2019-09-12 14:35:36\ncover: https://img.showydream.com/img/iZX9MU-picography-food-platters-beach-restaurant-small-768x512.jpg\ndescription: 常用正则表达式\ntags: 正则表达式\nkeywords: 正则表达式\ncategories: \n  - 正则表达式\n---\n\n\n\n## 基本匹配\n\n正则表达式只是我们用于在文本中检索字母和数字的模式。例如正则表达式 `cat`，表示: 字母 `c` 后面跟着一个字母 `a`，再后面跟着一个字母 `t`。\n\n```\n\"cat\" => The cat sat on the mat\n```\n\n正则表达式 `123` 会匹配字符串 \"123\"。通过将正则表达式中的每个字符逐个与要匹配的字符串中的每个字符进行比较，来完成正则匹配。 正则表达式通常区分大小写，因此正则表达式 `Cat` 与字符串 \"cat\" 不匹配。\n\n```\n\"Cat\" => The cat sat on the Cat\n```\n\n## 元字符\n\n元字符是正则表达式的基本组成元素。元字符在这里跟它通常表达的意思不一样，而是以某种特殊的含义去解释。有些元字符写在方括号内的时候有特殊含义。 元字符如下:\n\n| 元字符 | 描述                                                         |\n| ------ | ------------------------------------------------------------ |\n| .      | 匹配除换行符以外的任意字符。                                 |\n| [ ]    | 字符类，匹配方括号中包含的任意字符。                         |\n| [^ ]   | 否定字符类。匹配方括号中不包含的任意字符                     |\n| *      | 匹配前面的子表达式零次或多次                                 |\n| +      | 匹配前面的子表达式一次或多次                                 |\n| ?      | 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。       |\n| {n,m}  | 花括号，匹配前面字符至少 n 次，但是不超过 m 次。             |\n| (xyz)  | 字符组，按照确切的顺序匹配字符xyz。                          |\n| \\|     | 分支结构，匹配符号之前的字符或后面的字符。                   |\n| \\      | 转义符，它可以还原元字符原来的含义，允许你匹配保留字符 `[ ] ( ) { } . * + ? ^ $ \\ |` |\n| ^      | 匹配行的开始                                                 |\n| $      | 匹配行的结束                                                 |\n\n## 英文句号\n\n英文句号 `.` 是元字符的最简单的例子。元字符 `.` 可以匹配任意单个字符。它不会匹配换行符和新行的字符。例如正则表达式 `.ar`，表示: 任意字符后面跟着一个字母 `a`， 再后面跟着一个字母 `r`。\n\n```\n\".ar\" => The car parked in the garage.\n```\n\n## 字符集\n\n字符集也称为字符类。方括号被用于指定字符集。使用字符集内的连字符来指定字符范围。方括号内的字符范围的顺序并不重要。 例如正则表达式 `[Tt]he`，表示: 大写 `T` 或小写 `t` ，后跟字母 `h`，再后跟字母 `e`。\n\n```\n\"[Tt]he\" => The car parked in the garage.\n```\n\n然而，字符集中的英文句号表示它字面的含义。正则表达式 `ar[.]`，表示小写字母 `a`，后面跟着一个字母 `r`，再后面跟着一个英文句号 `.` 字符。\n\n```\n\"ar[.]\" => A garage is a good place to park a car.\n```\n\n### 否定字符集\n\n一般来说插入字符 `^` 表示一个字符串的开始，但是当它在方括号内出现时，它会取消字符集。例如正则表达式 `[^c]ar`，表示: 除了字母 `c` 以外的任意字符，后面跟着字符 `a`， 再后面跟着一个字母 `r`。\n\n```\n\"[^c]ar\" => The car parked in the garage.\n```\n\n## 重复\n\n以下元字符 `+`，`*` 或 `?` 用于指定子模式可以出现多少次。这些元字符在不同情况下的作用不同。\n\n### 星号\n\n该符号 `*` 表示匹配上一个匹配规则的零次或多次。正则表达式 `a*` 表示小写字母 `a` 可以重复零次或者多次。但是它如果出现在字符集或者字符类之后，它表示整个字符集的重复。 例如正则表达式 `[a-z]*`，表示: 一行中可以包含任意数量的小写字母。\n\n```\n\"[a-z]*\" => The car parked in the garage #21.\n```\n\n该 `*` 符号可以与元符号 `.` 用在一起，用来匹配任意字符串 `.*`。该 `*` 符号可以与空格符 `\\s` 一起使用，用来匹配一串空格字符。 例如正则表达式 `\\s*cat\\s*`，表示: 零个或多个空格，后面跟小写字母 `c`，再后面跟小写字母 `a`，再再后面跟小写字母 `t`，后面再跟零个或多个空格。\n\n```\n\"\\s*cat\\s*\" => The fat cat sat on the cat.\n```\n\n### 加号\n\n该符号 `+` 匹配上一个字符的一次或多次。例如正则表达式 `c.+t`，表示: 一个小写字母 `c`，后跟任意数量的字符，后跟小写字母 `t`。\n\n```\n\"c.+t\" => The fat cat sat on the mat.\n```\n\n### 问号\n\n在正则表达式中，元字符 `?` 用来表示前一个字符是可选的。该符号匹配前一个字符的零次或一次。 例如正则表达式 `[T]?he`，表示: 可选的大写字母 `T`，后面跟小写字母 `h`，后跟小写字母 `e`。\n\n```\n\"[T]he\" => The car is parked in the garage.\n\"[T]?he\" => The car is parked in the garage.\n```\n\n## 花括号\n\n在正则表达式中花括号(也被称为量词 ?)用于指定字符或一组字符可以重复的次数。例如正则表达式 `[0-9]{2,3}`，表示: 匹配至少2位数字但不超过3位(0到9范围内的字符)。\n\n```\n\"[0-9]{2,3}\" => The number was 9.9997 but we rounded it off to 10.0.\n```\n\n我们可以省略第二个数字。例如正则表达式 `[0-9]{2,}`，表示: 匹配2个或更多个数字。如果我们也删除逗号，则正则表达式 `[0-9]{2}`，表示: 匹配正好为2位数的数字。\n\n```\n\"[0-9]{2,}\" => The number was 9.9997 but we rounded it off to 10.0.\n\"[0-9]{2}\" => The number was 9.9997 but we rounded it off to 10.0.\n```\n\n## 字符组\n\n字符组是一组写在圆括号内的子模式 `(...)`。正如我们在正则表达式中讨论的那样，如果我们把一个量词放在一个字符之后，它会重复前一个字符。 但是，如果我们把量词放在一个字符组之后，它会重复整个字符组。 例如正则表达式 `(ab)*` 表示匹配零个或多个的字符串 \"ab\"。我们还可以在字符组中使用元字符 `|`。例如正则表达式 `(c|g|p)ar`，表示: 小写字母 `c`、`g` 或 `p` 后面跟字母 `a`，后跟字母 `r`。\n\n```\n\"(c|g|p)ar\" => The car is parked in the garage.\n```\n\n## 分支结构\n\n在正则表达式中垂直条 `|` 用来定义分支结构，分支结构就像多个表达式之间的条件。现在你可能认为这个字符集和分支机构的工作方式一样。 但是字符集和分支结构巨大的区别是字符集只在字符级别上有作用，然而分支结构在表达式级别上依然可以使用。 例如正则表达式 `(T|t)he|car`，表示: 大写字母 `T` 或小写字母 `t`，后面跟小写字母 `h`，后跟小写字母 `e` 或小写字母 `c`，后跟小写字母 `a`，后跟小写字母 `r`。\n\n```\n\"(T|t)he|car\" => The car is parked in the garage.\n```\n\n## 转义特殊字符\n\n正则表达式中使用反斜杠 `\\` 来转义下一个字符。这将允许你使用保留字符来作为匹配字符 `{ } [ ] / \\ + * . $ ^ | ?`。在特殊字符前面加 `\\`，就可以使用它来做匹配字符。 例如正则表达式 `.` 是用来匹配除了换行符以外的任意字符。现在要在输入字符串中匹配 `.` 字符，正则表达式 `(f|c|m)at\\.?`，表示: 小写字母 `f`、`c` 或者 `m` 后跟小写字母 `a`，后跟小写字母 `t`，后跟可选的 `.` 字符。\n\n```\n\"(f|c|m)at\\.?\" => The fat cat sat on the mat.\n```\n\n## 定位符\n\n在正则表达式中，为了检查匹配符号是否是起始符号或结尾符号，我们使用定位符。 定位符有两种类型: 第一种类型是 `^` 检查匹配字符是否是起始字符，第二种类型是 `$`，它检查匹配字符是否是输入字符串的最后一个字符。\n\n### 插入符号\n\n插入符号 `^` 符号用于检查匹配字符是否是输入字符串的第一个字符。如果我们使用正则表达式 `^a` (如果a是起始符号)匹配字符串 `abc`，它会匹配到 `a`。 但是如果我们使用正则表达式 `^b`，它是匹配不到任何东西的，因为在字符串 `abc` 中 \"b\" 不是起始字符。 让我们来看看另一个正则表达式 `^(T|t)he`，这表示: 大写字母 `T` 或小写字母 `t` 是输入字符串的起始符号，后面跟着小写字母 `h`，后跟小写字母 `e`。\n\n```\n\"(T|t)he\" => The car is parked in the garage.\n\"^(T|t)he\" => The car is parked in the garage.\n```\n\n### 美元符号\n\n美元 `$` 符号用于检查匹配字符是否是输入字符串的最后一个字符。例如正则表达式 `(at\\.)$`，表示: 小写字母 `a`，后跟小写字母 `t`，后跟一个 `.` 字符，且这个匹配器必须是字符串的结尾。\n\n```\n\"(at\\.)\" => The fat cat. sat. on the mat.\n\"(at\\.)$\" => The fat cat sat on the mat.\n```\n\n## 简写字符集\n\n正则表达式为常用的字符集和常用的正则表达式提供了简写。简写字符集如下:\n\n| 简写 | 描述                                     |\n| ---- | ---------------------------------------- |\n| .    | 匹配除换行符以外的任意字符               |\n| \\w   | 匹配所有字母和数字的字符: `[a-zA-Z0-9_]` |\n| \\W   | 匹配非字母和数字的字符: `[^\\w]`          |\n| \\d   | 匹配数字: `[0-9]`                        |\n| \\D   | 匹配非数字: `[^\\d]`                      |\n| \\s   | 匹配空格符: `[\\t\\n\\f\\r\\p{Z}]`            |\n| \\S   | 匹配非空格符: `[^\\s]`                    |\n\n## 断言\n\n后行断言和先行断言有时候被称为断言，它们是特殊类型的 ***非捕获组*** (用于匹配模式，但不包括在匹配列表中)。当我们在一种特定模式之前或者之后有这种模式时，会优先使用断言。 例如我们想获取输入字符串 `$4.44 and $10.88` 中带有前缀 `$` 的所有数字。我们可以使用这个正则表达式 `(?<=\\$)[0-9\\.]*`，表示: 获取包含 `.` 字符且前缀为 `$` 的所有数字。 以下是正则表达式中使用的断言:\n\n| 符号 | 描述         |\n| ---- | ------------ |\n| ?=   | 正向先行断言 |\n| ?!   | 负向先行断言 |\n| ?<=  | 正向后行断言 |\n| ?<!  | 负向后行断言 |\n\n### 正向先行断言\n\n正向先行断言认为第一部分的表达式必须是先行断言表达式。返回的匹配结果仅包含与第一部分表达式匹配的文本。 要在一个括号内定义一个正向先行断言，在括号中问号和等号是这样使用的 `(?=...)`。先行断言表达式写在括号中的等号后面。 例如正则表达式 `(T|t)he(?=\\sfat)`，表示: 匹配大写字母 `T` 或小写字母 `t`，后面跟字母 `h`，后跟字母 `e`。 在括号中，我们定义了正向先行断言，它会引导正则表达式引擎匹配 `The` 或 `the` 后面跟着 `fat`。\n\n```\n\"(T|t)he(?=\\sfat)\" => The fat cat sat on the mat.\n```\n\n### 负向先行断言\n\n当我们需要从输入字符串中获取不匹配表达式的内容时，使用负向先行断言。负向先行断言的定义跟我们定义的正向先行断言一样， 唯一的区别是不是等号 `=`，我们使用否定符号 `!`，例如 `(?!...)`。 我们来看看下面的正则表达式 `(T|t)he(?!\\sfat)`，表示: 从输入字符串中获取全部 `The` 或者 `the` 且不匹配 `fat` 前面加上一个空格字符。\n\n```\n\"(T|t)he(?!\\sfat)\" => The fat cat sat on the mat.\n```\n\n### 正向后行断言\n\n正向后行断言是用于获取在特定模式之前的所有匹配内容。正向后行断言表示为 `(?<=...)`。例如正则表达式 `(?<=(T|t)he\\s)(fat|mat)`，表示: 从输入字符串中获取在单词 `The` 或 `the` 之后的所有 `fat` 和 `mat` 单词。\n\n```\n\"(?<=(T|t)he\\s)(fat|mat)\" => The fat cat sat on the mat.\n```\n\n### 负向后行断言\n\n负向后行断言是用于获取不在特定模式之前的所有匹配的内容。负向后行断言表示为 `(?<!...)`。例如正则表达式 `(?<!(T|t)he\\s)(cat)`，表示: 在输入字符中获取所有不在 `The` 或 `the` 之后的所有单词 `cat`。\n\n```\n\"(?<!(T|t)he\\s)(cat)\" => The cat sat on cat.\n```\n\n## 标记\n\n标记也称为修饰符，因为它会修改正则表达式的输出。这些标志可以以任意顺序或组合使用，并且是正则表达式的一部分。\n\n| 标记 | 描述                                       |\n| ---- | ------------------------------------------ |\n| i    | 不区分大小写: 将匹配设置为不区分大小写。   |\n| g    | 全局搜索: 搜索整个输入字符串中的所有匹配。 |\n| m    | 多行匹配: 会匹配输入字符串每一行。         |\n\n### 不区分大小写\n\n`i` 修饰符用于执行不区分大小写匹配。例如正则表达式 `/The/gi`，表示: 大写字母 `T`，后跟小写字母 `h`，后跟字母 `e`。 但是在正则匹配结束时 `i` 标记会告诉正则表达式引擎忽略这种情况。正如你所看到的，我们还使用了 `g` 标记，因为我们要在整个输入字符串中搜索匹配。\n\n```\n\"The\" => The fat cat sat on the mat.\n\"/The/gi\" => The fat cat sat on the mat.\n```\n\n### 全局搜索\n\n`g` 修饰符用于执行全局匹配 (会查找所有匹配，不会在查找到第一个匹配时就停止)。 例如正则表达式 `/.(at)/g`，表示: 除换行符之外的任意字符，后跟小写字母 `a`，后跟小写字母 `t`。 因为我们在正则表达式的末尾使用了 `g` 标记，它会从整个输入字符串中找到每个匹配项。\n\n```\n\".(at)\" => The fat cat sat on the mat.\n\"/.(at)/g\" => The fat cat sat on the mat.\n```\n\n### 多行匹配\n\n`m` 修饰符被用来执行多行的匹配。正如我们前面讨论过的 `(^, $)`，使用定位符来检查匹配字符是输入字符串开始或者结束。但是我们希望每一行都使用定位符，所以我们就使用 `m` 修饰符。 例如正则表达式 `/at(.)?$/gm`，表示: 小写字母 `a`，后跟小写字母 `t`，匹配除了换行符以外任意字符零次或一次。而且因为 `m` 标记，现在正则表达式引擎匹配字符串中每一行的末尾。\n\n```\n\"/.at(.)?$/\" => The fat\n                cat sat\n                on the mat.\n\"/.at(.)?$/gm\" => The fat\n                  cat sat\n                  on the mat.\n```\n\n## 常用正则表达式\n\n### 手机号\n\n#### 匹配所有\n\n```\n^(?:\\+?86)?1(?:3\\d{3}|5[^4\\D]\\d{2}|8\\d{3}|7(?:[35678]\\d{2}|4(?:0\\d|1[0-2]|9\\d))|9[189]\\d{2}|66\\d{2})\\d{6}$\n```\n\n#### 匹配中国移动\n\n```\n^(?:\\+?86)?1(?:3(?:4[^9\\D]|[5-9]\\d)|5[^3-6\\D]\\d|8[23478]\\d|(?:78|98)\\d)\\d{7}$\n```\n\n#### 匹配中国联通\n\n```\n^(?:\\+?86)?1(?:3[0-2]|[578][56]|66)\\d{8}$\n```\n\n#### 匹配中国电信\n\n```\n^(?:\\+?86)?1(?:3(?:3\\d|49)\\d|53\\d{2}|8[019]\\d{2}|7(?:[37]\\d{2}|40[0-5])|9[19]\\d{2})\\d{6}$\n```\n\n#### 手机号码中间四位用*代替\n\n```\nfunction encryptPhone(val){\n    if(!val) return;\n    return val.replace(/^(\\d{3})(\\d{4})(\\d+)/, '$1****$3')\n}\n\nencryptPhone('13173786224'); // 131****6224\n```\n\n### 数字\n\n#### 验证是不是数字\n\n```\n^[0-9]*$\n```\n\n#### 验证n位的数字\n\n```\n^\\d{n}$\n```\n\n#### 正整数\n\n```\n^[0-9]*[1-9][0-9]*$\n```\n\n#### 正浮点数\n\n```\n^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$\n```\n\n#### 负整数\n\n```\n^-[0-9]*[1-9][0-9]*$\n```\n\n#### 负浮点数\n\n```\n^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$\n```\n\n#### 浮点数\n\n```\n^(-?\\d+)(\\.\\d+)?$\n```\n\n#### 大于等于0, 小于等于150, 支持小数位出现5, 如145.5, 用于判断考卷分数\n\n```\n^150$|^(?:\\d|[1-9]\\d|1[0-4]\\d)(?:.5)?$\n```\n\n### 字符串\n\n#### 纯中文/汉字\n\n```\n^(?:[\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uFA0E\\uFA0F\\uFA11\\uFA13\\uFA14\\uFA1F\\uFA21\\uFA23\\uFA24\\uFA27-\\uFA29]|[\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0])+$\n```\n\n#### 纯英文字母\n\n```\n^[a-zA-Z]+$\n```\n\n#### 密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符\n\n```\n^.*(?=.{6,})(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*? ]).*$\n```\n\n#### 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线组合\n\n```\n^[a-zA-Z][a-zA-Z0-9_]{4,15}$\n```\n\n#### 是否由数字和字母组成\n\n```\n^[A-Za-z0-9]+$\n```\n\n#### 去除字符串中空格\n\n```\nstr.replace(/\\s/g,'')\n```\n\n### 电子邮件\n\n```\n^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4})*$\n```\n\n### 身份证\n\n#### 身份证号, 支持1/2代(15位/18位数字)\n\n```\n(^\\d{8}(0\\d|10|11|12)([0-2]\\d|30|31)\\d{3}$)|(^\\d{6}(18|19|20)\\d{2}(0\\d|10|11|12)([0-2]\\d|30|31)\\d{3}(\\d|X|x)$)\n```\n\n\n\n#### 一代身份证号(15位数字)\n\n```\n^\\d{8}(0\\d|10|11|12)([0-2]\\d|30|31)\\d{3}$\n```\n\n#### 二代身份证号(18位数字),最后一位是校验位,可能为数字或字符X\n\n```\n^\\d{6}(18|19|20)\\d{2}(0\\d|10|11|12)([0-2]\\d|30|31)\\d{3}(\\d|X|x)$\n```\n\n\n\n","slug":"常用正则表达式","published":1,"updated":"2021-11-08T04:41:48.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvqb62dn002nrifydb033qhx","content":"<h2 id=\"基本匹配\"><a href=\"#基本匹配\" class=\"headerlink\" title=\"基本匹配\"></a>基本匹配</h2><p>正则表达式只是我们用于在文本中检索字母和数字的模式。例如正则表达式 <code>cat</code>，表示: 字母 <code>c</code> 后面跟着一个字母 <code>a</code>，再后面跟着一个字母 <code>t</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;cat&quot; =&gt; The cat sat on the mat</span><br></pre></td></tr></table></figure>\n\n<p>正则表达式 <code>123</code> 会匹配字符串 “123”。通过将正则表达式中的每个字符逐个与要匹配的字符串中的每个字符进行比较，来完成正则匹配。 正则表达式通常区分大小写，因此正则表达式 <code>Cat</code> 与字符串 “cat” 不匹配。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;Cat&quot; =&gt; The cat sat on the Cat</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><p>元字符是正则表达式的基本组成元素。元字符在这里跟它通常表达的意思不一样，而是以某种特殊的含义去解释。有些元字符写在方括号内的时候有特殊含义。 元字符如下:</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.</td>\n<td>匹配除换行符以外的任意字符。</td>\n</tr>\n<tr>\n<td>[ ]</td>\n<td>字符类，匹配方括号中包含的任意字符。</td>\n</tr>\n<tr>\n<td>[^ ]</td>\n<td>否定字符类。匹配方括号中不包含的任意字符</td>\n</tr>\n<tr>\n<td>*</td>\n<td>匹配前面的子表达式零次或多次</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配前面的子表达式一次或多次</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>花括号，匹配前面字符至少 n 次，但是不超过 m 次。</td>\n</tr>\n<tr>\n<td>(xyz)</td>\n<td>字符组，按照确切的顺序匹配字符xyz。</td>\n</tr>\n<tr>\n<td>|</td>\n<td>分支结构，匹配符号之前的字符或后面的字符。</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>转义符，它可以还原元字符原来的含义，允许你匹配保留字符 `[ ] ( ) { } . * + ? ^ $ \\</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配行的开始</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配行的结束</td>\n</tr>\n</tbody></table>\n<h2 id=\"英文句号\"><a href=\"#英文句号\" class=\"headerlink\" title=\"英文句号\"></a>英文句号</h2><p>英文句号 <code>.</code> 是元字符的最简单的例子。元字符 <code>.</code> 可以匹配任意单个字符。它不会匹配换行符和新行的字符。例如正则表达式 <code>.ar</code>，表示: 任意字符后面跟着一个字母 <code>a</code>， 再后面跟着一个字母 <code>r</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;.ar&quot; =&gt; The car parked in the garage.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h2><p>字符集也称为字符类。方括号被用于指定字符集。使用字符集内的连字符来指定字符范围。方括号内的字符范围的顺序并不重要。 例如正则表达式 <code>[Tt]he</code>，表示: 大写 <code>T</code> 或小写 <code>t</code> ，后跟字母 <code>h</code>，再后跟字母 <code>e</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;[Tt]he&quot; =&gt; The car parked in the garage.</span><br></pre></td></tr></table></figure>\n\n<p>然而，字符集中的英文句号表示它字面的含义。正则表达式 <code>ar[.]</code>，表示小写字母 <code>a</code>，后面跟着一个字母 <code>r</code>，再后面跟着一个英文句号 <code>.</code> 字符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;ar[.]&quot; =&gt; A garage is a good place to park a car.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"否定字符集\"><a href=\"#否定字符集\" class=\"headerlink\" title=\"否定字符集\"></a>否定字符集</h3><p>一般来说插入字符 <code>^</code> 表示一个字符串的开始，但是当它在方括号内出现时，它会取消字符集。例如正则表达式 <code>[^c]ar</code>，表示: 除了字母 <code>c</code> 以外的任意字符，后面跟着字符 <code>a</code>， 再后面跟着一个字母 <code>r</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;[^c]ar&quot; =&gt; The car parked in the garage.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重复\"><a href=\"#重复\" class=\"headerlink\" title=\"重复\"></a>重复</h2><p>以下元字符 <code>+</code>，<code>*</code> 或 <code>?</code> 用于指定子模式可以出现多少次。这些元字符在不同情况下的作用不同。</p>\n<h3 id=\"星号\"><a href=\"#星号\" class=\"headerlink\" title=\"星号\"></a>星号</h3><p>该符号 <code>*</code> 表示匹配上一个匹配规则的零次或多次。正则表达式 <code>a*</code> 表示小写字母 <code>a</code> 可以重复零次或者多次。但是它如果出现在字符集或者字符类之后，它表示整个字符集的重复。 例如正则表达式 <code>[a-z]*</code>，表示: 一行中可以包含任意数量的小写字母。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;[a-z]*&quot; =&gt; The car parked in the garage #21.</span><br></pre></td></tr></table></figure>\n\n<p>该 <code>*</code> 符号可以与元符号 <code>.</code> 用在一起，用来匹配任意字符串 <code>.*</code>。该 <code>*</code> 符号可以与空格符 <code>\\s</code> 一起使用，用来匹配一串空格字符。 例如正则表达式 <code>\\s*cat\\s*</code>，表示: 零个或多个空格，后面跟小写字母 <code>c</code>，再后面跟小写字母 <code>a</code>，再再后面跟小写字母 <code>t</code>，后面再跟零个或多个空格。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;\\s*cat\\s*&quot; =&gt; The fat cat sat on the cat.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加号\"><a href=\"#加号\" class=\"headerlink\" title=\"加号\"></a>加号</h3><p>该符号 <code>+</code> 匹配上一个字符的一次或多次。例如正则表达式 <code>c.+t</code>，表示: 一个小写字母 <code>c</code>，后跟任意数量的字符，后跟小写字母 <code>t</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;c.+t&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问号\"><a href=\"#问号\" class=\"headerlink\" title=\"问号\"></a>问号</h3><p>在正则表达式中，元字符 <code>?</code> 用来表示前一个字符是可选的。该符号匹配前一个字符的零次或一次。 例如正则表达式 <code>[T]?he</code>，表示: 可选的大写字母 <code>T</code>，后面跟小写字母 <code>h</code>，后跟小写字母 <code>e</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;[T]he&quot; =&gt; The car is parked in the garage.</span><br><span class=\"line\">&quot;[T]?he&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"花括号\"><a href=\"#花括号\" class=\"headerlink\" title=\"花括号\"></a>花括号</h2><p>在正则表达式中花括号(也被称为量词 ?)用于指定字符或一组字符可以重复的次数。例如正则表达式 <code>[0-9]&#123;2,3&#125;</code>，表示: 匹配至少2位数字但不超过3位(0到9范围内的字符)。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;[0-9]&#123;2,3&#125;&quot; =&gt; The number was 9.9997 but we rounded it off to 10.0.</span><br></pre></td></tr></table></figure>\n\n<p>我们可以省略第二个数字。例如正则表达式 <code>[0-9]&#123;2,&#125;</code>，表示: 匹配2个或更多个数字。如果我们也删除逗号，则正则表达式 <code>[0-9]&#123;2&#125;</code>，表示: 匹配正好为2位数的数字。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;[0-9]&#123;2,&#125;&quot; =&gt; The number was 9.9997 but we rounded it off to 10.0.</span><br><span class=\"line\">&quot;[0-9]&#123;2&#125;&quot; =&gt; The number was 9.9997 but we rounded it off to 10.0.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符组\"><a href=\"#字符组\" class=\"headerlink\" title=\"字符组\"></a>字符组</h2><p>字符组是一组写在圆括号内的子模式 <code>(...)</code>。正如我们在正则表达式中讨论的那样，如果我们把一个量词放在一个字符之后，它会重复前一个字符。 但是，如果我们把量词放在一个字符组之后，它会重复整个字符组。 例如正则表达式 <code>(ab)*</code> 表示匹配零个或多个的字符串 “ab”。我们还可以在字符组中使用元字符 <code>|</code>。例如正则表达式 <code>(c|g|p)ar</code>，表示: 小写字母 <code>c</code>、<code>g</code> 或 <code>p</code> 后面跟字母 <code>a</code>，后跟字母 <code>r</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;(c|g|p)ar&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分支结构\"><a href=\"#分支结构\" class=\"headerlink\" title=\"分支结构\"></a>分支结构</h2><p>在正则表达式中垂直条 <code>|</code> 用来定义分支结构，分支结构就像多个表达式之间的条件。现在你可能认为这个字符集和分支机构的工作方式一样。 但是字符集和分支结构巨大的区别是字符集只在字符级别上有作用，然而分支结构在表达式级别上依然可以使用。 例如正则表达式 <code>(T|t)he|car</code>，表示: 大写字母 <code>T</code> 或小写字母 <code>t</code>，后面跟小写字母 <code>h</code>，后跟小写字母 <code>e</code> 或小写字母 <code>c</code>，后跟小写字母 <code>a</code>，后跟小写字母 <code>r</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;(T|t)he|car&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"转义特殊字符\"><a href=\"#转义特殊字符\" class=\"headerlink\" title=\"转义特殊字符\"></a>转义特殊字符</h2><p>正则表达式中使用反斜杠 <code>\\</code> 来转义下一个字符。这将允许你使用保留字符来作为匹配字符 <code>&#123; &#125; [ ] / \\ + * . $ ^ | ?</code>。在特殊字符前面加 <code>\\</code>，就可以使用它来做匹配字符。 例如正则表达式 <code>.</code> 是用来匹配除了换行符以外的任意字符。现在要在输入字符串中匹配 <code>.</code> 字符，正则表达式 <code>(f|c|m)at\\.?</code>，表示: 小写字母 <code>f</code>、<code>c</code> 或者 <code>m</code> 后跟小写字母 <code>a</code>，后跟小写字母 <code>t</code>，后跟可选的 <code>.</code> 字符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;(f|c|m)at\\.?&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定位符\"><a href=\"#定位符\" class=\"headerlink\" title=\"定位符\"></a>定位符</h2><p>在正则表达式中，为了检查匹配符号是否是起始符号或结尾符号，我们使用定位符。 定位符有两种类型: 第一种类型是 <code>^</code> 检查匹配字符是否是起始字符，第二种类型是 <code>$</code>，它检查匹配字符是否是输入字符串的最后一个字符。</p>\n<h3 id=\"插入符号\"><a href=\"#插入符号\" class=\"headerlink\" title=\"插入符号\"></a>插入符号</h3><p>插入符号 <code>^</code> 符号用于检查匹配字符是否是输入字符串的第一个字符。如果我们使用正则表达式 <code>^a</code> (如果a是起始符号)匹配字符串 <code>abc</code>，它会匹配到 <code>a</code>。 但是如果我们使用正则表达式 <code>^b</code>，它是匹配不到任何东西的，因为在字符串 <code>abc</code> 中 “b” 不是起始字符。 让我们来看看另一个正则表达式 <code>^(T|t)he</code>，这表示: 大写字母 <code>T</code> 或小写字母 <code>t</code> 是输入字符串的起始符号，后面跟着小写字母 <code>h</code>，后跟小写字母 <code>e</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;(T|t)he&quot; =&gt; The car is parked in the garage.</span><br><span class=\"line\">&quot;^(T|t)he&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"美元符号\"><a href=\"#美元符号\" class=\"headerlink\" title=\"美元符号\"></a>美元符号</h3><p>美元 <code>$</code> 符号用于检查匹配字符是否是输入字符串的最后一个字符。例如正则表达式 <code>(at\\.)$</code>，表示: 小写字母 <code>a</code>，后跟小写字母 <code>t</code>，后跟一个 <code>.</code> 字符，且这个匹配器必须是字符串的结尾。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;(at\\.)&quot; =&gt; The fat cat. sat. on the mat.</span><br><span class=\"line\">&quot;(at\\.)$&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"简写字符集\"><a href=\"#简写字符集\" class=\"headerlink\" title=\"简写字符集\"></a>简写字符集</h2><p>正则表达式为常用的字符集和常用的正则表达式提供了简写。简写字符集如下:</p>\n<table>\n<thead>\n<tr>\n<th>简写</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.</td>\n<td>匹配除换行符以外的任意字符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配所有字母和数字的字符: <code>[a-zA-Z0-9_]</code></td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>匹配非字母和数字的字符: <code>[^\\w]</code></td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>匹配数字: <code>[0-9]</code></td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配非数字: <code>[^\\d]</code></td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配空格符: <code>[\\t\\n\\f\\r\\p&#123;Z&#125;]</code></td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配非空格符: <code>[^\\s]</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h2><p>后行断言和先行断言有时候被称为断言，它们是特殊类型的 <em><strong>非捕获组</strong></em> (用于匹配模式，但不包括在匹配列表中)。当我们在一种特定模式之前或者之后有这种模式时，会优先使用断言。 例如我们想获取输入字符串 <code>$4.44 and $10.88</code> 中带有前缀 <code>$</code> 的所有数字。我们可以使用这个正则表达式 <code>(?&lt;=\\$)[0-9\\.]*</code>，表示: 获取包含 <code>.</code> 字符且前缀为 <code>$</code> 的所有数字。 以下是正则表达式中使用的断言:</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>?=</td>\n<td>正向先行断言</td>\n</tr>\n<tr>\n<td>?!</td>\n<td>负向先行断言</td>\n</tr>\n<tr>\n<td>?&lt;=</td>\n<td>正向后行断言</td>\n</tr>\n<tr>\n<td>?&lt;!</td>\n<td>负向后行断言</td>\n</tr>\n</tbody></table>\n<h3 id=\"正向先行断言\"><a href=\"#正向先行断言\" class=\"headerlink\" title=\"正向先行断言\"></a>正向先行断言</h3><p>正向先行断言认为第一部分的表达式必须是先行断言表达式。返回的匹配结果仅包含与第一部分表达式匹配的文本。 要在一个括号内定义一个正向先行断言，在括号中问号和等号是这样使用的 <code>(?=...)</code>。先行断言表达式写在括号中的等号后面。 例如正则表达式 <code>(T|t)he(?=\\sfat)</code>，表示: 匹配大写字母 <code>T</code> 或小写字母 <code>t</code>，后面跟字母 <code>h</code>，后跟字母 <code>e</code>。 在括号中，我们定义了正向先行断言，它会引导正则表达式引擎匹配 <code>The</code> 或 <code>the</code> 后面跟着 <code>fat</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;(T|t)he(?=\\sfat)&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"负向先行断言\"><a href=\"#负向先行断言\" class=\"headerlink\" title=\"负向先行断言\"></a>负向先行断言</h3><p>当我们需要从输入字符串中获取不匹配表达式的内容时，使用负向先行断言。负向先行断言的定义跟我们定义的正向先行断言一样， 唯一的区别是不是等号 <code>=</code>，我们使用否定符号 <code>!</code>，例如 <code>(?!...)</code>。 我们来看看下面的正则表达式 <code>(T|t)he(?!\\sfat)</code>，表示: 从输入字符串中获取全部 <code>The</code> 或者 <code>the</code> 且不匹配 <code>fat</code> 前面加上一个空格字符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;(T|t)he(?!\\sfat)&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"正向后行断言\"><a href=\"#正向后行断言\" class=\"headerlink\" title=\"正向后行断言\"></a>正向后行断言</h3><p>正向后行断言是用于获取在特定模式之前的所有匹配内容。正向后行断言表示为 <code>(?&lt;=...)</code>。例如正则表达式 <code>(?&lt;=(T|t)he\\s)(fat|mat)</code>，表示: 从输入字符串中获取在单词 <code>The</code> 或 <code>the</code> 之后的所有 <code>fat</code> 和 <code>mat</code> 单词。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;(?&lt;=(T|t)he\\s)(fat|mat)&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"负向后行断言\"><a href=\"#负向后行断言\" class=\"headerlink\" title=\"负向后行断言\"></a>负向后行断言</h3><p>负向后行断言是用于获取不在特定模式之前的所有匹配的内容。负向后行断言表示为 <code>(?&lt;!...)</code>。例如正则表达式 <code>(?&lt;!(T|t)he\\s)(cat)</code>，表示: 在输入字符中获取所有不在 <code>The</code> 或 <code>the</code> 之后的所有单词 <code>cat</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;(?&lt;!(T|t)he\\s)(cat)&quot; =&gt; The cat sat on cat.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"标记\"><a href=\"#标记\" class=\"headerlink\" title=\"标记\"></a>标记</h2><p>标记也称为修饰符，因为它会修改正则表达式的输出。这些标志可以以任意顺序或组合使用，并且是正则表达式的一部分。</p>\n<table>\n<thead>\n<tr>\n<th>标记</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>i</td>\n<td>不区分大小写: 将匹配设置为不区分大小写。</td>\n</tr>\n<tr>\n<td>g</td>\n<td>全局搜索: 搜索整个输入字符串中的所有匹配。</td>\n</tr>\n<tr>\n<td>m</td>\n<td>多行匹配: 会匹配输入字符串每一行。</td>\n</tr>\n</tbody></table>\n<h3 id=\"不区分大小写\"><a href=\"#不区分大小写\" class=\"headerlink\" title=\"不区分大小写\"></a>不区分大小写</h3><p><code>i</code> 修饰符用于执行不区分大小写匹配。例如正则表达式 <code>/The/gi</code>，表示: 大写字母 <code>T</code>，后跟小写字母 <code>h</code>，后跟字母 <code>e</code>。 但是在正则匹配结束时 <code>i</code> 标记会告诉正则表达式引擎忽略这种情况。正如你所看到的，我们还使用了 <code>g</code> 标记，因为我们要在整个输入字符串中搜索匹配。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;The&quot; =&gt; The fat cat sat on the mat.</span><br><span class=\"line\">&quot;/The/gi&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"全局搜索\"><a href=\"#全局搜索\" class=\"headerlink\" title=\"全局搜索\"></a>全局搜索</h3><p><code>g</code> 修饰符用于执行全局匹配 (会查找所有匹配，不会在查找到第一个匹配时就停止)。 例如正则表达式 <code>/.(at)/g</code>，表示: 除换行符之外的任意字符，后跟小写字母 <code>a</code>，后跟小写字母 <code>t</code>。 因为我们在正则表达式的末尾使用了 <code>g</code> 标记，它会从整个输入字符串中找到每个匹配项。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;.(at)&quot; =&gt; The fat cat sat on the mat.</span><br><span class=\"line\">&quot;/.(at)/g&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多行匹配\"><a href=\"#多行匹配\" class=\"headerlink\" title=\"多行匹配\"></a>多行匹配</h3><p><code>m</code> 修饰符被用来执行多行的匹配。正如我们前面讨论过的 <code>(^, $)</code>，使用定位符来检查匹配字符是输入字符串开始或者结束。但是我们希望每一行都使用定位符，所以我们就使用 <code>m</code> 修饰符。 例如正则表达式 <code>/at(.)?$/gm</code>，表示: 小写字母 <code>a</code>，后跟小写字母 <code>t</code>，匹配除了换行符以外任意字符零次或一次。而且因为 <code>m</code> 标记，现在正则表达式引擎匹配字符串中每一行的末尾。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;/.at(.)?$/&quot; =&gt; The fat</span><br><span class=\"line\">                cat sat</span><br><span class=\"line\">                on the mat.</span><br><span class=\"line\">&quot;/.at(.)?$/gm&quot; =&gt; The fat</span><br><span class=\"line\">                  cat sat</span><br><span class=\"line\">                  on the mat.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用正则表达式\"><a href=\"#常用正则表达式\" class=\"headerlink\" title=\"常用正则表达式\"></a>常用正则表达式</h2><h3 id=\"手机号\"><a href=\"#手机号\" class=\"headerlink\" title=\"手机号\"></a>手机号</h3><h4 id=\"匹配所有\"><a href=\"#匹配所有\" class=\"headerlink\" title=\"匹配所有\"></a>匹配所有</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(?:\\+?86)?1(?:3\\d&#123;3&#125;|5[^4\\D]\\d&#123;2&#125;|8\\d&#123;3&#125;|7(?:[35678]\\d&#123;2&#125;|4(?:0\\d|1[0-2]|9\\d))|9[189]\\d&#123;2&#125;|66\\d&#123;2&#125;)\\d&#123;6&#125;$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"匹配中国移动\"><a href=\"#匹配中国移动\" class=\"headerlink\" title=\"匹配中国移动\"></a>匹配中国移动</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(?:\\+?86)?1(?:3(?:4[^9\\D]|[5-9]\\d)|5[^3-6\\D]\\d|8[23478]\\d|(?:78|98)\\d)\\d&#123;7&#125;$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"匹配中国联通\"><a href=\"#匹配中国联通\" class=\"headerlink\" title=\"匹配中国联通\"></a>匹配中国联通</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(?:\\+?86)?1(?:3[0-2]|[578][56]|66)\\d&#123;8&#125;$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"匹配中国电信\"><a href=\"#匹配中国电信\" class=\"headerlink\" title=\"匹配中国电信\"></a>匹配中国电信</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(?:\\+?86)?1(?:3(?:3\\d|49)\\d|53\\d&#123;2&#125;|8[019]\\d&#123;2&#125;|7(?:[37]\\d&#123;2&#125;|40[0-5])|9[19]\\d&#123;2&#125;)\\d&#123;6&#125;$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"手机号码中间四位用-代替\"><a href=\"#手机号码中间四位用-代替\" class=\"headerlink\" title=\"手机号码中间四位用*代替\"></a>手机号码中间四位用*代替</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function encryptPhone(val)&#123;</span><br><span class=\"line\">    if(!val) return;</span><br><span class=\"line\">    return val.replace(/^(\\d&#123;3&#125;)(\\d&#123;4&#125;)(\\d+)/, &#x27;$1****$3&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">encryptPhone(&#x27;13173786224&#x27;); // 131****6224</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h3><h4 id=\"验证是不是数字\"><a href=\"#验证是不是数字\" class=\"headerlink\" title=\"验证是不是数字\"></a>验证是不是数字</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[0-9]*$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"验证n位的数字\"><a href=\"#验证n位的数字\" class=\"headerlink\" title=\"验证n位的数字\"></a>验证n位的数字</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d&#123;n&#125;$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"正整数\"><a href=\"#正整数\" class=\"headerlink\" title=\"正整数\"></a>正整数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[0-9]*[1-9][0-9]*$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"正浮点数\"><a href=\"#正浮点数\" class=\"headerlink\" title=\"正浮点数\"></a>正浮点数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"负整数\"><a href=\"#负整数\" class=\"headerlink\" title=\"负整数\"></a>负整数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^-[0-9]*[1-9][0-9]*$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"负浮点数\"><a href=\"#负浮点数\" class=\"headerlink\" title=\"负浮点数\"></a>负浮点数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"浮点数\"><a href=\"#浮点数\" class=\"headerlink\" title=\"浮点数\"></a>浮点数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(-?\\d+)(\\.\\d+)?$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"大于等于0-小于等于150-支持小数位出现5-如145-5-用于判断考卷分数\"><a href=\"#大于等于0-小于等于150-支持小数位出现5-如145-5-用于判断考卷分数\" class=\"headerlink\" title=\"大于等于0, 小于等于150, 支持小数位出现5, 如145.5, 用于判断考卷分数\"></a>大于等于0, 小于等于150, 支持小数位出现5, 如145.5, 用于判断考卷分数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^150$|^(?:\\d|[1-9]\\d|1[0-4]\\d)(?:.5)?$</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><h4 id=\"纯中文-汉字\"><a href=\"#纯中文-汉字\" class=\"headerlink\" title=\"纯中文/汉字\"></a>纯中文/汉字</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(?:[\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uFA0E\\uFA0F\\uFA11\\uFA13\\uFA14\\uFA1F\\uFA21\\uFA23\\uFA24\\uFA27-\\uFA29]|[\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0])+$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"纯英文字母\"><a href=\"#纯英文字母\" class=\"headerlink\" title=\"纯英文字母\"></a>纯英文字母</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[a-zA-Z]+$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符\"><a href=\"#密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符\" class=\"headerlink\" title=\"密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符\"></a>密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^.*(?=.&#123;6,&#125;)(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"帐号是否合法-字母开头，允许5-16字节，允许字母数字下划线组合\"><a href=\"#帐号是否合法-字母开头，允许5-16字节，允许字母数字下划线组合\" class=\"headerlink\" title=\"帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线组合\"></a>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线组合</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"是否由数字和字母组成\"><a href=\"#是否由数字和字母组成\" class=\"headerlink\" title=\"是否由数字和字母组成\"></a>是否由数字和字母组成</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[A-Za-z0-9]+$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"去除字符串中空格\"><a href=\"#去除字符串中空格\" class=\"headerlink\" title=\"去除字符串中空格\"></a>去除字符串中空格</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str.replace(/\\s/g,&#x27;&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"电子邮件\"><a href=\"#电子邮件\" class=\"headerlink\" title=\"电子邮件\"></a>电子邮件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]&#123;2,4&#125;)*$</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"身份证\"><a href=\"#身份证\" class=\"headerlink\" title=\"身份证\"></a>身份证</h3><h4 id=\"身份证号-支持1-2代-15位-18位数字\"><a href=\"#身份证号-支持1-2代-15位-18位数字\" class=\"headerlink\" title=\"身份证号, 支持1/2代(15位/18位数字)\"></a>身份证号, 支持1/2代(15位/18位数字)</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(^\\d&#123;8&#125;(0\\d|10|11|12)([0-2]\\d|30|31)\\d&#123;3&#125;$)|(^\\d&#123;6&#125;(18|19|20)\\d&#123;2&#125;(0\\d|10|11|12)([0-2]\\d|30|31)\\d&#123;3&#125;(\\d|X|x)$)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"一代身份证号-15位数字\"><a href=\"#一代身份证号-15位数字\" class=\"headerlink\" title=\"一代身份证号(15位数字)\"></a>一代身份证号(15位数字)</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d&#123;8&#125;(0\\d|10|11|12)([0-2]\\d|30|31)\\d&#123;3&#125;$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二代身份证号-18位数字-最后一位是校验位-可能为数字或字符X\"><a href=\"#二代身份证号-18位数字-最后一位是校验位-可能为数字或字符X\" class=\"headerlink\" title=\"二代身份证号(18位数字),最后一位是校验位,可能为数字或字符X\"></a>二代身份证号(18位数字),最后一位是校验位,可能为数字或字符X</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d&#123;6&#125;(18|19|20)\\d&#123;2&#125;(0\\d|10|11|12)([0-2]\\d|30|31)\\d&#123;3&#125;(\\d|X|x)$</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本匹配\"><a href=\"#基本匹配\" class=\"headerlink\" title=\"基本匹配\"></a>基本匹配</h2><p>正则表达式只是我们用于在文本中检索字母和数字的模式。例如正则表达式 <code>cat</code>，表示: 字母 <code>c</code> 后面跟着一个字母 <code>a</code>，再后面跟着一个字母 <code>t</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;cat&quot; =&gt; The cat sat on the mat</span><br></pre></td></tr></table></figure>\n\n<p>正则表达式 <code>123</code> 会匹配字符串 “123”。通过将正则表达式中的每个字符逐个与要匹配的字符串中的每个字符进行比较，来完成正则匹配。 正则表达式通常区分大小写，因此正则表达式 <code>Cat</code> 与字符串 “cat” 不匹配。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;Cat&quot; =&gt; The cat sat on the Cat</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><p>元字符是正则表达式的基本组成元素。元字符在这里跟它通常表达的意思不一样，而是以某种特殊的含义去解释。有些元字符写在方括号内的时候有特殊含义。 元字符如下:</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.</td>\n<td>匹配除换行符以外的任意字符。</td>\n</tr>\n<tr>\n<td>[ ]</td>\n<td>字符类，匹配方括号中包含的任意字符。</td>\n</tr>\n<tr>\n<td>[^ ]</td>\n<td>否定字符类。匹配方括号中不包含的任意字符</td>\n</tr>\n<tr>\n<td>*</td>\n<td>匹配前面的子表达式零次或多次</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配前面的子表达式一次或多次</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>花括号，匹配前面字符至少 n 次，但是不超过 m 次。</td>\n</tr>\n<tr>\n<td>(xyz)</td>\n<td>字符组，按照确切的顺序匹配字符xyz。</td>\n</tr>\n<tr>\n<td>|</td>\n<td>分支结构，匹配符号之前的字符或后面的字符。</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>转义符，它可以还原元字符原来的含义，允许你匹配保留字符 `[ ] ( ) { } . * + ? ^ $ \\</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配行的开始</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配行的结束</td>\n</tr>\n</tbody></table>\n<h2 id=\"英文句号\"><a href=\"#英文句号\" class=\"headerlink\" title=\"英文句号\"></a>英文句号</h2><p>英文句号 <code>.</code> 是元字符的最简单的例子。元字符 <code>.</code> 可以匹配任意单个字符。它不会匹配换行符和新行的字符。例如正则表达式 <code>.ar</code>，表示: 任意字符后面跟着一个字母 <code>a</code>， 再后面跟着一个字母 <code>r</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;.ar&quot; =&gt; The car parked in the garage.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h2><p>字符集也称为字符类。方括号被用于指定字符集。使用字符集内的连字符来指定字符范围。方括号内的字符范围的顺序并不重要。 例如正则表达式 <code>[Tt]he</code>，表示: 大写 <code>T</code> 或小写 <code>t</code> ，后跟字母 <code>h</code>，再后跟字母 <code>e</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;[Tt]he&quot; =&gt; The car parked in the garage.</span><br></pre></td></tr></table></figure>\n\n<p>然而，字符集中的英文句号表示它字面的含义。正则表达式 <code>ar[.]</code>，表示小写字母 <code>a</code>，后面跟着一个字母 <code>r</code>，再后面跟着一个英文句号 <code>.</code> 字符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;ar[.]&quot; =&gt; A garage is a good place to park a car.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"否定字符集\"><a href=\"#否定字符集\" class=\"headerlink\" title=\"否定字符集\"></a>否定字符集</h3><p>一般来说插入字符 <code>^</code> 表示一个字符串的开始，但是当它在方括号内出现时，它会取消字符集。例如正则表达式 <code>[^c]ar</code>，表示: 除了字母 <code>c</code> 以外的任意字符，后面跟着字符 <code>a</code>， 再后面跟着一个字母 <code>r</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;[^c]ar&quot; =&gt; The car parked in the garage.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重复\"><a href=\"#重复\" class=\"headerlink\" title=\"重复\"></a>重复</h2><p>以下元字符 <code>+</code>，<code>*</code> 或 <code>?</code> 用于指定子模式可以出现多少次。这些元字符在不同情况下的作用不同。</p>\n<h3 id=\"星号\"><a href=\"#星号\" class=\"headerlink\" title=\"星号\"></a>星号</h3><p>该符号 <code>*</code> 表示匹配上一个匹配规则的零次或多次。正则表达式 <code>a*</code> 表示小写字母 <code>a</code> 可以重复零次或者多次。但是它如果出现在字符集或者字符类之后，它表示整个字符集的重复。 例如正则表达式 <code>[a-z]*</code>，表示: 一行中可以包含任意数量的小写字母。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;[a-z]*&quot; =&gt; The car parked in the garage #21.</span><br></pre></td></tr></table></figure>\n\n<p>该 <code>*</code> 符号可以与元符号 <code>.</code> 用在一起，用来匹配任意字符串 <code>.*</code>。该 <code>*</code> 符号可以与空格符 <code>\\s</code> 一起使用，用来匹配一串空格字符。 例如正则表达式 <code>\\s*cat\\s*</code>，表示: 零个或多个空格，后面跟小写字母 <code>c</code>，再后面跟小写字母 <code>a</code>，再再后面跟小写字母 <code>t</code>，后面再跟零个或多个空格。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;\\s*cat\\s*&quot; =&gt; The fat cat sat on the cat.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加号\"><a href=\"#加号\" class=\"headerlink\" title=\"加号\"></a>加号</h3><p>该符号 <code>+</code> 匹配上一个字符的一次或多次。例如正则表达式 <code>c.+t</code>，表示: 一个小写字母 <code>c</code>，后跟任意数量的字符，后跟小写字母 <code>t</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;c.+t&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问号\"><a href=\"#问号\" class=\"headerlink\" title=\"问号\"></a>问号</h3><p>在正则表达式中，元字符 <code>?</code> 用来表示前一个字符是可选的。该符号匹配前一个字符的零次或一次。 例如正则表达式 <code>[T]?he</code>，表示: 可选的大写字母 <code>T</code>，后面跟小写字母 <code>h</code>，后跟小写字母 <code>e</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;[T]he&quot; =&gt; The car is parked in the garage.</span><br><span class=\"line\">&quot;[T]?he&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"花括号\"><a href=\"#花括号\" class=\"headerlink\" title=\"花括号\"></a>花括号</h2><p>在正则表达式中花括号(也被称为量词 ?)用于指定字符或一组字符可以重复的次数。例如正则表达式 <code>[0-9]&#123;2,3&#125;</code>，表示: 匹配至少2位数字但不超过3位(0到9范围内的字符)。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;[0-9]&#123;2,3&#125;&quot; =&gt; The number was 9.9997 but we rounded it off to 10.0.</span><br></pre></td></tr></table></figure>\n\n<p>我们可以省略第二个数字。例如正则表达式 <code>[0-9]&#123;2,&#125;</code>，表示: 匹配2个或更多个数字。如果我们也删除逗号，则正则表达式 <code>[0-9]&#123;2&#125;</code>，表示: 匹配正好为2位数的数字。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;[0-9]&#123;2,&#125;&quot; =&gt; The number was 9.9997 but we rounded it off to 10.0.</span><br><span class=\"line\">&quot;[0-9]&#123;2&#125;&quot; =&gt; The number was 9.9997 but we rounded it off to 10.0.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符组\"><a href=\"#字符组\" class=\"headerlink\" title=\"字符组\"></a>字符组</h2><p>字符组是一组写在圆括号内的子模式 <code>(...)</code>。正如我们在正则表达式中讨论的那样，如果我们把一个量词放在一个字符之后，它会重复前一个字符。 但是，如果我们把量词放在一个字符组之后，它会重复整个字符组。 例如正则表达式 <code>(ab)*</code> 表示匹配零个或多个的字符串 “ab”。我们还可以在字符组中使用元字符 <code>|</code>。例如正则表达式 <code>(c|g|p)ar</code>，表示: 小写字母 <code>c</code>、<code>g</code> 或 <code>p</code> 后面跟字母 <code>a</code>，后跟字母 <code>r</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;(c|g|p)ar&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分支结构\"><a href=\"#分支结构\" class=\"headerlink\" title=\"分支结构\"></a>分支结构</h2><p>在正则表达式中垂直条 <code>|</code> 用来定义分支结构，分支结构就像多个表达式之间的条件。现在你可能认为这个字符集和分支机构的工作方式一样。 但是字符集和分支结构巨大的区别是字符集只在字符级别上有作用，然而分支结构在表达式级别上依然可以使用。 例如正则表达式 <code>(T|t)he|car</code>，表示: 大写字母 <code>T</code> 或小写字母 <code>t</code>，后面跟小写字母 <code>h</code>，后跟小写字母 <code>e</code> 或小写字母 <code>c</code>，后跟小写字母 <code>a</code>，后跟小写字母 <code>r</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;(T|t)he|car&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"转义特殊字符\"><a href=\"#转义特殊字符\" class=\"headerlink\" title=\"转义特殊字符\"></a>转义特殊字符</h2><p>正则表达式中使用反斜杠 <code>\\</code> 来转义下一个字符。这将允许你使用保留字符来作为匹配字符 <code>&#123; &#125; [ ] / \\ + * . $ ^ | ?</code>。在特殊字符前面加 <code>\\</code>，就可以使用它来做匹配字符。 例如正则表达式 <code>.</code> 是用来匹配除了换行符以外的任意字符。现在要在输入字符串中匹配 <code>.</code> 字符，正则表达式 <code>(f|c|m)at\\.?</code>，表示: 小写字母 <code>f</code>、<code>c</code> 或者 <code>m</code> 后跟小写字母 <code>a</code>，后跟小写字母 <code>t</code>，后跟可选的 <code>.</code> 字符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;(f|c|m)at\\.?&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定位符\"><a href=\"#定位符\" class=\"headerlink\" title=\"定位符\"></a>定位符</h2><p>在正则表达式中，为了检查匹配符号是否是起始符号或结尾符号，我们使用定位符。 定位符有两种类型: 第一种类型是 <code>^</code> 检查匹配字符是否是起始字符，第二种类型是 <code>$</code>，它检查匹配字符是否是输入字符串的最后一个字符。</p>\n<h3 id=\"插入符号\"><a href=\"#插入符号\" class=\"headerlink\" title=\"插入符号\"></a>插入符号</h3><p>插入符号 <code>^</code> 符号用于检查匹配字符是否是输入字符串的第一个字符。如果我们使用正则表达式 <code>^a</code> (如果a是起始符号)匹配字符串 <code>abc</code>，它会匹配到 <code>a</code>。 但是如果我们使用正则表达式 <code>^b</code>，它是匹配不到任何东西的，因为在字符串 <code>abc</code> 中 “b” 不是起始字符。 让我们来看看另一个正则表达式 <code>^(T|t)he</code>，这表示: 大写字母 <code>T</code> 或小写字母 <code>t</code> 是输入字符串的起始符号，后面跟着小写字母 <code>h</code>，后跟小写字母 <code>e</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;(T|t)he&quot; =&gt; The car is parked in the garage.</span><br><span class=\"line\">&quot;^(T|t)he&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"美元符号\"><a href=\"#美元符号\" class=\"headerlink\" title=\"美元符号\"></a>美元符号</h3><p>美元 <code>$</code> 符号用于检查匹配字符是否是输入字符串的最后一个字符。例如正则表达式 <code>(at\\.)$</code>，表示: 小写字母 <code>a</code>，后跟小写字母 <code>t</code>，后跟一个 <code>.</code> 字符，且这个匹配器必须是字符串的结尾。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;(at\\.)&quot; =&gt; The fat cat. sat. on the mat.</span><br><span class=\"line\">&quot;(at\\.)$&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"简写字符集\"><a href=\"#简写字符集\" class=\"headerlink\" title=\"简写字符集\"></a>简写字符集</h2><p>正则表达式为常用的字符集和常用的正则表达式提供了简写。简写字符集如下:</p>\n<table>\n<thead>\n<tr>\n<th>简写</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.</td>\n<td>匹配除换行符以外的任意字符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配所有字母和数字的字符: <code>[a-zA-Z0-9_]</code></td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>匹配非字母和数字的字符: <code>[^\\w]</code></td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>匹配数字: <code>[0-9]</code></td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配非数字: <code>[^\\d]</code></td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配空格符: <code>[\\t\\n\\f\\r\\p&#123;Z&#125;]</code></td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配非空格符: <code>[^\\s]</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h2><p>后行断言和先行断言有时候被称为断言，它们是特殊类型的 <em><strong>非捕获组</strong></em> (用于匹配模式，但不包括在匹配列表中)。当我们在一种特定模式之前或者之后有这种模式时，会优先使用断言。 例如我们想获取输入字符串 <code>$4.44 and $10.88</code> 中带有前缀 <code>$</code> 的所有数字。我们可以使用这个正则表达式 <code>(?&lt;=\\$)[0-9\\.]*</code>，表示: 获取包含 <code>.</code> 字符且前缀为 <code>$</code> 的所有数字。 以下是正则表达式中使用的断言:</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>?=</td>\n<td>正向先行断言</td>\n</tr>\n<tr>\n<td>?!</td>\n<td>负向先行断言</td>\n</tr>\n<tr>\n<td>?&lt;=</td>\n<td>正向后行断言</td>\n</tr>\n<tr>\n<td>?&lt;!</td>\n<td>负向后行断言</td>\n</tr>\n</tbody></table>\n<h3 id=\"正向先行断言\"><a href=\"#正向先行断言\" class=\"headerlink\" title=\"正向先行断言\"></a>正向先行断言</h3><p>正向先行断言认为第一部分的表达式必须是先行断言表达式。返回的匹配结果仅包含与第一部分表达式匹配的文本。 要在一个括号内定义一个正向先行断言，在括号中问号和等号是这样使用的 <code>(?=...)</code>。先行断言表达式写在括号中的等号后面。 例如正则表达式 <code>(T|t)he(?=\\sfat)</code>，表示: 匹配大写字母 <code>T</code> 或小写字母 <code>t</code>，后面跟字母 <code>h</code>，后跟字母 <code>e</code>。 在括号中，我们定义了正向先行断言，它会引导正则表达式引擎匹配 <code>The</code> 或 <code>the</code> 后面跟着 <code>fat</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;(T|t)he(?=\\sfat)&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"负向先行断言\"><a href=\"#负向先行断言\" class=\"headerlink\" title=\"负向先行断言\"></a>负向先行断言</h3><p>当我们需要从输入字符串中获取不匹配表达式的内容时，使用负向先行断言。负向先行断言的定义跟我们定义的正向先行断言一样， 唯一的区别是不是等号 <code>=</code>，我们使用否定符号 <code>!</code>，例如 <code>(?!...)</code>。 我们来看看下面的正则表达式 <code>(T|t)he(?!\\sfat)</code>，表示: 从输入字符串中获取全部 <code>The</code> 或者 <code>the</code> 且不匹配 <code>fat</code> 前面加上一个空格字符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;(T|t)he(?!\\sfat)&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"正向后行断言\"><a href=\"#正向后行断言\" class=\"headerlink\" title=\"正向后行断言\"></a>正向后行断言</h3><p>正向后行断言是用于获取在特定模式之前的所有匹配内容。正向后行断言表示为 <code>(?&lt;=...)</code>。例如正则表达式 <code>(?&lt;=(T|t)he\\s)(fat|mat)</code>，表示: 从输入字符串中获取在单词 <code>The</code> 或 <code>the</code> 之后的所有 <code>fat</code> 和 <code>mat</code> 单词。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;(?&lt;=(T|t)he\\s)(fat|mat)&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"负向后行断言\"><a href=\"#负向后行断言\" class=\"headerlink\" title=\"负向后行断言\"></a>负向后行断言</h3><p>负向后行断言是用于获取不在特定模式之前的所有匹配的内容。负向后行断言表示为 <code>(?&lt;!...)</code>。例如正则表达式 <code>(?&lt;!(T|t)he\\s)(cat)</code>，表示: 在输入字符中获取所有不在 <code>The</code> 或 <code>the</code> 之后的所有单词 <code>cat</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;(?&lt;!(T|t)he\\s)(cat)&quot; =&gt; The cat sat on cat.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"标记\"><a href=\"#标记\" class=\"headerlink\" title=\"标记\"></a>标记</h2><p>标记也称为修饰符，因为它会修改正则表达式的输出。这些标志可以以任意顺序或组合使用，并且是正则表达式的一部分。</p>\n<table>\n<thead>\n<tr>\n<th>标记</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>i</td>\n<td>不区分大小写: 将匹配设置为不区分大小写。</td>\n</tr>\n<tr>\n<td>g</td>\n<td>全局搜索: 搜索整个输入字符串中的所有匹配。</td>\n</tr>\n<tr>\n<td>m</td>\n<td>多行匹配: 会匹配输入字符串每一行。</td>\n</tr>\n</tbody></table>\n<h3 id=\"不区分大小写\"><a href=\"#不区分大小写\" class=\"headerlink\" title=\"不区分大小写\"></a>不区分大小写</h3><p><code>i</code> 修饰符用于执行不区分大小写匹配。例如正则表达式 <code>/The/gi</code>，表示: 大写字母 <code>T</code>，后跟小写字母 <code>h</code>，后跟字母 <code>e</code>。 但是在正则匹配结束时 <code>i</code> 标记会告诉正则表达式引擎忽略这种情况。正如你所看到的，我们还使用了 <code>g</code> 标记，因为我们要在整个输入字符串中搜索匹配。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;The&quot; =&gt; The fat cat sat on the mat.</span><br><span class=\"line\">&quot;/The/gi&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"全局搜索\"><a href=\"#全局搜索\" class=\"headerlink\" title=\"全局搜索\"></a>全局搜索</h3><p><code>g</code> 修饰符用于执行全局匹配 (会查找所有匹配，不会在查找到第一个匹配时就停止)。 例如正则表达式 <code>/.(at)/g</code>，表示: 除换行符之外的任意字符，后跟小写字母 <code>a</code>，后跟小写字母 <code>t</code>。 因为我们在正则表达式的末尾使用了 <code>g</code> 标记，它会从整个输入字符串中找到每个匹配项。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;.(at)&quot; =&gt; The fat cat sat on the mat.</span><br><span class=\"line\">&quot;/.(at)/g&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多行匹配\"><a href=\"#多行匹配\" class=\"headerlink\" title=\"多行匹配\"></a>多行匹配</h3><p><code>m</code> 修饰符被用来执行多行的匹配。正如我们前面讨论过的 <code>(^, $)</code>，使用定位符来检查匹配字符是输入字符串开始或者结束。但是我们希望每一行都使用定位符，所以我们就使用 <code>m</code> 修饰符。 例如正则表达式 <code>/at(.)?$/gm</code>，表示: 小写字母 <code>a</code>，后跟小写字母 <code>t</code>，匹配除了换行符以外任意字符零次或一次。而且因为 <code>m</code> 标记，现在正则表达式引擎匹配字符串中每一行的末尾。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;/.at(.)?$/&quot; =&gt; The fat</span><br><span class=\"line\">                cat sat</span><br><span class=\"line\">                on the mat.</span><br><span class=\"line\">&quot;/.at(.)?$/gm&quot; =&gt; The fat</span><br><span class=\"line\">                  cat sat</span><br><span class=\"line\">                  on the mat.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用正则表达式\"><a href=\"#常用正则表达式\" class=\"headerlink\" title=\"常用正则表达式\"></a>常用正则表达式</h2><h3 id=\"手机号\"><a href=\"#手机号\" class=\"headerlink\" title=\"手机号\"></a>手机号</h3><h4 id=\"匹配所有\"><a href=\"#匹配所有\" class=\"headerlink\" title=\"匹配所有\"></a>匹配所有</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(?:\\+?86)?1(?:3\\d&#123;3&#125;|5[^4\\D]\\d&#123;2&#125;|8\\d&#123;3&#125;|7(?:[35678]\\d&#123;2&#125;|4(?:0\\d|1[0-2]|9\\d))|9[189]\\d&#123;2&#125;|66\\d&#123;2&#125;)\\d&#123;6&#125;$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"匹配中国移动\"><a href=\"#匹配中国移动\" class=\"headerlink\" title=\"匹配中国移动\"></a>匹配中国移动</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(?:\\+?86)?1(?:3(?:4[^9\\D]|[5-9]\\d)|5[^3-6\\D]\\d|8[23478]\\d|(?:78|98)\\d)\\d&#123;7&#125;$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"匹配中国联通\"><a href=\"#匹配中国联通\" class=\"headerlink\" title=\"匹配中国联通\"></a>匹配中国联通</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(?:\\+?86)?1(?:3[0-2]|[578][56]|66)\\d&#123;8&#125;$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"匹配中国电信\"><a href=\"#匹配中国电信\" class=\"headerlink\" title=\"匹配中国电信\"></a>匹配中国电信</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(?:\\+?86)?1(?:3(?:3\\d|49)\\d|53\\d&#123;2&#125;|8[019]\\d&#123;2&#125;|7(?:[37]\\d&#123;2&#125;|40[0-5])|9[19]\\d&#123;2&#125;)\\d&#123;6&#125;$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"手机号码中间四位用-代替\"><a href=\"#手机号码中间四位用-代替\" class=\"headerlink\" title=\"手机号码中间四位用*代替\"></a>手机号码中间四位用*代替</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function encryptPhone(val)&#123;</span><br><span class=\"line\">    if(!val) return;</span><br><span class=\"line\">    return val.replace(/^(\\d&#123;3&#125;)(\\d&#123;4&#125;)(\\d+)/, &#x27;$1****$3&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">encryptPhone(&#x27;13173786224&#x27;); // 131****6224</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h3><h4 id=\"验证是不是数字\"><a href=\"#验证是不是数字\" class=\"headerlink\" title=\"验证是不是数字\"></a>验证是不是数字</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[0-9]*$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"验证n位的数字\"><a href=\"#验证n位的数字\" class=\"headerlink\" title=\"验证n位的数字\"></a>验证n位的数字</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d&#123;n&#125;$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"正整数\"><a href=\"#正整数\" class=\"headerlink\" title=\"正整数\"></a>正整数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[0-9]*[1-9][0-9]*$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"正浮点数\"><a href=\"#正浮点数\" class=\"headerlink\" title=\"正浮点数\"></a>正浮点数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"负整数\"><a href=\"#负整数\" class=\"headerlink\" title=\"负整数\"></a>负整数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^-[0-9]*[1-9][0-9]*$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"负浮点数\"><a href=\"#负浮点数\" class=\"headerlink\" title=\"负浮点数\"></a>负浮点数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"浮点数\"><a href=\"#浮点数\" class=\"headerlink\" title=\"浮点数\"></a>浮点数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(-?\\d+)(\\.\\d+)?$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"大于等于0-小于等于150-支持小数位出现5-如145-5-用于判断考卷分数\"><a href=\"#大于等于0-小于等于150-支持小数位出现5-如145-5-用于判断考卷分数\" class=\"headerlink\" title=\"大于等于0, 小于等于150, 支持小数位出现5, 如145.5, 用于判断考卷分数\"></a>大于等于0, 小于等于150, 支持小数位出现5, 如145.5, 用于判断考卷分数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^150$|^(?:\\d|[1-9]\\d|1[0-4]\\d)(?:.5)?$</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><h4 id=\"纯中文-汉字\"><a href=\"#纯中文-汉字\" class=\"headerlink\" title=\"纯中文/汉字\"></a>纯中文/汉字</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(?:[\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uFA0E\\uFA0F\\uFA11\\uFA13\\uFA14\\uFA1F\\uFA21\\uFA23\\uFA24\\uFA27-\\uFA29]|[\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0])+$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"纯英文字母\"><a href=\"#纯英文字母\" class=\"headerlink\" title=\"纯英文字母\"></a>纯英文字母</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[a-zA-Z]+$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符\"><a href=\"#密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符\" class=\"headerlink\" title=\"密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符\"></a>密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^.*(?=.&#123;6,&#125;)(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"帐号是否合法-字母开头，允许5-16字节，允许字母数字下划线组合\"><a href=\"#帐号是否合法-字母开头，允许5-16字节，允许字母数字下划线组合\" class=\"headerlink\" title=\"帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线组合\"></a>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线组合</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"是否由数字和字母组成\"><a href=\"#是否由数字和字母组成\" class=\"headerlink\" title=\"是否由数字和字母组成\"></a>是否由数字和字母组成</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[A-Za-z0-9]+$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"去除字符串中空格\"><a href=\"#去除字符串中空格\" class=\"headerlink\" title=\"去除字符串中空格\"></a>去除字符串中空格</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str.replace(/\\s/g,&#x27;&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"电子邮件\"><a href=\"#电子邮件\" class=\"headerlink\" title=\"电子邮件\"></a>电子邮件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]&#123;2,4&#125;)*$</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"身份证\"><a href=\"#身份证\" class=\"headerlink\" title=\"身份证\"></a>身份证</h3><h4 id=\"身份证号-支持1-2代-15位-18位数字\"><a href=\"#身份证号-支持1-2代-15位-18位数字\" class=\"headerlink\" title=\"身份证号, 支持1/2代(15位/18位数字)\"></a>身份证号, 支持1/2代(15位/18位数字)</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(^\\d&#123;8&#125;(0\\d|10|11|12)([0-2]\\d|30|31)\\d&#123;3&#125;$)|(^\\d&#123;6&#125;(18|19|20)\\d&#123;2&#125;(0\\d|10|11|12)([0-2]\\d|30|31)\\d&#123;3&#125;(\\d|X|x)$)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"一代身份证号-15位数字\"><a href=\"#一代身份证号-15位数字\" class=\"headerlink\" title=\"一代身份证号(15位数字)\"></a>一代身份证号(15位数字)</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d&#123;8&#125;(0\\d|10|11|12)([0-2]\\d|30|31)\\d&#123;3&#125;$</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二代身份证号-18位数字-最后一位是校验位-可能为数字或字符X\"><a href=\"#二代身份证号-18位数字-最后一位是校验位-可能为数字或字符X\" class=\"headerlink\" title=\"二代身份证号(18位数字),最后一位是校验位,可能为数字或字符X\"></a>二代身份证号(18位数字),最后一位是校验位,可能为数字或字符X</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d&#123;6&#125;(18|19|20)\\d&#123;2&#125;(0\\d|10|11|12)([0-2]\\d|30|31)\\d&#123;3&#125;(\\d|X|x)$</span><br></pre></td></tr></table></figure>\n\n\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckvqb62ch0001rify7zwnbuev","category_id":"ckvqb62cn0004rifyay7kenvd","_id":"ckvqb62ct000grify96nygluw"},{"post_id":"ckvqb62cs000erify139pg5c7","category_id":"ckvqb62cq000brifybyo44z7b","_id":"ckvqb62cw000nrify74fsgfrb"},{"post_id":"ckvqb62cl0003rifyfzg15g48","category_id":"ckvqb62cq000brifybyo44z7b","_id":"ckvqb62cx000srifyh0m5boq1"},{"post_id":"ckvqb62co0007rifya5fxcfgm","category_id":"ckvqb62cq000brifybyo44z7b","_id":"ckvqb62cy000vrify2igv8dx7"},{"post_id":"ckvqb62cx000rrifyh8pm4col","category_id":"ckvqb62cn0004rifyay7kenvd","_id":"ckvqb62d00012rifyah8325ht"},{"post_id":"ckvqb62cp0009rify1ldg6z3u","category_id":"ckvqb62cw000orify8fscaus1","_id":"ckvqb62d10016rify6ka93zdj"},{"post_id":"ckvqb62cq000arify0j2a196p","category_id":"ckvqb62cy000xrify38rs9ceb","_id":"ckvqb62d2001arify583j0tlg"},{"post_id":"ckvqb62ct000frify3b977jgq","category_id":"ckvqb62d10014rifyhu020ihu","_id":"ckvqb62d6001jrify9tdcd6h6"},{"post_id":"ckvqb62d2001crify3auo2k37","category_id":"ckvqb62cn0004rifyay7kenvd","_id":"ckvqb62d6001nrifydc1i6qf2"},{"post_id":"ckvqb62cv000krify2odm5kgo","category_id":"ckvqb62d10014rifyhu020ihu","_id":"ckvqb62d7001qrifyhtbe5px4"},{"post_id":"ckvqb62d4001hrify97l21nsk","category_id":"ckvqb62cn0004rifyay7kenvd","_id":"ckvqb62d8001vrify9yy9430h"},{"post_id":"ckvqb62d6001mrify6dm993g1","category_id":"ckvqb62d10014rifyhu020ihu","_id":"ckvqb62d8001xrifyarot324v"},{"post_id":"ckvqb62cw000mrifyahg2avwt","category_id":"ckvqb62d4001irify3pegf8ec","_id":"ckvqb62d90021rify8ph83n4q"},{"post_id":"ckvqb62cy000urify4fhtcqqc","category_id":"ckvqb62d7001rrify04fk1s6z","_id":"ckvqb62d90023rify37n7hsx0"},{"post_id":"ckvqb62cz000zrify2ikzfuxn","category_id":"ckvqb62d8001yrifyhl1s10wq","_id":"ckvqb62da002arifyhe9v566h"},{"post_id":"ckvqb62cz0011rify9euof6r5","category_id":"ckvqb62d4001irify3pegf8ec","_id":"ckvqb62da002crify0pr7h8bo"},{"post_id":"ckvqb62d10015rifygaf29lxx","category_id":"ckvqb62da0029rifyhzz4cfli","_id":"ckvqb62da002erify3k42fnn5"},{"post_id":"ckvqb62d20018rifybzm4ddu0","category_id":"ckvqb62da002drifydxfndvtw","_id":"ckvqb62db002hrify80a1154y"},{"post_id":"ckvqb62d3001frify5a4bhz2h","category_id":"ckvqb62d7001rrify04fk1s6z","_id":"ckvqb62db002irify29ab6505"},{"post_id":"ckvqb62d7001prifyeip62142","category_id":"ckvqb62db002grify94fk4bsb","_id":"ckvqb62db002jrify5m00baxv"},{"post_id":"ckvqb62dl002krify1rvh4och","category_id":"ckvqb62d10014rifyhu020ihu","_id":"ckvqb62do002prifyf58b8frb"},{"post_id":"ckvqb62dn002lrify07bx1jlj","category_id":"ckvqb62do002orify6v021jyr","_id":"ckvqb62dp002urifybu9od6gt"},{"post_id":"ckvqb62dn002nrifydb033qhx","category_id":"ckvqb62do002srify61b75ol8","_id":"ckvqb62dp002wrify6tus5y0a"}],"PostTag":[{"post_id":"ckvqb62ch0001rify7zwnbuev","tag_id":"ckvqb62co0005rify2wfq2mt2","_id":"ckvqb62cs000drifyg6m61z9h"},{"post_id":"ckvqb62cs000erify139pg5c7","tag_id":"ckvqb62cr000crify7d47eevr","_id":"ckvqb62cu000jrifyg8jh8b59"},{"post_id":"ckvqb62cl0003rifyfzg15g48","tag_id":"ckvqb62cr000crify7d47eevr","_id":"ckvqb62cw000lrify3k13fb6k"},{"post_id":"ckvqb62cv000krify2odm5kgo","tag_id":"ckvqb62cr000crify7d47eevr","_id":"ckvqb62cx000qrifycxha8udj"},{"post_id":"ckvqb62co0007rifya5fxcfgm","tag_id":"ckvqb62cr000crify7d47eevr","_id":"ckvqb62cy000trify4ecs21oo"},{"post_id":"ckvqb62cw000mrifyahg2avwt","tag_id":"ckvqb62cr000crify7d47eevr","_id":"ckvqb62cz000yrifyaektdraj"},{"post_id":"ckvqb62cp0009rify1ldg6z3u","tag_id":"ckvqb62cr000crify7d47eevr","_id":"ckvqb62cz0010rifybn9g3miw"},{"post_id":"ckvqb62cq000arify0j2a196p","tag_id":"ckvqb62cy000wrifych578xsw","_id":"ckvqb62d10017rifyessee33d"},{"post_id":"ckvqb62cz0011rify9euof6r5","tag_id":"ckvqb62cr000crify7d47eevr","_id":"ckvqb62d20019rify32xhbm45"},{"post_id":"ckvqb62ct000frify3b977jgq","tag_id":"ckvqb62d10013rify8tksfybo","_id":"ckvqb62d3001erify91w8e3es"},{"post_id":"ckvqb62d20018rifybzm4ddu0","tag_id":"ckvqb62cr000crify7d47eevr","_id":"ckvqb62d4001grifyb5izfg64"},{"post_id":"ckvqb62d2001crify3auo2k37","tag_id":"ckvqb62co0005rify2wfq2mt2","_id":"ckvqb62d6001lrify89je01b0"},{"post_id":"ckvqb62d3001frify5a4bhz2h","tag_id":"ckvqb62cr000crify7d47eevr","_id":"ckvqb62d7001orify2nyia016"},{"post_id":"ckvqb62cx000rrifyh8pm4col","tag_id":"ckvqb62d2001brifygbh2gjar","_id":"ckvqb62d7001trify888negkb"},{"post_id":"ckvqb62d4001hrify97l21nsk","tag_id":"ckvqb62co0005rify2wfq2mt2","_id":"ckvqb62d8001wrifyb1yt3oc6"},{"post_id":"ckvqb62d6001mrify6dm993g1","tag_id":"ckvqb62cr000crify7d47eevr","_id":"ckvqb62d90020rify22ra10h5"},{"post_id":"ckvqb62cy000urify4fhtcqqc","tag_id":"ckvqb62d6001krify4rwxfa3h","_id":"ckvqb62d90022rify6gs41bx1"},{"post_id":"ckvqb62d8001urify44i0ct3g","tag_id":"ckvqb62cr000crify7d47eevr","_id":"ckvqb62d90024rify1xt074v0"},{"post_id":"ckvqb62cz000zrify2ikzfuxn","tag_id":"ckvqb62d7001srify2j844ii9","_id":"ckvqb62d90027rifyg5iy1xx7"},{"post_id":"ckvqb62d10015rifygaf29lxx","tag_id":"ckvqb62d9001zrifye4nfcde4","_id":"ckvqb62da0028rify7teqe98z"},{"post_id":"ckvqb62d7001prifyeip62142","tag_id":"ckvqb62d90026rifybvhz85jz","_id":"ckvqb62da002brifydwcjeqh0"},{"post_id":"ckvqb62dl002krify1rvh4och","tag_id":"ckvqb62dn002mrify81gm4owp","_id":"ckvqb62do002rrify6gob18u4"},{"post_id":"ckvqb62dn002lrify07bx1jlj","tag_id":"ckvqb62do002qrifyhrulcfrq","_id":"ckvqb62dp002vrify3vbhbmk1"},{"post_id":"ckvqb62dn002nrifydb033qhx","tag_id":"ckvqb62do002trify87hud6yi","_id":"ckvqb62dp002xrify43r603zd"}],"Tag":[{"name":"Vue技巧","_id":"ckvqb62co0005rify2wfq2mt2"},{"name":"面经","_id":"ckvqb62cr000crify7d47eevr"},{"name":"Docker","_id":"ckvqb62cy000wrifych578xsw"},{"name":"JavaScript工具函数","_id":"ckvqb62d10013rify8tksfybo"},{"name":"TS笔记","_id":"ckvqb62d2001brifygbh2gjar"},{"name":"SEO","_id":"ckvqb62d6001krify4rwxfa3h"},{"name":"WebStorm技巧","_id":"ckvqb62d7001srify2j844ii9"},{"name":"gin中文文档","_id":"ckvqb62d9001zrifye4nfcde4"},{"name":"设计模式","_id":"ckvqb62d90026rifybvhz85jz"},{"name":"JS的Proxy笔记","_id":"ckvqb62dn002mrify81gm4owp"},{"name":"Webpack","_id":"ckvqb62do002qrifyhrulcfrq"},{"name":"正则表达式","_id":"ckvqb62do002trify87hud6yi"}]}}